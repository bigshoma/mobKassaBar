
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	ЗначениеПолучено = Ложь;
	
	Если Параметры.Свойство("ШтрихкодЧека") Тогда
		
		ШтрихкодЧека = ПолученныйШтрихкод;
		
		Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() И ЗначениеЗаполнено(ШтрихкодЧека) Тогда
			ЗакрытьФорму();
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ШтрихкодНоменклатуры") Тогда
		
		ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, Параметры);
		
	ИначеЕсли Параметры.Свойство("КодQR") Тогда
		
		ВремТипШтрихкода = МенеджерОборудованияКлиент.ОпределитьТипШтрихкода(ПолученныйШтрихкод);
		
		ТекстОшибкиQR = НСтр("ru = 'Не удалось расшифровать QR-код'");
		
		Если НЕ ВремТипШтрихкода = "QR" Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиQR);
			Возврат;
			
		КонецЕсли;
		
		ДанныеQR = МенеджерОборудованияКлиентСервер.РасшифроватьQRКодЧекаККТ(ПолученныйШтрихкод);
		
		Если ЗначениеЗаполнено(ДанныеQR.НомерФискальногоДокумента) Тогда
			
			НомерЧекаККМ = ДанныеQR.НомерФискальногоДокумента;
			
			Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
				ЗакрытьФорму();
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиQR);
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(НоменклатураПоШтрихкоду, Параметры) Экспорт
	
	Номенклатура = НоменклатураПоШтрихкоду.Номенклатура;
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() И ЗначениеЗаполнено(Номенклатура) Тогда
		ЗакрытьФорму();
	КонецЕсли;

КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ШтрихкодЧека") И ЗначениеЗаполнено(ШтрихкодЧека) Тогда
		
		ЗакрытьФорму();
		
	ИначеЕсли ДополнительныеПараметры.Свойство("ШтрихкодНоменклатуры") И ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЗакрытьФорму();
		
	ИначеЕсли ДополнительныеПараметры.Свойство("КодQR") И ЗначениеЗаполнено(НомерЧекаККМ) Тогда
		
		ЗакрытьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	Если ТипЗнч(Параметры.СтруктураПоиска) = Тип("Структура") Тогда
		
		СтруктураПоиска = Параметры.СтруктураПоиска;
		ЗаполнитьФормуПоПараметрамПоиска();
		
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	Если Параметры.Свойство("Заголовок") Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект, "Подсказка");
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		
		Если МенеджерОборудованияКлиент.ОпределитьТипШтрихкода(Параметр) = "QR" Тогда
			
			ДополнительныеПараметры.Вставить("КодQR");
			
		ИначеЕсли Лев(Параметр, 2) = ПродажиКлиентСерверПовтИсп.ПрефиксШтрихкодаЧека() Тогда
			
			ДополнительныеПараметры.Вставить("ШтрихкодЧека");
		Иначе
			
			ДополнительныеПараметры.Вставить("ШтрихкодНоменклатуры");
		КонецЕсли;
		
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеНоменклатураВыбор", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "Выбор");
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	Закрыть("ОчиститьПоиск");
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьШтрихкодЧека(Команда)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ШтрихкодЧека", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СканироватьШтрихкодНоменклатуры(Команда)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ШтрихкодНоменклатуры", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьQR(Команда)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("КодQR", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьФормуПоПараметрамПоиска()
	
	СписокГрупп = "ГруппаНомерЧекаККМ, ГруппаШтрихкодЧека, ГруппаНоменклатура,
		|ГруппаЗаказКлиента, ГруппаФИО, ГруппаТелефон, ГруппаАдресЭлектроннойПочты";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		СписокГрупп,
		"Видимость",
		Ложь
	);
	
	Если СтруктураПоиска.Свойство("Номенклатура") Тогда
		
		Элементы.ГруппаНоменклатура.Видимость = Истина;
		Номенклатура = СтруктураПоиска.Номенклатура;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("НомерЧекаККМ") Тогда
		
		Элементы.ГруппаНомерЧекаККМ.Видимость = Истина;
		НомерЧекаККМ = СтруктураПоиска.НомерЧекаККМ;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("ШтрихкодЧека") Тогда
		
		Элементы.ГруппаШтрихкодЧека.Видимость = Истина;
		ШтрихкодЧека = СтруктураПоиска.ШтрихкодЧека;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("НомерЗаказаКлиента") Тогда
		
		Элементы.ГруппаЗаказКлиента.Видимость = Истина;
		НомерЗаказаКлиента = СтруктураПоиска.НомерЗаказаКлиента;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("ФИО") Тогда
		
		Элементы.ГруппаФИО.Видимость = Истина;
		ФИО = СтруктураПоиска.ФИО;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("Телефон") Тогда
		
		Элементы.ГруппаТелефон.Видимость = Истина;
		Телефон = СтруктураПоиска.Телефон;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
		
		Элементы.ГруппаАдресЭлектроннойПочты.Видимость = Истина;
		АдресЭлектроннойПочты = СтруктураПоиска.АдресЭлектроннойПочты;
	КонецЕсли;

	
	Элементы.Подсказка.Видимость = Ложь;
	
	Если ИспользуетсяАсинхронныйСканер Тогда
		
		ТекстПодсказки = "или просканируйте:";
		ПодсказкаЗаполнена = Ложь;
		
		Если ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования())
			И ИспользуетсяАсинхронныйСканер Тогда
			
			Если СтруктураПоиска.Свойство("НомерЧекаККМ") И ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяККТ() Тогда
				
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + НСтр("ru = '• QR-код чека'");
				ПодсказкаЗаполнена = Истина;
			КонецЕсли;
			
			Если СтруктураПоиска.Свойство("ШтрихкодЧека")
				И (ЗначениеНастроекВызовСервераПовтИсп.ПечататьШтрихкодНаЧеке() ИЛИ
				(ЗначениеНастроекВызовСервераПовтИсп.ИспользоватьПречек()
					И ЗначениеНастроекВызовСервераПовтИсп.ПечататьШтрихкодНаЧеке())) Тогда
				
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + НСтр("ru = '• Штрихкод чека'");
				ПодсказкаЗаполнена = Истина;
			КонецЕсли;
			
			Если СтруктураПоиска.Свойство("Номенклатура")
				И ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() Тогда
				
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + НСтр("ru = '• Штрихкод товара'");
				ПодсказкаЗаполнена = Истина;
			КонецЕсли;
			
			Если ПодсказкаЗаполнена Тогда
				Элементы.Подсказка.Заголовок = ТекстПодсказки;
				Элементы.Подсказка.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеНоменклатураВыбор(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ОповещениеНоменклатураВыборНаСервере(Результат.АдресВоВременномХранилище);
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ЗакрытьФорму();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеНоменклатураВыборНаСервере(АдресВоВременномХранилище)
	
	ТаблицаПодбор = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого СтрокаПодбора Из ТаблицаПодбор Цикл
		Номенклатура = СтрокаПодбора.Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Для Каждого ПараметрПоиска Из СтруктураПоиска Цикл
		СтруктураПоиска[ПараметрПоиска.Ключ] = ЭтотОбъект[ПараметрПоиска.Ключ];
	КонецЦикла;
	
	Закрыть(СтруктураПоиска);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СканироватьШтрихкодНоменклатуры", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров()
		И НЕ ИспользуетсяАсинхронныйСканер);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СканироватьШтрихкодЧека", "Видимость",
		ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования())
		И НЕ ИспользуетсяАсинхронныйСканер);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СканироватьQR", "Видимость",
		ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования())
		И ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяККТ()
		И НЕ ИспользуетсяАсинхронныйСканер);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаШтрихкодЧека", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ПечататьШтрихкодНаЧеке() ИЛИ 
				(ЗначениеНастроекВызовСервераПовтИсп.ИспользоватьПречек()
					И ЗначениеНастроекВызовСервераПовтИсп.ПечататьШтрихкодНаЧеке()));
		
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, , , 2);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	//
КонецПроцедуры

#КонецОбласти
