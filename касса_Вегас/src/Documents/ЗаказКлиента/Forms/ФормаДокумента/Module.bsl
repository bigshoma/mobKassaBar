
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры) Экспорт
	
	ВводитьАкцизныеМарки = Ложь;
	ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(ДанныеНоменклатуры, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВозвратТоваров")
		И ДополнительныеПараметры.ВозвратТоваров Тогда
		
		Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
			
			МассивНоменклатуры = Новый Массив;
			МассивНоменклатуры.Добавить(ДанныеНоменклатуры);
			
			ЧекПродажи = ПродажиВызовСервера.ПолучитьЧекПередачиТоваровПоЗаказу(Объект.Ссылка);
			
			ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
			ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
			
			ПараметрыЧека.Основание.ЧекПродажи = ЧекПродажи;
			ПараметрыЧека.Основание.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
			ПараметрыЧека.Основание.ЭтоВозврат = Истина;
			
			ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = МассивНоменклатуры;
			ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
			
			ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
			
		Иначе
			
			ПулТоваровВозврата.Добавить(ДанныеНоменклатуры);
			
			Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
				ДополнительныеПараметры.ВременноеЗакрытиеДиалога = Ложь;
				ОткрытьДиалогВводаШтрихкода();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИдентификаторСтроки = ОпределитьСтрокуЧека(ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.Цена);
		
		ЗаполнитьСтрокуЧека(ИдентификаторСтроки, ДанныеНоменклатуры);
		ТоварыПриИзменении();
		
		ПодсветитьСтроку(ИдентификаторСтроки);
		
		ОткрытьДиалогВводаШтрихкода();
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога")
		И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ВозвратТоваров")
		И ДополнительныеПараметры.ВозвратТоваров И ПулТоваровВозврата.Количество() > 0 Тогда
		
		ЧекПродажи = ПродажиВызовСервера.ПолучитьЧекПередачиТоваровПоЗаказу(Объект.Ссылка);
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		
		ПараметрыЧека.Основание.ЧекПродажи = ЧекПродажи;
		ПараметрыЧека.Основание.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		ПараметрыЧека.Основание.ЭтоВозврат = Истина;
		
		ПараметрыЧека.Основание.ПризнакСпособаРасчета =
			ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		
		ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = ПулТоваровВозврата.ВыгрузитьЗначения();
		ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
		ПулТоваровВозврата.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДолгКлиента.Видимость = Ложь;
	
	ИспользуютсяСкидкиНаценки     = ЗначениеНастроекПовтИсп.ИспользуютсяСкидкиНаценки();
	ИспользуютсяРасчетыСКлиентами = ЗначениеНастроекПовтИсп.ИспользуютсяРасчетыСКлиентами();
	
	НастроитьФормуПоЗначениямНастроек();
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект,
		"Сумма, СуммаНДС, ДолгКлиента, ПереданоТоваровСумма, Оплачено, Всего"
	);
	
	ОбщегоНазначения.УстановитьЦветИтоговыхПолей(ЭтотОбъект, "Сумма, СуммаНДС");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьРасчеты();
	Иначе
		
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Заказ: Новый'");
		
		УстановитьНовыйНомер();
		Объект.НомерЗаказа = Объект.Номер;
		
		ОдинДень = 86400;
		Объект.ЖелаемаяДатаПокупки = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату() + ОдинДень;
		
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	Если Параметры.Свойство("СозданиеПослеСканирования") И Параметры.СозданиеПослеСканирования Тогда
		
		УстановитьСтраницуТовары();
		
		Для Каждого ДанныеНоменклатуры Из Параметры.МассивНоменклатуры Цикл
			
			ИдентификаторСтроки = ОпределитьСтрокуЧека(ДанныеНоменклатуры.Номенклатура);
			
			ЗаполнитьСтрокуЧека(ИдентификаторСтроки, ДанныеНоменклатуры);
		КонецЦикла;
		
		ИдетПроцессСканирования = Истина;
		
	ИначеЕсли Параметры.Свойство("СозданиеИзПодбора") И Параметры.СозданиеИзПодбора Тогда
		
		УстановитьСтраницуТовары();
		ПодборТоваровСервер(Параметры.АдресВоВременномХранилище);
		
	КонецЕсли;
	
	НастроитьВидимостьПоСтатусу();
	ОбновитьЗаписиПоСтрокамТЧ();
	
	УстановитьДоступностьКомандРасчета();
	
	УстановитьДоступностьЭлементовСинхронизация();
	
	// скидка на заказ
	РассчитатьСкидкуНаценкуПоДокументу();
	ОбновитьОтображениеСкидкиНаДокумент();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОткрытьДиалогВводаШтрихкода();
	
	ОбновитьПредставлениеАдреса();
	
	// телефония
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект,
		"Позвонить",
		"Видимость",
		ДоступенНаборНомера()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	ИначеЕсли ИмяСобытия = "ЗаписанЧек" Тогда
		
		Если ЭтоЧекПоТекущемуЗаказу(Параметр) Тогда
			
			ЗаполнитьРасчеты();
			НастроитьВидимостьПоСтатусу();
			УстановитьДоступностьКомандРасчета();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		Если НЕ ТоварыТолькоПросмотр Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
			ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтроки = ПолучитьПараметрыСтроки();
	
	Если НЕ ПараметрыСтроки = Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ПараметрыСтроки.ИдентификаторСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеИзменитьСтроку", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.РедактированиеСтроки", ПараметрыСтроки, ЭтотОбъект,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТоварыВыбор(Элемент,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиНаценкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СуммаБезСкидки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкидкаНаценкаПроцент",  СкидкаНаценкаНаЗаказПроцент);
	ПараметрыФормы.Вставить("СкидкаНаценкаСумма",    СкидкаНаценкаНаЗаказСумма);
	ПараметрыФормы.Вставить("СуммаБезСкидкиНаценки", СуммаБезСкидки);
	ПараметрыФормы.Вставить("ЗаголовокДокумента",    НСтр("ru = 'заказ'"));
	ПараметрыФормы.Вставить("ТолькоПросмотрФормы",   ТоварыТолькоПросмотр);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСкидкиНаЗаказЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСкидки", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ЗаписатьДокумент();
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомандыРасчета(Команда)
	
	
	Если КомандыРасчета.Количество() = 1 Тогда
		
		ВыполнитьКомандуРасчета(КомандыРасчета[0].Значение);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораКомандыРасчета", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, КомандыРасчета, Элементы.ПоказатьКомандыРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	ИдетПроцессСканирования = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваров(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПодборТоваров", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ПодборВЗаказКлиента");
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьАдресНаКарте(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Город", Объект.АдресДоставкиГород);
		Данные.Вставить("Улица", Объект.АдресДоставкиУлица);
		Данные.Вставить("Дом ",  Объект.АдресДоставкиДом);
		
		МестоположениеПоАдресу = ПолучитьМестоположениеПоАдресу(Новый ДанныеАдреса(Данные));
		
		Если НЕ МестоположениеПоАдресу = Неопределено Тогда
			ПоказатьНаКарте(МестоположениеПоАдресу);
		КонецЕсли;
		
	#Иначе
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Позвонить(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Телефон) Тогда
			Возврат;
		КонецЕсли;
		
		ВызватьСразу = Ложь;
		СредстваТелефонии.НабратьНомер(Объект.Телефон, ВызватьСразу);
		
	#Иначе
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдрес(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АдресДоставкиЗавершениеРедактирования", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",  НСтр("ru = 'Адрес доставки'"));
	ПараметрыФормы.Вставить("Город",    Объект.АдресДоставкиГород);
	ПараметрыФормы.Вставить("Дом",      Объект.АдресДоставкиДом);
	ПараметрыФормы.Вставить("Квартира", Объект.АдресДоставкиКвартира);
	ПараметрыФормы.Вставить("Подъезд",  Объект.АдресДоставкиПодъезд);
	ПараметрыФормы.Вставить("Улица",    Объект.АдресДоставкиУлица);
	ПараметрыФормы.Вставить("Этаж",     Объект.АдресДоставкиЭтаж);
	ПараметрыФормы.Вставить("Этаж",     Объект.АдресДоставкиЭтаж);
	ПараметрыФормы.Вставить("ТолькоПросмотрФормы", Объект.ЗагруженПриОбмене);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеАдреса", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmail(Команда)
	
	Если ПустаяСтрока(Объект.АдресЭлектроннойПочты) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетТребованиям = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.АдресЭлектроннойПочты, Истина);
	
	Если НЕ СоответствуетТребованиям Тогда
		
		ОчиститьСообщения();
		Сообщение = НСтр("ru = 'Почтовый адрес заполнен неверно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
		Возврат;
	КонецЕсли;
	
	#Если МобильноеПриложениеКлиент Тогда
		
		СтруктураПисьма = ПолучитьСтруктуруПисьма();
		
		Получатели = Новый Массив;
		Получатели.Добавить(Объект.АдресЭлектроннойПочты);
		
		РаботаСПочтойКлиент.ОтправитьЭлектронноеПисьмо(СтруктураПисьма, Получатели);
		
	#Иначе
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СкидкаНаДокумент

&НаКлиенте
Процедура ПриИзмененииСкидкиНаЗаказЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СкидкаНаценкаНаЗаказСумма   = Результат.СкидкаНаценкаСумма;
	СкидкаНаценкаНаЗаказПроцент = Результат.СкидкаНаценкаПроцент;
	
	НазначитьСкидкуНаЗаказ();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьСкидкуНаЗаказ()
	
	ОбновитьОтображениеСкидкиНаДокумент();
	
	Продажи.НазначитьСкидкуНаДокумент(Объект, "Товары", СкидкаНаценкаНаЗаказСумма);
	
	Для Каждого СтрокаЧека Из Объект.Товары Цикл
		РассчитатьНДССтрокиЧека(СтрокаЧека);
	КонецЦикла;
	
	ОбновитьЗаписиПоСтрокамТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСкидкиНаДокумент()
	
	Если НЕ ИспользуютсяСкидкиНаценки Тогда
		Возврат;
	КонецЕсли;
	
	Если СкидкаНаценкаНаЗаказСумма <= 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СуммаСкидкиНаценки", "Заголовок",
			НСтр("ru = 'Скидка'")
		);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СуммаСкидкиНаценки", "Заголовок",
			НСтр("ru = 'Наценка'")
		);
		
	КонецЕсли;
	
	ШаблонЗначенияСкидки = НСтр("ru = '%1 (%2%)'");
	
	СуммаСкидкиНаценки = ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗначенияСкидки,
		Формат(?(СкидкаНаценкаНаЗаказСумма < 0,   - СкидкаНаценкаНаЗаказСумма,   СкидкаНаценкаНаЗаказСумма),   ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()),
		Формат(?(СкидкаНаценкаНаЗаказПроцент < 0, - СкидкаНаценкаНаЗаказПроцент, СкидкаНаценкаНаЗаказПроцент), ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей())
	);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкуНаценкуПоДокументу()
	
	Если НЕ ИспользуютсяСкидкиНаценки Тогда
		Возврат;
	КонецЕсли;
	
	СкидкаНаценкаНаЗаказСумма = Объект.Товары.Итог("СкидкаНаценкаСумма");
	
	СуммаБезСкидки = Объект.Товары.Итог("СуммаБезСкидки");
	
	Если НЕ СуммаБезСкидки = 0 Тогда
		СкидкаНаценкаНаЗаказПроцент = СкидкаНаценкаНаЗаказСумма * 100 / СуммаБезСкидки;
	Иначе
		СкидкаНаценкаНаЗаказПроцент = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Расчеты

&НаСервере
Процедура ЗаполнитьРасчеты()
	
	УдалитьЭлементыКонтейнераРасчетов();
	
	// Итоги
	РасчетыПоЗаказу = Продажи.ПолучитьРасчетыПоЗаказу(Объект.Ссылка);
	ИтогиРасчетовПоЗаказу = Продажи.ПолучитьИтогиРасчетовПоЗаказу(Объект.Ссылка);
	
	ДолгКлиента 			= ИтогиРасчетовПоЗаказу.ДолгКлиента;
	ПереданоТоваровСумма 	= ИтогиРасчетовПоЗаказу.СуммаТоваров;
	Оплачено 				= ИтогиРасчетовПоЗаказу.СуммаОплаты;
	
	Элементы.ДолгКлиента.Видимость = (ДолгКлиента > 0);
	
	// Детальные расчеты
	ДанныеРасчетовДляВывода = ПолучитьДанныеРасчетовДляВывода(РасчетыПоЗаказу);
	
	КоличествоРасчетов = ДанныеРасчетовДляВывода.Количество();
	
	Для Каждого ДанныеРасчетаДляВывода Из ДанныеРасчетовДляВывода Цикл
		ОтобразитьРасчет(ДанныеРасчетаДляВывода);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеРасчетовДляВывода(РасчетыПоЗаказу)
	
	ДанныеРасчетовДляВывода = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоЗаказу.Дата,
	|	РасчетыПоЗаказу.Документ,
	|	ВЫБОР
	|		КОГДА РасчетыПоЗаказу.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыПоЗаказу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетыПоЗаказу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА РасчетыПоЗаказу.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПустаяСсылка)
	|			ТОГДА РасчетыПоЗаказу.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаТоваров,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыПоЗаказу.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПустаяСсылка)
	|			ТОГДА РасчетыПоЗаказу.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплаты,
	|	РасчетыПоЗаказу.ТипОплаты,
	|	РасчетыПоЗаказу.ПризнакСпособаРасчета
	|ПОМЕСТИТЬ РасчетыПоЗаказу
	|ИЗ
	|	&РасчетыПоЗаказу КАК РасчетыПоЗаказу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоЗаказу.Дата КАК Дата,
	|	РасчетыПоЗаказу.ЭтоВозврат,
	|	РасчетыПоЗаказу.Документ КАК Документ,
	|	РасчетыПоЗаказу.Документ.Номер КАК Номер,
	|	СУММА(РасчетыПоЗаказу.СуммаТоваров) КАК СуммаТоваров,
	|	СУММА(РасчетыПоЗаказу.СуммаОплаты) КАК СуммаОплаты,
	|	РасчетыПоЗаказу.ПризнакСпособаРасчета
	|ИЗ
	|	РасчетыПоЗаказу КАК РасчетыПоЗаказу
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоЗаказу.Дата,
	|	РасчетыПоЗаказу.Документ.Номер,
	|	РасчетыПоЗаказу.ЭтоВозврат,
	|	РасчетыПоЗаказу.Документ,
	|	РасчетыПоЗаказу.ПризнакСпособаРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("РасчетыПоЗаказу", РасчетыПоЗаказу);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РасчетПоЗаказу = РезультатЗапроса.Выбрать();
	
	Пока РасчетПоЗаказу.Следующий() Цикл
	
		ДанныеРасчетаДляВывода = Новый Структура;
		ДанныеРасчетаДляВывода.Вставить("ОписаниеОперации", "");
		ДанныеРасчетаДляВывода.Вставить("Дата");
		ДанныеРасчетаДляВывода.Вставить("ЭтоВозврат", РасчетПоЗаказу.ЭтоВозврат);
		ДанныеРасчетаДляВывода.Вставить("ОтображатьГиперссылку", Ложь);
		ДанныеРасчетаДляВывода.Вставить("НомерЧека", Неопределено);
		
		ДанныеРасчетаДляВывода.Вставить("СтрокаУИ",
			СтрЗаменить(Строка(РасчетПоЗаказу.Документ.УникальныйИдентификатор()), "-", "_")
		);
		
		Если ТипЗнч(РасчетПоЗаказу.Документ) = Тип("ДокументСсылка.Чек") Тогда
			ДанныеРасчетаДляВывода.ОтображатьГиперссылку = Истина;
			ДанныеРасчетаДляВывода.НомерЧека = РасчетПоЗаказу.Номер;
		КонецЕсли;
		
		ОписаниеОперацииПолное = "";
		
		ДанныеРасчетаДляВывода.Дата = РасчетПоЗаказу.Дата;
		
		// Товары
		ОписаниеОперацииТовары = "";
		
		Если ЗначениеЗаполнено(РасчетПоЗаказу.СуммаТоваров) Тогда
			
			Если РасчетПоЗаказу.ЭтоВозврат Тогда
				ОписаниеОперацииТовары = НСтр("ru = 'Получены товары на сумму'");
			Иначе
				ОписаниеОперацииТовары = НСтр("ru = 'Переданы товары на сумму'");
			КонецЕсли;
			
			ОписаниеОперацииТовары = ОписаниеОперацииТовары + ": " 
				+ Формат(РасчетПоЗаказу.СуммаТоваров, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей());
			
		КонецЕсли;
		
		// Оплата
		ОписаниеОперацииОплата = "";
		Если ЗначениеЗаполнено(РасчетПоЗаказу.СуммаОплаты) Тогда
			
			Если РасчетПоЗаказу.ЭтоВозврат Тогда
				
				ОписаниеОперацииОплата = НСтр("ru = 'Возвращена оплата'");
				
			Иначе
				
				Если РасчетПоЗаказу.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
					ИЛИ РасчетПоЗаказу.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
					ИЛИ РасчетПоЗаказу.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
					
					ОписаниеОперацииОплата = НСтр("ru = 'Получена оплата'");
					
				ИначеЕсли РасчетПоЗаказу.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
					ИЛИ РасчетПоЗаказу.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
					ИЛИ РасчетПоЗаказу.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная Тогда
					
					ОписаниеОперацииОплата = НСтр("ru = 'Получена предоплата'");
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеОперацииОплата = ОписаниеОперацииОплата + ": " 
				+ Формат(РасчетПоЗаказу.СуммаОплаты, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей());
			
		КонецЕсли;
		
		ОписаниеОперацииПолное = ОписаниеОперацииТовары
			+ ?(ПустаяСтрока(ОписаниеОперацииТовары), "", Символы.ПС)
			+ ОписаниеОперацииОплата;
		
		ДанныеРасчетаДляВывода.ОписаниеОперации = ОписаниеОперацииПолное;
		
		ДанныеРасчетовДляВывода.Добавить(ДанныеРасчетаДляВывода);
		
	КонецЦикла;
	
	Возврат ДанныеРасчетовДляВывода;
	
КонецФункции

&НаСервере
Процедура ОтобразитьРасчет(ДанныеДляВывода)
	
	ДатаСтрокой = Формат(ДанныеДляВывода.Дата, "ДФ='dd.MM.yy HH:mm'");
	
	ВысотаОписания = СтрЧислоСтрок(ДанныеДляВывода.ОписаниеОперации);
	
	Имя = "ГруппаРасчет_" + ДанныеДляВывода.СтрокаУИ;
	
	Группа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Элементы.РасчетыКонтейнер);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.РастягиватьПоГоризонтали = Истина;
	Группа.РазрешитьИзменениеСостава = Ложь;
	Группа.ОтображатьЗаголовок       = Ложь;
	
	Имя = "ОписаниеОперации_" + ДанныеДляВывода.СтрокаУИ;
	ДекорацияОписаниеОперации = Элементы.Добавить(Имя, Тип("ДекорацияФормы"), Группа);
	
	ДекорацияОписаниеОперации.Гиперссылка = Истина;
	ДекорацияОписаниеОперации.УстановитьДействие("Нажатие", "Подключаемый_РасчетНажатие");
	
	ДекорацияОписаниеОперации.АвтоМаксимальнаяВысота = Ложь;
	ДекорацияОписаниеОперации.РастягиватьПоГоризонтали = Истина;
	
	ЗаголовокДекорации = "";
	
	Если ДанныеДляВывода.ОтображатьГиперссылку Тогда
		
		ЗаголовокДекорации = НСтр("ru = 'Чек №%1 от %2 %3'");
		
		ЗаголовокДекорации = ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокДекорации,
			ДанныеДляВывода.НомерЧека,
			ДатаСтрокой,
			?(ДанныеДляВывода.ЭтоВозврат, НСтр("ru = '(возврат)'"), "")
		);
		
	Иначе
		
		ЗаголовокДекорации = НСтр("ru = 'Входящие данные'");
		ДекорацияОписаниеОперации.ЦветТекста = WebЦвета.Черный;
		
	КонецЕсли;
	
	ДекорацияОписаниеОперации.Подсказка = ДанныеДляВывода.ОписаниеОперации;
	ДекорацияОписаниеОперации.Заголовок = ЗаголовокДекорации;
	
	ДекорацияОписаниеОперации.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыКонтейнераРасчетов()
	
	ЭлементыКонтейнера = Элементы.РасчетыКонтейнер.ПодчиненныеЭлементы;
	
	КоличествоЭлементовКонтейнера = ЭлементыКонтейнера.Количество();
	
	Если КоличествоЭлементовКонтейнера = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексУдаляемогоЭлемента = КоличествоЭлементовКонтейнера - 1;
	
	Пока ИндексУдаляемогоЭлемента >= 0 Цикл
		
		Элементы.Удалить(ЭлементыКонтейнера.Получить(ИндексУдаляемогоЭлемента));
		
		ИндексУдаляемогоЭлемента = ИндексУдаляемогоЭлемента - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РасчетНажатие(Декорация)
	
	ИмяЭлемента = Декорация.Имя;
	СтрокаУИ = СтрЗаменить(ИмяЭлемента, "ОписаниеОперации_","");
	
	ЧекУИ = Новый УникальныйИдентификатор(СтрЗаменить(СтрокаУИ,"_","-"));
	
	СсылкаНаЧек = ПолучитьСсылкуНаЧек(ЧекУИ);
	
	Попытка
		
		ОткрытьФормуЧека(СсылкаНаЧек);
		
	Исключение
		
		// это был заказ, открывать форму не надо
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЧека(СсылкаНаЧек)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыЧека", ЭтотОбъект);
	
	ПродажиКлиент.ОткрытьФормуЧека(СсылкаНаЧек, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаЧек(ЧекУИ)
	
	СсылкаНаЧек = Документы.Чек.ПолучитьСсылку(ЧекУИ);
	
	Возврат СсылкаНаЧек;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандРасчета()
	
	КомандыРасчета.Очистить();
	
	ЗаказВыполнен = Объект.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Выполнен;
	
	Если Объект.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Отменен Тогда
		Элементы.ГруппаКомандыРасчета.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Предоплата
	Если ИспользуютсяРасчетыСКлиентами
		И НЕ ПереданоТоваровСумма > 0
		И НЕ ДокументПолностьюОплачен()
		И НЕ ЗаказВыполнен Тогда
		
		КомандыРасчета.Добавить("Предоплата", НСтр("ru = 'Предоплата'"));
	КонецЕсли;
	
	// Продажа
	Если НЕ Объект.Товары.Количество() = 0 
		И НЕ ПереданоТоваровСумма > 0 
		И НЕ ЗаказВыполнен Тогда
		
		КомандыРасчета.Добавить("Продажа", НСтр("ru = 'Продажа'"));
	КонецЕсли;
	
	// Постоплата
	Если ИспользуютсяРасчетыСКлиентами
			И ПереданоТоваровСумма > 0
			И ДолгКлиента > 0 
			И НЕ ЗаказВыполнен Тогда
		
		КомандыРасчета.Добавить("Постоплата", НСтр("ru = 'Постоплата'"));
	КонецЕсли;
	
	// Переплата по авансу
	Если ИспользуютсяРасчетыСКлиентами
		И ДолгКлиента < 0 Тогда
		
		КомандыРасчета.Добавить("ВозвратПереплаты", НСтр("ru = 'Возврат оплаты'"));
	КонецЕсли;
	
	// Возврат товаров и оплаты
	Если ПереданоТоваровСумма > 0 Тогда
		
		КомандыРасчета.Добавить("ВозвратТоваров", НСтр("ru = 'Возврат товаров'"));
	КонецЕсли;
	
	УстановитьОтображениеКомандыРасчета();
	
КонецПроцедуры

&НаСервере
Функция УстановитьОтображениеКомандыРасчета()
	
	Если КомандыРасчета.Количество() = 0 Тогда
		
		Элементы.ГруппаКомандыРасчета.Видимость = Ложь;
		
	ИначеЕсли КомандыРасчета.Количество() = 1 Тогда
		
		Элементы.ГруппаКомандыРасчета.Видимость = Истина;
		Элементы.ПоказатьКомандыРасчета.Заголовок = КомандыРасчета[0].Представление;
		
	Иначе
		
		Элементы.ГруппаКомандыРасчета.Видимость = Истина;
		Элементы.ПоказатьКомандыРасчета.Заголовок = НСтр("ru = 'Чек'");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРасчета(ИмяКомандыРасчета)
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьДокумент();
	КонецЕсли;
	
	ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
	ПараметрыЧека.Основание.ЗаказКлиента = Объект.Ссылка;
	ПараметрыЧека.Основание.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
	ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
	
	ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
	
	Если ИмяКомандыРасчета = "Продажа" Тогда
		
		ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		
	ИначеЕсли ИмяКомандыРасчета = "Предоплата" Тогда
		
		ПроверкаВводаАвансНаНДС20();
		
		Если Объект.Товары.Количество() = 0 Тогда
			
			ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
			
		Иначе
			
			ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная");
			
		КонецЕсли;
		
	ИначеЕсли ИмяКомандыРасчета = "Постоплата" Тогда
		
		ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита");
		
	ИначеЕсли ИмяКомандыРасчета = "ВозвратПереплаты" Тогда
		
		ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
		
		ПараметрыЧека.Основание.ЭтоВозврат = Истина;
		
	ИначеЕсли ИмяКомандыРасчета = "ВозвратТоваров" Тогда
		
		ПулТоваровВозврата.Очистить();
		
		ОповещениеВозвратТоваров = Новый ОписаниеОповещения("ОповещениеВозвратТоваров", ЭтотОбъект);
		ПродажиКлиент.НачатьФормированиеЧекаВозвратаТоваров(ЭтотОбъект, Объект.Ссылка, ОповещениеВозвратТоваров);
		
		Возврат;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестная команда'");
		Возврат;
	КонецЕсли;
	
	ПараметрыЧека.Основание.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыЧека", ЭтотОбъект);
	ПараметрыЧека.ОповещениеПриЗавершении = ОписаниеОповещения;
	
	ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВозвратТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКомандыРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьКомандуРасчета(Результат.Значение);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ОчиститьНомерСтрокиДляПодсветки()
	
	НомерСтрокиДляПодсветки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьСтроку(ИдентификаторСтроки)
	
	СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ СтрокаТоваров = Неопределено Тогда
		НомерСтрокиДляПодсветки = СтрокаТоваров.НомерСтроки;
		Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		
		ИнтервалСек = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОчиститьНомерСтрокиДляПодсветки", ИнтервалСек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПисьма()
	
	СтруктураПисьма = РаботаСПочтойКлиент.СтруктураПисьмаОтчета();
	
	СтруктураПисьма.ТемаПисьма  = ПолучитьТемуПисьма();
	СтруктураПисьма.ТекстПисьма = "";
	
	Возврат СтруктураПисьма;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТемуПисьма()
	
	ШаблонТемыПисьма = НСтр("ru = 'Заказ %Номер% от %Дата%'");
	
	ТемаПисьма = СтрЗаменить(ШаблонТемыПисьма, "%Номер%", ОбщегоНазначенияКлиентСервер.ПредставлениеНомера(Объект.НомерЗаказа));
	ТемаПисьма = СтрЗаменить(ТемаПисьма, "%Дата%", Формат(Объект.Дата, "ДФ=dd.MM.yyyy; ДЛФ=D"));
	
	Возврат ТемаПисьма;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыЧека(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Оповестить("ЗаписанЗаказ", Объект.Ссылка); // для подсветки в списке
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуТовары()
	
	Элементы.СтраницыПролистывания.ТекущаяСтраница = Элементы.СтраницаТовары;
	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиЗавершениеРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресДоставкиГород    = Результат.Город;
	Объект.АдресДоставкиДом      = Результат.Дом;
	Объект.АдресДоставкиКвартира = Результат.Квартира;
	Объект.АдресДоставкиПодъезд  = Результат.Подъезд;
	Объект.АдресДоставкиУлица    = Результат.Улица;
	Объект.АдресДоставкиЭтаж     = Результат.Этаж;
	
	Модифицированность = Истина;
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	
	АдресПредставление = ГеолокацияКлиентСервер.ПолучитьПредставлениеАдреса(Объект.АдресДоставкиГород,
		Объект.АдресДоставкиУлица,
		Объект.АдресДоставкиДом,
		Объект.АдресДоставкиКвартира,
		Объект.АдресДоставкиПодъезд,
		Объект.АдресДоставкиЭтаж
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВводаШтрихкода(ДляЛюбогоТипаСканера = Ложь)
	
	Если ДляЛюбогоТипаСканера Тогда
		
		Если ИдетПроцессСканирования Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьШтрихкод", 0.1, Истина);
		КонецЕсли;
		
	Иначе
		
		Если ИдетПроцессСканирования И ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьШтрихкод", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьСтрокуЧека(Номенклатура, Цена = Неопределено)
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаЧека = Объект.Товары.Добавить();
		
	Иначе
		СтрокаЧека = Неопределено;
		
		// количество суммируется только если не введена скидка
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если Строка.СкидкаНаценкаСумма = 0 Тогда
				
				Если НЕ Цена = Неопределено Тогда
					Если НЕ Строка.Цена = Цена Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаЧека = Строка;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаЧека = Неопределено Тогда
			СтрокаЧека = Объект.Товары.Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЧека.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДокумент()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	ЭтотОбъект.Записать(ПараметрыЗаписи);
	ОбновитьЗаписиПоСтрокамТЧ();
	
	Оповестить("ЗаписанЗаказ", Объект.Ссылка);
	
	АвтоЗаголовок = Истина;
	Заголовок = НСтр("ru = 'Заказ'");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодборТоваровСервер(Результат.АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ПодборТоваровСервер(АдресВоВременномХранилище)
	
	ТаблицаПодбор = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого СтрокаПодбора Из ТаблицаПодбор Цикл
		
		ИдентификаторСтроки = ОпределитьСтрокуЧека(СтрокаПодбора.Номенклатура, СтрокаПодбора.Цена);
		
		ЗаполнитьСтрокуЧека(ИдентификаторСтроки, СтрокаПодбора);
		
	КонецЦикла;
	
	Если ИспользуютсяСкидкиНаценки Тогда
		РассчитатьСкидкуНаценкуПоДокументу();
		ОбновитьОтображениеСкидкиНаДокумент();
	КонецЕсли;
	
	ТоварыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьШтрихкод()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИзменитьСтроку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Результат.Свойство("УдалитьСтроку") Тогда
		
		ИндексСтроки = Объект.Товары.Индекс(СтрокаТаблицы);
		Объект.Товары.Удалить(ИндексСтроки);
		
		Модифицированность = Истина;
		
	ИначеЕсли Результат.Свойство("Сохранить") Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
		
		ОбновитьЗаписьПоСтроке(, ИдентификаторСтроки);
		
		Модифицированность = Истина;
		ПодсветитьСтроку(ИдентификаторСтроки);
	КонецЕсли;
	
	Если ИспользуютсяСкидкиНаценки Тогда
		РассчитатьСкидкуНаценкуПоДокументу();
		ОбновитьОтображениеСкидкиНаДокумент();
	КонецЕсли;
	
	ТоварыПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоСтатусу()
	
	УстановитьДоступностьРедактированияТоваров();
	
	Если Объект.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Выполнен Тогда
	
		УстановитьТолькоПросмотрТоваров();
		Элементы.СтатусЗаказа.СписокВыбора.Добавить(Перечисления.СтатусыЗаказовКлиентов.Выполнен, НСтр("ru = 'Выполнен'"));
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СтатусЗаказа",
		"ТолькоПросмотр",
		Объект.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Выполнен
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрТоваров()
	
	ТоварыТолькоПросмотр = Истина;
	
	СписокКнопок = "ПодборТоваров, СканированиеШтрихкода";
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРедактированияТоваров()
	
	ТоварыТолькоПросмотр = Ложь;
	
	СписокКнопок = "ПодборТоваров, СканированиеШтрихкода";
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СканированиеШтрихкода",
		"Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() И НЕ ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписьПоСтроке(Знач Строка, ИдентификаторСтроки = Неопределено)
	
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		СтрокаТЧ = Строка;
	КонецЕсли;
	
	ЗаписьПоСтроке = НСтр("ru = '%Количество%%ЕдИзм% Х %Цена%%Скидка% = %Сумма%'");
	
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Количество%", Формат(СтрокаТЧ.Количество, ЗначениеНастроекПовтИсп.ФорматКоличественныхПолей()));
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%ЕдИзм%",      Строка(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения));
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Цена%",       Формат(СтрокаТЧ.Цена, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Сумма%",      Формат(СтрокаТЧ.Сумма, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
	
	// Скидка
	СкидкаНаценкаСумма = СтрокаТЧ.СкидкаНаценкаСумма;
	Если ЗначениеЗаполнено(СкидкаНаценкаСумма) Тогда
		
		СкидкаНаценкаПроцент = СтрокаТЧ.СкидкаНаценкаПроцент;
		Если ЗначениеЗаполнено(СкидкаНаценкаПроцент) Тогда
			
			ЗаписьСкидкаНаценка = НСтр("ru = '%Знак% %СкидкаНаценкаСумма% (%Процент%%)'");
			Процент = ?(СкидкаНаценкаПроцент > 0, СкидкаНаценкаПроцент, -СкидкаНаценкаПроцент);

			ЗаписьСкидкаНаценка = СтрЗаменить(ЗаписьСкидкаНаценка, "%Процент%", Процент);
		Иначе
			
			ЗаписьСкидкаНаценка = НСтр("ru = '%Знак% %СкидкаНаценкаСумма%'");
		КонецЕсли;
		
		СкидкаСумма = ?(СкидкаНаценкаСумма > 0, СкидкаНаценкаСумма, - СкидкаНаценкаСумма);
		Знак = ?(СкидкаНаценкаСумма > 0, "+", "-");
		
		ЗаписьСкидкаНаценка = СтрЗаменить(ЗаписьСкидкаНаценка, "%Знак%", Знак);
		ЗаписьСкидкаНаценка = СтрЗаменить(ЗаписьСкидкаНаценка, "%СкидкаНаценкаСумма%", Формат(СкидкаСумма, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
		
		ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Скидка%", " " + ЗаписьСкидкаНаценка);
	Иначе
		ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Скидка%", "");
	КонецЕсли;
	
	СтрокаТЧ.ТоварыЗаписьПоСтроке = ЗаписьПоСтроке;
	
	СтрокаТЧ.СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНДССтрокиЧека(СтрокаЧека)
	
	Если Объект.ЦенаВключаетНДС Тогда
		ПроцентНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаЧека.СтавкаНДС);
		СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаЧека.Сумма, ПроцентНДС);
	КонецЕсли;
	
	СтрокаЧека.СуммаНДС  = СуммаНДС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуЧека(ИдентификаторСтроки, ДанныеНоменклатуры, ОчищатьСуществующиеМарки = Истина)
	
	СтрокаЧека = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Номенклатура = ДанныеНоменклатуры.Номенклатура;
	
	СтрокаЧека.Номенклатура = Номенклатура;
	ЗаполнитьЗначенияСвойств(СтрокаЧека, Номенклатура, "СтавкаНДС, Цена");
	
	Если Объект.ЦенаВключаетНДС Тогда
		СтрокаЧека.СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавку_18_20(СтрокаЧека.СтавкаНДС);
	Иначе
		СтрокаЧека.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если НЕ ДанныеНоменклатуры.Цена = Неопределено Тогда
		СтрокаЧека.Цена = ДанныеНоменклатуры.Цена;
	КонецЕсли;
	
	Если ДанныеНоменклатуры.Количество = Неопределено Тогда
		
		СтрокаЧека.Количество = СтрокаЧека.Количество + 1;
	Иначе
		
		СтрокаЧека.Количество = СтрокаЧека.Количество + ДанныеНоменклатуры.Количество;
	КонецЕсли;
	
	СтрокаЧека.Сумма = СтрокаЧека.Цена * СтрокаЧека.Количество;
	
	РассчитатьНДССтрокиЧека(СтрокаЧека);
	
	ОбновитьЗаписьПоСтроке(СтрокаЧека);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписиПоСтрокамТЧ()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ОбновитьЗаписьПоСтроке(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыСтроки()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	СтруктураПараметров.Вставить("НомерСтроки",         ТекущиеДанные.НомерСтроки);
	СтруктураПараметров.Вставить("Номенклатура",        ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Количество",          ТекущиеДанные.Количество);
	СтруктураПараметров.Вставить("Цена",                ТекущиеДанные.Цена);
	СтруктураПараметров.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	СтруктураПараметров.Вставить("Сумма",               ТекущиеДанные.Сумма);
	СтруктураПараметров.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	СтруктураПараметров.Вставить("СкидкаНаценкаПроцент",ТекущиеДанные.СкидкаНаценкаПроцент);
	СтруктураПараметров.Вставить("СкидкаНаценкаСумма",  ТекущиеДанные.СкидкаНаценкаСумма);
	
	СтруктураПараметров.Вставить("ЭтоЗаказ",             Истина);
	
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",     Объект.ЦенаВключаетНДС);
	
	Если Объект.СтатусЗаказа    = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Выполнен")
		ИЛИ ТоварыТолькоПросмотр Тогда
		
		СтруктураПараметров.Вставить("ТолькоПросмотрФормы", Истина);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект, "Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, 
		"СканированиеШтрихкода", 
		"Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров()
		И НЕ ИспользуетсяАсинхронныйСканер
	);
	
	ОбщегоНазначения.УстановитьВысотуПоляНаименованиеТовара(ЭтотОбъект, "ТоварыНоменклатура");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаСкидкаНаценка",
		"Видимость",
		ИспользуютсяСкидкиНаценки
	);
	
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект);
	
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект, "ПоказатьКомандыРасчета");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступенНаборНомера()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Возврат СредстваТелефонии.ПоддерживаетсяНаборНомера();
		
	#Иначе
		
		Возврат Истина;
		
	#КонецЕсли
	
КонецФункции

&НаСервере
Процедура УстановитьНовыйНомер()
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	ЗаказОбъект.УстановитьНовыйНомер();
	ЗначениеВРеквизитФормы(ЗаказОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовСинхронизация()
	
	Если Объект.ЗагруженПриОбмене Тогда
		
		СписокЭлементовСведенияТолькоПросмотр = "СтатусЗаказа, ФИО, Телефон, АдресЭлектроннойПочты, ЖелаемаяДатаПокупки, НомерЗаказа, Дата";
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			СписокЭлементовСведенияТолькоПросмотр,
			"ТолькоПросмотр",
			Истина
		);
		
		УстановитьТолькоПросмотрТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДокументПолностьюОплачен()
	
	СуммаДокумента = СуммаДокумента();
	
	ПолностьюОплаченБезОтгрузки =
		ПереданоТоваровСумма = 0
		И Оплачено >= СуммаДокумента
		И НЕ Оплачено = 0
		И СуммаДокумента > 0;
	
	ПолностьюОплаченОтгрузка =
		НЕ ПереданоТоваровСумма = 0
		И Оплачено >= ПереданоТоваровСумма
		И НЕ Оплачено = 0;
	
	Возврат ПолностьюОплаченБезОтгрузки ИЛИ ПолностьюОплаченОтгрузка;
	
КонецФункции

&НаСервере
Функция СуммаДокумента()
	
	СуммаКОплате = Объект.Товары.Итог("Сумма");
	
	Возврат СуммаКОплате;
	
КонецФункции

&НаСервере
Процедура ТоварыПриИзменении()
	
	УстановитьДоступностьКомандРасчета();
	
КонецПроцедуры

&НаСервере
Функция ЭтоЧекПоТекущемуЗаказу(ЧекСсылка)
	
	Возврат ЧекСсылка.ЗаказКлиента = Объект.Ссылка;
	
КонецФункции

&НаСервере
Функция ПроверкаВводаАвансНаНДС20()
	
	РасчетнаяСтавкаНДСВозврата = Документы.ЗаказКлиента.ПолучитьРасчетнуюСтавкуНДСВозвратаАвансаЧислом(Объект.Ссылка);
	
	РасчетнаяСтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьРасчетнуюСтавкуНДСАвансаЧислом();
	
	Если НЕ РасчетнаяСтавкаНДСВозврата = РасчетнаяСтавкаНДС Тогда
		
		ТекстСообщения = НСтр("ru = 'По текущему заказу была принята предоплата по ставке НДС 18/118.
			|Для получения предоплаты по ставке НДС 20/120 необходимо оформить новый заказ.'");;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
	ГоризонтальнаяОриентацияЭкрана = ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана;
	
	СписокПолей = "СтатусЗаказа, ФИО, Телефон, АдресЭлектроннойПочты, ЖелаемаяДатаПокупки, АдресДоставки, НомерЗаказа, Дата";
	
	Если ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			СписокПолей,
			"ПоложениеЗаголовка",
			ПоложениеЗаголовкаЭлементаФормы.Лево
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			СписокПолей,
			"ГоризонтальноеПоложение",
			ГоризонтальноеПоложениеЭлемента.Право
		);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			СписокПолей,
			"ПоложениеЗаголовка",
			ПоложениеЗаголовкаЭлементаФормы.Верх
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			СписокПолей,
			"ГоризонтальноеПоложение",
			ГоризонтальноеПоложениеЭлемента.Лево
		);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



