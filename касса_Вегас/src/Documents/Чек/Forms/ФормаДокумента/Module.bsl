&НаКлиенте
Перем ИмяФормыОплаты;

#Область ПрограммныйИнтерфейс

&НаСервере
Функция АдресМарокЧекаВХранилище() Экспорт
	
	МассивМарок = Новый Массив;
	
	Для Каждого Марка Из Объект.Марки Цикл
		
		СтруктураМарки = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруМарки();
		
		ЗаполнитьЗначенияСвойств(СтруктураМарки, Марка,
			"КодМаркировки, ТипМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер"
		);
		
		МассивМарок.Добавить(СтруктураМарки);
	КонецЦикла;
	
	АдресМарок = ПоместитьВоВременноеХранилище(МассивМарок, УникальныйИдентификатор);
	
	Возврат ПоместитьВоВременноеХранилище(МассивМарок, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ДанныеОплатыПоПлатежнойКарте() Экспорт
	
	Если Объект.Оплаты.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьДанныеОплатыПоПлатежнойКарте();
	
КонецФункции

&НаКлиенте
Процедура ПослеПолучениеРезультатаПоПлатежнойСистеме(Сумма, ВидОплаты, РезультатОперацииПоПлатежнойСистеме) Экспорт
	
	Если НЕ РезультатОперацииПоПлатежнойСистеме.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьЧек();
	КонецЕсли;
	
	Если РезультатОперацииПоПлатежнойСистеме.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.Оплата")
		ИЛИ РезультатОперацииПоПлатежнойСистеме.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.ВозвратОплаты") Тогда
		
		КлючСвязи = ДобавитьОплатуПоПлатежнойКарте(Сумма, ВидОплаты);
		ДобавитьОперациюПоПлатежнойСистеме(РезультатОперацииПоПлатежнойСистеме, КлючСвязи);
		
		Оповестить("ЗаписанЧек", Объект.Ссылка);
		
	ИначеЕсли РезультатОперацииПоПлатежнойСистеме.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.ОтменаОплаты") Тогда
		
		ДобавитьОперациюПоПлатежнойСистеме(РезультатОперацииПоПлатежнойСистеме);
		
		КлючСвязи = ОпределитьКлючСвязиОплаты(РезультатОперацииПоПлатежнойСистеме.НомерСсылкиОперации);
		УдалитьОплатуПоПлатежнойКарте(КлючСвязи);
		
	КонецЕсли;
	
	ЗаполнитьИнформациюОбОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры) Экспорт
	
	ВводитьАкцизныеМарки = Ложь;
	Если ДополнительныеПараметры.Свойство("ВозвратТоваров") И ДополнительныеПараметры.ВозвратТоваров Тогда
		ВводитьАкцизныеМарки = Истина;
		ДополнительныеПараметры.Вставить("ЧекПродажи", Объект.Ссылка);
	КонецЕсли;
	
	ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(ДанныеНоменклатуры, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВозвратТоваров")
		И ДополнительныеПараметры.ВозвратТоваров Тогда
		
		Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
			
			МассивНоменклатуры = Новый Массив;
			МассивНоменклатуры.Добавить(ДанныеНоменклатуры);
			
			ЧекПродажи = ПродажиВызовСервера.ПолучитьЧекПередачиТоваровПоЗаказу(Объект.Ссылка);
			
			ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
			ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
			
			ПараметрыЧека.Основание.ЧекПродажи = Объект.Ссылка;
			ПараметрыЧека.Основание.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
			ПараметрыЧека.Основание.ЭтоВозврат = Истина;
			
			ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = МассивНоменклатуры;
			ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
			
			ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
			
		Иначе
			
			ПулТоваровВозврата.Добавить(ДанныеНоменклатуры);
			
			Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
				ДополнительныеПараметры.ВременноеЗакрытиеДиалога = Ложь;
				ОткрытьДиалогВводаШтрихкода();
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
			
			ИдентификаторСтроки = ОпределитьСтрокуЧека(ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.Цена);
		Иначе
			Попытка
				ИдентификаторСтроки = ОпределитьСтрокуЧекаВозврат(ДанныеНоменклатуры.Номенклатура, ДанныеНоменклатуры.Цена);
			Исключение
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ИспользуетсяЕГАИС И ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки Тогда
			
			ЗакрытьДиалогВводаШтрихкода();
			ВвестиАкцизныеМарки(ИдентификаторСтроки, ДанныеНоменклатуры);
			
		Иначе
			
			ЗаполнитьСтрокуЧекаПоВидуОперации(ИдентификаторСтроки, ДанныеНоменклатуры, Ложь);
			Модифицированность = Истина;
			ПодсветитьСтроку(ИдентификаторСтроки);
			
			Если ИспользуютсяСкидкиНаценки Тогда
				РассчитатьСкидкуНаценкуПоДокументу();
				ОбновитьОтображениеСкидкиНаДокумент();
			КонецЕсли;
		
		КонецЕсли;
		
		ПриИзмененииТоваров();
		ОткрытьДиалогВводаШтрихкода();
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ВозвратТоваров") И ДополнительныеПараметры.ВозвратТоваров И ПулТоваровВозврата.Количество() > 0 Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		
		ПараметрыЧека.Основание.ЧекПродажи = Объект.Ссылка;
		ПараметрыЧека.Основание.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		ПараметрыЧека.Основание.ЭтоВозврат = Истина;
		
		ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
		ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = ПулТоваровВозврата.ВыгрузитьЗначения();
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
		ПулТоваровВозврата.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьКонстантыФормы();
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		ДоступныеСуммы = Продажи.ОпределитьДоступныеСуммыВозвратаОплаты(Объект.ЗаказКлиента, Объект.ЧекПродажи);
		
		ДоступнаяСуммаВозвратаНаличные = ДоступныеСуммы.Наличные;
		ДоступнаяСуммаВозвратаПлатежнаяКарта = ДоступныеСуммы.ПлатежнаяКарта;
		
		ЗаполнитьБуферВозвратаТоваров();
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыФормы") Тогда
		ЗаполнитьЧекПоКонструктору(Параметры.ПараметрыФормы);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Параметры.Свойство("Основание") Тогда
		
		Если Объект.ЭтоЧекКоррекции И ЗначениеЗаполнено(Объект.ЧекОснование) Тогда
			ОснованиеФискальныйПризнак = Параметры.Основание.ФискальныйПризнак;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	НастроитьОформлениеПолей();
	
	ОбновитьЗаписиПоСтрокамТЧ();
	
	СформироватьЗаголовокЧека();
	НастроитьГруппуОплаты();
	
	// скидка на чек
	РассчитатьСкидкуНаценкуПоДокументу();
	ОбновитьОтображениеСкидкиНаДокумент();
	
	ОпределитьЧекКоррекции();
	
	НастроитьВидимостьЭлементовФормы();
	
	ЗаполнитьИнформациюОбОплате();
	
	НастроитьОтображенияЧековВозврата();
	
	УстановитьДоступностьОплаты();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПроверитьСтавкуНДС();
	КонецЕсли;
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяФормыОплаты = "Документ.Чек.Форма.Оплата";
	
	ОткрытьДиалогВводаШтрихкода();
	
	СформироватьПредставлениеКоординат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		ИнициализироватьКонстантыФормы();
		НастроитьФормуПоЗначениямНастроек();
		НастроитьВидимостьЭлементовФормы();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанЧек" Тогда
		
		Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
			НастроитьОтображенияЧековВозврата();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		Если НЕ ТоварыТолькоПросмотр Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
			ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗакрытьСозданиеЧекаКоррекции" Тогда
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.Чек") И Объект.Ссылка = Параметр Тогда
			
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтроки = ПолучитьПараметрыСтроки();
	
	Если НЕ ПараметрыСтроки = Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ПараметрыСтроки.ИдентификаторСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеИзменитьСтроку", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.РедактированиеСтроки", ПараметрыСтроки, ЭтотОбъект,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТоварыВыбор(Элемент,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГоризонтПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКлиентаГоризонтНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗаказКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказКлиентаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗаказКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекПродажиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЧекПродажи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекПродажиГоризонтНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЧекПродажи();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиНаценкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СуммаБезСкидки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СкидкаНаценкаПроцент",  СкидкаНаценкаНаЧекПроцент);
	ПараметрыФормы.Вставить("СкидкаНаценкаСумма",    СкидкаНаценкаНаЧекСумма);
	ПараметрыФормы.Вставить("СуммаБезСкидкиНаценки", СуммаБезСкидки);
	ПараметрыФормы.Вставить("ЗаголовокДокумента",    НСтр("ru = 'чек'"));
	ПараметрыФормы.Вставить("ТолькоПросмотрФормы",   ТолькоПросмотрФормы()
		ИЛИ Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат()
	);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииСкидкиНаЧекЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеСкидки", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекВозвратаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЧекВозврата();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекВозвратаГоризонтНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЧекВозврата();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отложить(Команда)
	
	Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Отложен");
	
	ЗаписатьЧек();
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Наличные(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьЧек();
	КонецЕсли;
	
	Если НЕ ПроверитьКассовуюСмену() Тогда
		
		ТекстСообщения = НСтр("ru = 'Смена открыта более 24 часов.
			|Для пробития необходимо закрыть смену.'");
		ПоказатьПредупреждение( ,ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОплаты = СтруктураПараметровДляПечатиЧека();
	ПараметрыОплаты.Вставить("ФормаОплаты", "Наличные");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыОплаты, ПараметрыОплаты, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяКарта(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьЧек();
	КонецЕсли;
	
	Если НЕ ПроверитьКассовуюСмену() Тогда
		
		ТекстСообщения = НСтр("ru = 'Смена открыта более 24 часов.
			|Для пробития необходимо закрыть смену.'");
		ПоказатьПредупреждение( ,ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОплаты = СтруктураПараметровДляПечатиЧека();
	ПараметрыОплаты.Вставить("ФормаОплаты", "ПлатежнаяКарта");
	
	Если ПродажиВызовСервераПовтИсп.КоличествоВидовОплаты() > 1
		И НЕ Объект.ЭтоЧекКоррекции
		И (ПараметрыОплаты.ДанныеОплатыПоПлатежнойКарте = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОплаты.ДанныеОплатыПоПлатежнойКарте.ВидОплаты))
		Тогда
		
		ОткрытьФормуВыбораВидаОплаты(ПараметрыОплаты);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыОплаты, ПараметрыОплаты, ЭтотОбъект,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплата(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьЧек();
	КонецЕсли;
	
	Если НЕ ПроверитьКассовуюСмену() Тогда
		
		ТекстСообщения = НСтр("ru = 'Смена открыта более 24 часов.
			|Для пробития необходимо закрыть смену.'");
		ПоказатьПредупреждение( ,ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОплаты = СтруктураПараметровДляПечатиЧека();
	ПараметрыОплаты.Вставить("ФормаОплаты", "СмешаннаяОплата");
	
	Если НЕ Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат()
		И ПродажиВызовСервераПовтИсп.КоличествоВидовОплаты() > 1 
		И НЕ Объект.ЭтоЧекКоррекции
		И (ПараметрыОплаты.ДанныеОплатыПоПлатежнойКарте = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОплаты.ДанныеОплатыПоПлатежнойКарте.ВидОплаты)) Тогда
		
		ОткрытьФормуВыбораВидаОплаты(ПараметрыОплаты);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыОплаты, ПараметрыОплаты, ЭтотОбъект,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьБезОплаты(Команда)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаписатьЧек();
	КонецЕсли;
	
	Если НЕ ПроверитьКассовуюСмену() Тогда
		
		ТекстСообщения = НСтр("ru = 'Смена открыта более 24 часов.
			|Для пробития необходимо закрыть смену.'");
		ПоказатьПредупреждение( ,ТекстСообщения);
		
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыОплаты = СтруктураПараметровДляПечатиЧека();
	
	Если Объект.ПризнакСпособаРасчета =
		ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		
		ПараметрыОплаты.ОбщиеПараметры.ПризнакСпособаРасчета =
			ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты");
		
	КонецЕсли;
	
	ПараметрыОплаты.Вставить("ФормаОплаты", "БезОплаты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыОплаты, ПараметрыОплаты, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратЧека(Команда)
	
	ПулТоваровВозврата.Очистить();
	
	ОповещениеВозвратТоваров = Новый ОписаниеОповещения("ОповещениеВозвратТоваров", ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
		ПродажиКлиент.НачатьФормированиеЧекаВозвратаТоваров(
			ЭтотОбъект, Объект.ЗаказКлиента, ОповещениеВозвратТоваров
		);
	Иначе
		ПродажиКлиент.НачатьФормированиеЧекаВозвратаТоваров(
			ЭтотОбъект, Объект.Ссылка, ОповещениеВозвратТоваров
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	ИдетПроцессСканирования = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	Если ЗначениеЗаполнено(Объект.СтатусОплаты) Тогда
		ТекстСообщения = НСтр("ru = 'Чек %СтатусОплаты%.
								|Аннулирование невозможно.'"
		);
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусОплаты%", Объект.СтатусОплаты);
		
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Аннулировать чек?'");
	
	Оповещение = Новый ОписаниеОповещения("АннулироватьЧекПродолжение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,," ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваров(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПодборТоваров", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		ПараметрыФормы.Вставить("Режим", "ПодборВВозврат");
		ПараметрыФормы.Вставить("ЧекПродажи", Объект.ЧекПродажи);
		ПараметрыФормы.Вставить("ЧекВозврата", Неопределено);
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьТоварыВоВременноеХранилище());
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрыФормы.Вставить("ЧекВозврата", Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЭтоЧекКоррекции", Объект.ЭтоЧекКоррекции);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрочиеДанные(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Чек", Объект.Ссылка);
	
	ОткрытьФорму("Документ.Чек.Форма.ПрочиеДанные", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКоординатыНаКарте(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КоординатыДолгота) И НЕ ЗначениеЗаполнено(Объект.КоординатыШирота) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = НСтр("ru = 'Координаты не определены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если ЗначениеЗаполнено(Объект.КоординатыДолгота) И ЗначениеЗаполнено(Объект.КоординатыШирота) Тогда
			
			ГеоКоординаты = Новый ГеографическиеКоординаты(Объект.КоординатыШирота, Объект.КоординатыДолгота);
			
			ПоказатьНаКарте(ГеоКоординаты);
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьАдрес(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Объект.ПредставлениеАдресаМестоположения = ГеолокацияКлиент.ПолучитьПредставлениеАдресаМестоположения(, Объект.КоординатыШирота, Объект.КоординатыДолгота);
		СформироватьПредставлениеКоординат();
		
		Если ЗначениеЗаполнено(Объект.ПредставлениеАдресаМестоположения) Тогда
			ЗаписатьЧек();
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдрес(Команда)
	
	ОткрытьДиалогВводаАдреса(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОперацииПлатежнойСистемы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаНаЧек", Объект.Ссылка);
	
	ОткрытьФорму("Документ.Чек.Форма.ОперацииПлатежнойСистемы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЧековВозврата(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЧекПродажи", Объект.Ссылка);
	
	ОткрытьФорму("Документ.Чек.Форма.СписокЧековВозврата", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПречек(Команда)
	
	Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Отложен");
	ЗаписатьЧек(Истина);
	
	НастроитьВидимостьЭлементовФормы();
	
	ПараметрыПечати = СтруктураПараметровДляПечатиЧека();
	
	ПродажиКлиент.РаспечататьПречек(ПараметрыПечати, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КОплате(Команда)
	
	Элементы.СтраницыПролистывания.ТекущаяСтраница = Элементы.СтраницаОплата;
	
КонецПроцедуры

&НаКлиенте
Процедура КТоварам(Команда)
	
	Элементы.СтраницыПролистывания.ТекущаяСтраница = Элементы.СтраницаТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекКоррекции(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.СозданиеЧекаКоррекции.Форма.СозданиеЧекаКоррекции",
		ПараметрыФормы, ЭтотОбъект
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОплатаПлатежнаяСистема

&НаСервере
Процедура ЗаполнитьЧекПоКонструктору(Параметры)
	
	Если Параметры.Свойство("СозданиеПослеСканирования") И Параметры.СозданиеПослеСканирования Тогда
		
		Для Каждого ДанныеНоменклатуры Из Параметры.МассивНоменклатуры Цикл
			
			Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
				
				ИдентификаторСтроки = ОпределитьСтрокуЧека(ДанныеНоменклатуры.Номенклатура);
			Иначе
				
				Попытка
					ИдентификаторСтроки = ОпределитьСтрокуЧекаВозврат(ДанныеНоменклатуры.Номенклатура);
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЕсли;
			
			ЗаполнитьСтрокуЧекаПоВидуОперации(ИдентификаторСтроки, ДанныеНоменклатуры);
		КонецЦикла;
		
		ИдетПроцессСканирования = Истина;
		РассчитатьСуммыДокумента();
		
	ИначеЕсли Параметры.Свойство("СозданиеИзПодбора") И Параметры.СозданиеИзПодбора Тогда
		
		ПодборТоваровСервер(Параметры.АдресВоВременномХранилище);
		РассчитатьСуммыДокумента();
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьКлючСвязиОплаты(НомерСсылкиОперации)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.Оплата"));
	ПараметрыОтбора.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	
	НайденныеСтроки = Объект.ОперацииПлатежнойСистемы.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестная ошибка. Отменяемая оплата не найдена.'");
	Иначе
		Возврат НайденныеСтроки[0].КлючСвязи;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДобавитьОплатуПоПлатежнойКарте(Сумма, ВидОплаты)
	
	НоваяОплата = Объект.Оплаты.Добавить();
	
	НоваяОплата.Сумма     = Сумма;
	НоваяОплата.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплаты.ПлатежнаяКарта");
	НоваяОплата.ВидОплаты = ВидОплаты;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.ОперацииПлатежнойСистемы, НоваяОплата, "КлючСвязи");
	
	Возврат НоваяОплата.КлючСвязи;
	
КонецФункции

&НаКлиенте
Процедура УдалитьОплатуПоПлатежнойКарте(КлючСвязи)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КлючСвязи", КлючСвязи);
	
	НайденныеСтроки =  Объект.Оплаты.НайтиСтроки(ПараметрыПоиска);
	
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда
		
		Индекс = Объект.Оплаты.Индекс(НайденныеСтроки[0]);
		Объект.Оплаты.Удалить(Индекс);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестная ошибка. Отменяемая оплата не найдена.'");
	КонецЕсли;
	
	ЗаписатьЧек();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОплатыПоПлатежнойКарте()
	
	Возврат Документы.Чек.ДанныеОплатыПоПлатежнойКарте(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ДобавитьОперациюПоПлатежнойСистеме(РезультатОперации, КлючСвязи = 0)
	
	ЧекОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Чек"));
	
	НоваяОперация = ЧекОбъект.ОперацииПлатежнойСистемы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяОперация, РезультатОперации, "ВидОперации, КодАвторизации, НомерКарты, НомерСсылкиОперации, ДатаОперации");
	НоваяОперация.СлипЧек = Новый ХранилищеЗначения(РезультатОперации.СлипЧек, Новый СжатиеДанных(9));
	НоваяОперация.КлючСвязи = КлючСвязи;
	
	ЧекОбъект.Записать();
	ЭтотОбъект.Прочитать();
КонецПроцедуры

#КонецОбласти

#Область СканированиеШтрихкода

&НаКлиенте
Процедура ОткрытьДиалогВводаШтрихкода(ДляЛюбогоТипаСканера = Ложь)
	
	Если ДляЛюбогоТипаСканера Тогда
		
		Если ИдетПроцессСканирования И НЕ ИдетВводАкцизныхМарок Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьШтрихкод", 0.1, Истина);
		КонецЕсли;
		
	Иначе
		
		Если ИдетПроцессСканирования И ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() И НЕ ИдетВводАкцизныхМарок Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьШтрихкод", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьДиалогВводаШтрихкода()
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВстроеннойКамерой() Тогда
		
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьШтрихкод()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область АкцизныеМарки

&НаКлиенте
Процедура ВвестиАкцизныеМарки(ИдентификаторСтроки, ДанныеНоменклатуры)
	
	СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ПараметрыВводаМарки = ИнтеграцияЕГАИСМККлиент.ПараметрыВводаАкцизнойМарки();
	
	ПараметрыВводаМарки.Номенклатура             = ДанныеНоменклатуры.Номенклатура;
	ПараметрыВводаМарки.АдресМарокВХранилище     = АдресМарокВХранилище(СтрокаТоваров.КлючСвязи);
	ПараметрыВводаМарки.ОбъектОповещения         = ЭтотОбъект;
	ПараметрыВводаМарки.ИмяПроцедурыОповещения   = "ВводАкцизныхМарокЗавершение";
	ПараметрыВводаМарки.АдресМарокЧекаВХранилище = АдресМарокЧекаВХранилище();
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		ДанныеТовараКВозврату = ПродажиВызовСервера.ПолучитьДанныеПоТоваруКВозврату(Объект.ЧекПродажи, Объект.Ссылка,
																		ДанныеНоменклатуры.Номенклатура, СтрокаТоваров.ЦенаСУчетомСкидки);
			
		ПараметрыВводаМарки.МаксимальноеКоличество = ДанныеТовараКВозврату.МаксимальноеКоличествоКВозврату;
		
	КонецЕсли;
	
	ИдетВводАкцизныхМарок = Истина;
	ИнтеграцияЕГАИСМККлиент.ВвестиАкцизнуюМарку(ПараметрыВводаМарки, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводАкцизныхМарокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдетВводАкцизныхМарок = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("АдресВХранилище") Тогда
			
			ДополнительныеПараметры.ДанныеНоменклатуры.Марки = Результат.АдресВХранилище;
			ЗаполнитьСтрокуЧекаПоВидуОперации(ДополнительныеПараметры.ИдентификаторСтроки, ДополнительныеПараметры.ДанныеНоменклатуры);
			ПриИзмененииТоваров();
		
		КонецЕсли;
	Иначе
		
		СтрокаЧека = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если НЕ ЗначениеЗаполнено(СтрокаЧека.Номенклатура) Тогда
			
			ИндексСтроки = Объект.Товары.Индекс(СтрокаЧека);
			Объект.Товары.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДляЛюбогоТипаСканера = Истина;
	ОткрытьДиалогВводаШтрихкода(ДляЛюбогоТипаСканера);
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект.Марки.НайтиСтроки(СтруктураОтбора);
	
	МассивМарок = Новый Массив;
	
	Для Каждого Марка Из СтрокиМарок Цикл
		
		СтруктураМарки = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруМарки();
		
		ЗаполнитьЗначенияСвойств(СтруктураМарки, Марка,
			"КодМаркировки, ТипМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер"
		);
		
		МассивМарок.Добавить(СтруктураМарки);
	КонецЦикла;
	
	АдресМарок = ПоместитьВоВременноеХранилище(МассивМарок, УникальныйИдентификатор);
	
	Возврат АдресМарок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьАкцизныеМаркиПоКлючуСвязи(АкцизныеМарки, КлючСвязи)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", КлючСвязи);
	
	НайденныеАкцизныеМарки = АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаАкцизнаяМарка Из НайденныеАкцизныеМарки Цикл
		АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоМарокПоКлючуСвязи(Марки, КлючСвязи)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", КлючСвязи);
	
	НайденныеМарки = Марки.НайтиСтроки(СтруктураПоиска);
	
	Возврат НайденныеМарки.Количество();
	
КонецФункции

#КонецОбласти

#Область СкидкаНаДокумент

&НаСервере
Процедура РассчитатьСкидкуНаценкуПоДокументу()
	
	Если НЕ ИспользуютсяСкидкиНаценки Тогда
		Возврат;
	КонецЕсли;
	
	СкидкаНаценкаНаЧекСумма = Объект.Товары.Итог("СкидкаНаценкаСумма");
	
	СуммаБезСкидки = Объект.Товары.Итог("СуммаБезСкидки");
	
	Если НЕ СуммаБезСкидки = 0 Тогда
		СкидкаНаценкаНаЧекПроцент = СкидкаНаценкаНаЧекСумма * 100 / СуммаБезСкидки;
	Иначе
		СкидкаНаценкаНаЧекПроцент = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСкидкиНаДокумент()
	
	Если НЕ ИспользуютсяСкидкиНаценки Тогда
		Возврат;
	КонецЕсли;
	
	Если СкидкаНаценкаНаЧекСумма <= 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СуммаСкидкиНаценки, СуммаСкидкиНаценкиГоризонт", "Заголовок",
			НСтр("ru = 'Скидка'")
		);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СуммаСкидкиНаценки, СуммаСкидкиНаценкиГоризонт", "Заголовок",
			НСтр("ru = 'Наценка'")
		);
		
	КонецЕсли;
	
	ШаблонЗначенияСкидки = НСтр("ru = '(%2%) %1'");
	
	СуммаСкидкиНаценки = ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗначенияСкидки,
		Формат(?(СкидкаНаценкаНаЧекСумма < 0,   - СкидкаНаценкаНаЧекСумма,   СкидкаНаценкаНаЧекСумма), ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()),
		Формат(?(СкидкаНаценкаНаЧекПроцент < 0, - СкидкаНаценкаНаЧекПроцент, СкидкаНаценкаНаЧекПроцент), ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей())
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСкидкиНаЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СкидкаНаценкаНаЧекСумма   = Результат.СкидкаНаценкаСумма;
	СкидкаНаценкаНаЧекПроцент = Результат.СкидкаНаценкаПроцент;
	
	НазначитьСкидкуНаЧек();
	
	ПриИзмененииТоваров();
КонецПроцедуры

&НаСервере
Процедура НазначитьСкидкуНаЧек()
	
	ОбновитьОтображениеСкидкиНаДокумент();
	
	Продажи.НазначитьСкидкуНаДокумент(Объект, "Товары", СкидкаНаценкаНаЧекСумма);
	
	Для Каждого СтрокаЧека Из Объект.Товары Цикл
		РассчитатьНДССтрокиЧека(СтрокаЧека, Объект.ЦенаВключаетНДС);
	КонецЦикла;
	
	ОбновитьЗаписиПоСтрокамТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратТоваров

&НаКлиенте
Процедура ОповещениеВозвратТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображенияЧековВозврата()
	
	ЧекиВозврата = Документы.Чек.ПолучитьЧекиВозврата(Объект.Ссылка);
	
	Если ЧекиВозврата.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаЧекиВозврата, ГруппаЧекиВозвратаГоризонт",
			"Видимость",
			Ложь
		);
		
	ИначеЕсли ЧекиВозврата.Количество() = 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаЧекиВозврата, ГруппаЧекиВозвратаГоризонт, ЧекВозврата, ЧекВозвратаГоризонт",
			"Видимость",
			Истина
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ОткрытьСписокЧековВозврата, ОткрытьСписокЧековВозвратаГоризонт",
			"Видимость",
			Ложь
		);
		
		ЧекВозврата = ЧекиВозврата[0];
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаЧекиВозврата, ГруппаЧекиВозвратаГоризонт, ОткрытьСписокЧековВозврата, ОткрытьСписокЧековВозвратаГоризонт",
			"Видимость",
			Истина
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ЧекВозврата, ЧекВозвратаГоризонт",
			"Видимость",
			Ложь
		);
		
		ЗаголовокКнопки = НСтр("ru = 'Чеки возврата (%1)'");
		ЗаголовокКнопки = ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКнопки, ЧекиВозврата.Количество());
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ОткрытьСписокЧековВозврата, ОткрытьСписокЧековВозвратаГоризонт",
			"Заголовок",
			ЗаголовокКнопки
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЧекКоррекции()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЭтотЧекПробит() Тогда
		ЧекКоррекции = Документы.Чек.ПолучитьЧекКоррекции(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуЧекаВозврат(ИдентификаторСтроки, ДанныеНоменклатуры, ОчищатьСуществующиеМарки = Истина)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
	
	Если Не ДанныеНоменклатуры.Цена = Неопределено Тогда
		
		ПараметрыПоиска.Вставить("ЦенаСУчетомСкидки", ДанныеНоменклатуры.Цена);
	КонецЕсли;
	
	НайденныеСтрокиБуфер = БуферВозвратаТоваров.НайтиСтроки(ПараметрыПоиска);
	
	Количество = ?(ДанныеНоменклатуры.Количество = Неопределено, 1, ДанныеНоменклатуры.Количество);
	
	Для Каждого СтрокаБуфера Из НайденныеСтрокиБуфер Цикл
		
		Если Количество <=0 Тогда
			Прервать;
		КонецЕсли;
		
		РазрешеноДобавить = СтрокаБуфера.Количество - СтрокаБуфера.КоличествоВозврат;
		
		Если НЕ РазрешеноДобавить > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоДобавления = Мин(Количество, РазрешеноДобавить);
		
		ОбработатьСтрокуВозврат(ИдентификаторСтроки, ДанныеНоменклатуры, КоличествоДобавления, СтрокаБуфера, ОчищатьСуществующиеМарки);
		Количество = Количество - КоличествоДобавления;
		
		СтрокаБуфера.КоличествоВозврат = СтрокаБуфера.КоличествоВозврат + КоличествоДобавления;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБуферВозвратаТоваров()
	
	БуферВозвратаТоваров.Очистить();
	
	ТаблицаТоваровДляВозврата = Продажи.ПолучитьТаблицуТоваровЧекаВозврата(Объект.ЧекПродажи,, Объект.Ссылка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваровДляВозврата Цикл
		
		СтрокаБуфера = БуферВозвратаТоваров.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаБуфера, СтрокаТаблицы);
		
		Если СтрокаТаблицы.ЕстьСкидка Тогда
			
			СтрокаБуфера.ЦенаСУчетомСкидки = ?(СтрокаТаблицы.Количество = 0, 0, Окр(СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество, 2));
		Иначе
			
			СтрокаБуфера.ЦенаСУчетомСкидки = СтрокаТаблицы.Цена;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьБуферВозвратов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьБуферВозвратов()
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		ОбновитьСтрокуБуфера(СтрокаТоваров);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуБуфера(СтруктураСтроки)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура", СтруктураСтроки.Номенклатура);
	ПараметрыПоиска.Вставить("Цена",         СтруктураСтроки.Цена);
	
	НайденныеСтроки = БуферВозвратаТоваров.НайтиСтроки(ПараметрыПоиска);
	
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаБуфера = НайденныеСтроки[0];
		СтрокаБуфера.КоличествоВозврат = СтруктураСтроки.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Геолокация

&НаКлиенте
Функция ОпределитьКоординатыПробития()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяГеолокация() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеМестоположения = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ДанныеМестоположения = ГеолокацияКлиент.ПолучитьМестоположение();
		
	#КонецЕсли
	
		
	Если НЕ ДанныеМестоположения = Неопределено Тогда
		
		ГеоКоординаты = ГеолокацияКлиент.ПолучитьКоординатыПоМестоположению(ДанныеМестоположения);
		
		Объект.КоординатыДолгота = ГеоКоординаты.Долгота;
		Объект.КоординатыШирота  = ГеоКоординаты.Широта;
		
		Объект.ПредставлениеАдресаМестоположения = ГеолокацияКлиент.ПолучитьПредставлениеАдресаМестоположения(, Объект.КоординатыШирота, Объект.КоординатыДолгота);
		
		ЗаписатьЧек();
		Возврат Истина;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.АдресРасчета) Тогда
			Объект.ПредставлениеАдресаМестоположения = Объект.АдресРасчета;
			
			Возврат Истина;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ВвестиАдрес", НСтр("ru = 'Ввести адрес вручную'"));
		Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		
		Оповещение = Новый ОписаниеОповещения("ВопросВвестиАдрес", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Адрес расчета не определен'"), Кнопки,, "ВвестиАдрес");
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросВвестиАдрес(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = "ВвестиАдрес" Тогда
		ЭтотОбъект.Закрыть(КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	ОткрытьДиалогВводаАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВводаАдреса(ПробитиеЧека = Истина)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗакрытьФорму", ПробитиеЧека);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВводаАдресаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Подсказка = НСтр("ru = 'Адрес пробития чека'");
	
	ДлинаАдреса = 200;
	ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Объект.ПредставлениеАдресаМестоположения, Подсказка, ДлинаАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводаАдресаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Если НЕ Объект.ПредставлениеАдресаМестоположения = Результат Тогда
			
			Объект.ПредставлениеАдресаМестоположения = Результат;
			
			СформироватьПредставлениеКоординат();
			ЗаписатьЧек();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗакрытьФорму Тогда
		
		ЭтотОбъект.Закрыть(КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеКоординат()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяГеолокация() Тогда
		Возврат;
	КонецЕсли;
	
	// доступность команд
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОпределитьАдрес, ОпределитьАдресГоризонт", "Видимость", 
		НЕ ЗначениеЗаполнено(Объект.ПредставлениеАдресаМестоположения)
		И (ЗначениеЗаполнено(Объект.КоординатыШирота) И ЗначениеЗаполнено(Объект.КоординатыДолгота)));
	
	// доступность команд
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ИзменитьАдрес, ИзменитьАдресГоризонт", "Доступность",
		Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Пробит"));
	
	Местоположение = "";
	
	Если ЗначениеЗаполнено(Объект.ПредставлениеАдресаМестоположения) Тогда
		
		Местоположение = Объект.ПредставлениеАдресаМестоположения;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.КоординатыШирота) И ЗначениеЗаполнено(Объект.КоординатыДолгота) Тогда
		
		Местоположение = ГеолокацияКлиент.ПолучитьПредставлениеКоординатМестоположения(, 
			Объект.КоординатыШирота, Объект.КоординатыДолгота);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КнопкиОплаты

&НаСервере
Процедура ОпределитьДоступностьОплаты()
	
	ОплатаНаличныеДоступность 		  = Истина;
	ОплатаПлатежнаяКартаДоступность   = Истина;
	ОплатаСмешаннаяДоступность 		  = Истина;
	ОплатаПробитьБезОплатыДоступность = Истина;
	
	ОплатаНаличныеВидимость 		= ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяОплатаНаличными();
	ОплатаПлатежнаяКартаВидимость 	= ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяОплатаПлатежнымиКартами();
	ОплатаСмешаннаяВидимость 		= ОплатаНаличныеВидимость И ОплатаПлатежнаяКартаВидимость;
	
	ОплатаПробитьБезОплатыВидимость = Истина;
	
	Если ЭтотЧекПробит() ИЛИ Объект.СтатусЧека = Перечисления.СтатусыЧеков.Аннулирован Тогда
		УстановитьПризнакДоступностиФормыОплаты("Наличные, ПлатежнаяКарта, СмешаннаяОплата, ПробитьБезОплаты", Ложь);
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьПробитьБезОплаты();
	
	ЭтоАванс = Объект.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
	
	// проверка на сумму строки
	ПараметрыПоиска = Новый Структура("Сумма", 0);
	СтрокиСНулевойСуммой = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	ЕстьСтрокиСНулевойСуммой = НЕ СтрокиСНулевойСуммой.Количество() = 0;
	
	// проверка на заполнение товара
	ПараметрыПоиска = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтрокиБезТовара = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	ЕстьСтрокиБезТовара = НЕ СтрокиБезТовара.Количество() = 0;
	
	// проверка на заполнение штрихкода
	ПараметрыПоиска = Новый Структура("НеобходимостьШтрихкодаПриПродаже, Штрихкод", Истина, "");
	СтрокиБезШтрихкода = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	ЕстьСтрокиБезШтрихкода = НЕ СтрокиБезШтрихкода.Количество() = 0;
	
	ДоступностьОплатыПоУсловиямТоваров = НЕ ЕстьСтрокиСНулевойСуммой И НЕ ЕстьСтрокиБезШтрихкода И НЕ ЕстьСтрокиБезТовара;
	ДоступностьОплатыПоСуммеДокумента = Объект.СуммаДокумента > 0 ИЛИ ЭтоАванс;
	
	УстановитьПризнакДоступностиФормыОплаты("Наличные, ПлатежнаяКарта, СмешаннаяОплата, ПробитьБезОплаты", ,
		ДоступностьОплатыПоУсловиямТоваров И ДоступностьОплатыПоСуммеДокумента
	);
	
	ОпределитьДоступностьОплатыЧекаВозврата();
	
	// Полная предоплата
	Если ОплаченоПредоплата > 0
		И ОплаченоПредоплата >= Объект.СуммаДокумента
		И НЕ ЭтоАванс Тогда
		
		УстановитьПризнакДоступностиФормыОплаты("Наличные, ПлатежнаяКарта, СмешаннаяОплата", , Ложь);
		
	КонецЕсли;
	
	// доступность команд оплаты по состоянию оплаты картой
	Если ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяОплатаПлатежнымиКартами() Тогда
		
		Если ЗначениеЗаполнено(Объект.СтатусОплаты) Тогда
			УстановитьПризнакДоступностиФормыОплаты("Наличные", Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СтатусОплаты) И ОплаченоПлатежнойКартой = Объект.СуммаДокумента Тогда
			УстановитьПризнакДоступностиФормыОплаты("СмешаннаяОплата", Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СтатусОплаты) И НЕ ОплаченоПлатежнойКартой = Объект.СуммаДокумента Тогда
			УстановитьПризнакДоступностиФормыОплаты("ПлатежнаяКарта", Ложь);
		КонецЕсли;
		
	Иначе
		УстановитьПризнакДоступностиФормыОплаты("ПлатежнаяКарта, СмешаннаяОплата", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьОплатыЧекаВозврата()
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ПризнакСпособаРасчета =
		ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		
		СуммаКВозврату = ВозвратДолгПередКлиентом;
		
		Если ДоступнаяСуммаВозвратаНаличные = 0 ИЛИ СуммаКВозврату > ДоступнаяСуммаВозвратаНаличные Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("Наличные", Ложь);
		КонецЕсли;
		
		Если ДоступнаяСуммаВозвратаПлатежнаяКарта = 0 ИЛИ СуммаКВозврату > ДоступнаяСуммаВозвратаПлатежнаяКарта Тогда
			УстановитьПризнакДоступностиФормыОплаты("ПлатежнаяКарта", Ложь);
		КонецЕсли;
		
		Если (ДоступнаяСуммаВозвратаНаличные = 0 ИЛИ ДоступнаяСуммаВозвратаПлатежнаяКарта = 0) Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("СмешаннаяОплата", Ложь);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Объект.ПризнакСпособаРасчета =
		ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда
		
		СуммаКВозврату = Объект.СуммаДокумента - ДолгКлиента;
		
		Если ДоступнаяСуммаВозвратаНаличные > 0
			И (НЕ ДоступнаяСуммаВозвратаНаличные >= СуммаКВозврату
			ИЛИ СуммаКВозврату <= 0) Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("Наличные", , Ложь);
		КонецЕсли;
		
		Если ДоступнаяСуммаВозвратаПлатежнаяКарта > 0 
			И (НЕ ДоступнаяСуммаВозвратаПлатежнаяКарта >= СуммаКВозврату ИЛИ СуммаКВозврату <= 0) Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("ПлатежнаяКарта", , Ложь);
		КонецЕсли;
		
		Если ДоступнаяСуммаВозвратаНаличные = 0 ИЛИ СуммаКВозврату <= 0 Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("Наличные", Ложь);
		КонецЕсли;
		
		Если ДоступнаяСуммаВозвратаПлатежнаяКарта = 0 ИЛИ СуммаКВозврату <= 0 Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("ПлатежнаяКарта", Ложь);
		КонецЕсли;
		
		Если (ДоступнаяСуммаВозвратаНаличные = 0 ИЛИ ДоступнаяСуммаВозвратаПлатежнаяКарта = 0)
			ИЛИ СуммаКВозврату <= 0 Тогда
			
			УстановитьПризнакДоступностиФормыОплаты("СмешаннаяОплата", Ложь);
		КонецЕсли;
		
		Если СуммаКВозврату > 0 Тогда
			УстановитьПризнакДоступностиФормыОплаты("ПробитьБезОплаты", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОплаты()
	
	ОпределитьДоступностьОплаты();
	
	ОплатаНаличныеВидимость = ОплатаНаличныеВидимость И ОплатаНаличныеДоступность;
	ОплатаПлатежнаяКартаВидимость = ОплатаПлатежнаяКартаВидимость И ОплатаПлатежнаяКартаДоступность;
	ОплатаСмешаннаяВидимость = ОплатаСмешаннаяВидимость И ОплатаСмешаннаяДоступность;
	ОплатаПробитьБезОплатыВидимость = ОплатаПробитьБезОплатыВидимость И ОплатаПробитьБезОплатыДоступность;
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаНаличные, КомандаНаличныеГоризонт", "Видимость",
		ОплатаНаличныеВидимость
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаНаличные, КомандаНаличныеГоризонт", "Доступность", ОплатаНаличныеДоступность
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаПлатежнаяКарта, КомандаПлатежнаяКартаГоризонт", "Видимость",
		ОплатаПлатежнаяКартаВидимость
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаПлатежнаяКарта, КомандаПлатежнаяКартаГоризонт", "Доступность",
		ОплатаПлатежнаяКартаДоступность
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаСмешаннаяОплата, КомандаСмешаннаяОплатаПодвал, КомандаСмешаннаяОплатаГоризонт, ГруппаСмешаннаяОплатаГоризонтДоп",
		"Видимость", ОплатаСмешаннаяВидимость
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаСмешаннаяОплата, КомандаСмешаннаяОплатаПодвал, КомандаСмешаннаяОплатаГоризонт, ГруппаСмешаннаяОплатаГоризонтДоп",
		"Доступность", ОплатаСмешаннаяДоступность
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаПробитьБезОплаты, КомандаПробитьБезОплатыПодвал, КомандаПробитьБезОплатыГоризонт, ГруппаПробитьБезОплатыГоризонтДоп",
		"Видимость", ОплатаПробитьБезОплатыВидимость
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект, "КомандаПробитьБезОплаты, КомандаПробитьБезОплатыПодвал, КомандаПробитьБезОплатыГоризонт, ГруппаПробитьБезОплатыГоризонтДоп",
		"Доступность", ОплатаПробитьБезОплатыДоступность
	);
	
	
	Если ОплатаНаличныеВидимость ИЛИ ОплатаПлатежнаяКартаВидимость Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"КомандаСмешаннаяОплатаПодвал, КомандаПробитьБезОплатыПодвал,
			|КомандаСмешаннаяОплатаГоризонт, КомандаПробитьБезОплатыГоризонт",
			"Видимость", Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект, "КомандаСмешаннаяОплатаПодвал, КомандаПробитьБезОплатыПодвал", "Видимость", Ложь
		);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"КомандаСмешаннаяОплата, КомандаПробитьБезОплаты, ГруппаСмешаннаяОплатаГоризонтДоп, ГруппаПробитьБезОплатыГоризонтДоп",
			"Видимость", Ложь
		);
		
	КонецЕсли;
	
	Если НЕ ОплатаНаличныеВидимость
		И НЕ ОплатаПлатежнаяКартаВидимость
		И НЕ ОплатаСмешаннаяВидимость
		И НЕ (ОплатаПробитьБезОплатыДоступность И ОплатаПробитьБезОплатыВидимость) Тогда
		
		Элементы.ЗаголовокОплаты.Видимость = Ложь;
		Элементы.ЗаголовокОплатыГоризонт.Видимость = Ложь;
	Иначе
		Элементы.ЗаголовокОплаты.Видимость = Истина;
		Элементы.ЗаголовокОплатыГоризонт.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ЗаголовокОплаты.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакДоступностиФормыОплаты(ФормыОплаты,
	ВидимостьОплаты = Неопределено, ДоступностьОплаты = Неопределено)
	
	МассивЭлементов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФормыОплаты,,,Истина);
	
	Для Каждого ФормаОплаты Из МассивЭлементов Цикл
	
		Если ФормаОплаты = "Наличные" Тогда
			
			Если НЕ ВидимостьОплаты = Неопределено Тогда
				ОплатаНаличныеВидимость = ОплатаНаличныеВидимость И ВидимостьОплаты;
			КонецЕсли;
			
			Если НЕ ДоступностьОплаты = Неопределено Тогда
				ОплатаНаличныеДоступность = ОплатаНаличныеДоступность И ДоступностьОплаты;
			КонецЕсли;
			
		ИначеЕсли ФормаОплаты = "ПлатежнаяКарта" Тогда
			
			Если НЕ ВидимостьОплаты = Неопределено Тогда
				ОплатаПлатежнаяКартаВидимость = ОплатаПлатежнаяКартаВидимость И ВидимостьОплаты;
			КонецЕсли;
			
			Если НЕ ДоступностьОплаты = Неопределено Тогда
				ОплатаПлатежнаяКартаДоступность = ОплатаПлатежнаяКартаДоступность И ДоступностьОплаты;
			КонецЕсли;
			
		ИначеЕсли ФормаОплаты = "СмешаннаяОплата" Тогда
			
			Если НЕ ВидимостьОплаты = Неопределено Тогда
				ОплатаСмешаннаяВидимость = ОплатаСмешаннаяВидимость И ВидимостьОплаты;
			КонецЕсли;
			
			Если НЕ ДоступностьОплаты = Неопределено Тогда
				ОплатаСмешаннаяДоступность = ОплатаСмешаннаяДоступность И ДоступностьОплаты;
			КонецЕсли;
			
		ИначеЕсли ФормаОплаты = "ПробитьБезОплаты" Тогда
			
			Если НЕ ВидимостьОплаты = Неопределено Тогда
				ОплатаПробитьБезОплатыВидимость = ОплатаПробитьБезОплатыВидимость И ВидимостьОплаты;
			КонецЕсли;
			
			Если НЕ ДоступностьОплаты = Неопределено Тогда
				ОплатаПробитьБезОплатыДоступность = ОплатаПробитьБезОплатыДоступность И ДоступностьОплаты;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПробитьБезОплаты()
	
	Если НЕ ИспользуютсяРасчетыСКлиентами И НЕ ОплаченоПредоплата > 0 Тогда
		УстановитьПризнакДоступностиФормыОплаты("ПробитьБезОплаты", Ложь);
		Возврат;
	КонецЕсли;
	
	Если НЕ (Объект.ПризнакСпособаРасчета
			= ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")
		ИЛИ Объект.ПризнакСпособаРасчета
			= ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой")
		ИЛИ Объект.ПризнакСпособаРасчета
			= ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты")) Тогда
		
		УстановитьПризнакДоступностиФормыОплаты("ПробитьБезОплаты", Ложь);
		
	КонецЕсли;
	
	Если НЕ ИспользуютсяРасчетыСКлиентами И НЕ ОплаченоПредоплата >= Объект.СуммаДокумента Тогда
		УстановитьПризнакДоступностиФормыОплаты("ПробитьБезОплаты", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуВыбораВидаОплаты(ПараметрыОплаты)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФормыОплаты",  ИмяФормыОплаты);
	ДополнительныеПараметры.Вставить("ПараметрыОплаты", ПараметрыОплаты);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВыборВидаОплаты", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ВидыОплаты.ФормаВыбора",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ТолькоПросмотрФормы()
	
	Если Объект.СтатусЧека    = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Пробит")
		ИЛИ Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Архивный")
		ИЛИ Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Аннулирован")
		ИЛИ Объект.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусыОплатыЧека.Оплачен")
		ИЛИ Объект.СтатусОплаты = ПредопределенноеЗначение("Перечисление.СтатусыОплатыЧека.ОплаченЧастично")
		ИЛИ ТоварыТолькоПросмотр Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКонстантыФормы()
	
	ИспользуетсяЕГАИС = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяЕГАИСПриПродаже();
	ИспользуютсяСкидкиНаценки = ЗначениеНастроекПовтИсп.ИспользуютсяСкидкиНаценки();
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	ИспользуютсяРасчетыСКлиентами = ЗначениеНастроекПовтИсп.ИспользуютсяРасчетыСКлиентами()
		И ЗначениеЗаполнено(Объект.ЗаказКлиента);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеПолей()
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект,
	"Сумма,
	|СуммаОплата, СуммаОплатаИнфо,
	|СуммаНДС,
	|СуммаОплатаГоризонт,
	|СуммаНДСГоризонт,
	|ОплаченоНаличными,
	|ОплаченоНаличнымиГоризонт,
	|ОплаченоПлатежнойКартой,
	|ОплаченоПлатежнойКартойГоризонт,
	|ОплаченоПолученоБезОплаты,
	|ОплаченоПолученоБезОплатыГоризонт,
	|ОплаченоПредоплата,
	|ОплаченоПредоплатаГоризонт,
	|ОплаченоВстречноеПредоставление,
	|ОплаченоВстречноеПредоставлениеГоризонт,
	|ВозвратДолгПередКлиентом,
	|ВозвратДолгПередКлиентомГоризонт
	|");
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект,
	"ОплаченоВидОплаты,
	|ОплаченоВидОплатыГоризонт,
	|НадписьБезПередачиТоваров,
	|НадписьБезПередачиТоваровГоризонт
	|");
	
	ОбщегоНазначения.УстановитьЦветИтоговыхПолей(ЭтотОбъект,
	"Сумма,
	|СуммаОплата, СуммаОплатаИнфо,
	|СуммаНДС,
	|СуммаГоризонт,
	|СуммаОплатаГоризонт,
	|СуммаНДСГоризонт
	|");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказКлиента()
	
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта",
		Новый Структура("Ключ", Объект.ЗаказКлиента),
		ЭтотОбъект
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧекПродажи()
	
	ПродажиКлиент.ОткрытьФормуЧека(Объект.ЧекПродажи, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧекВозврата()
	
	ПродажиКлиент.ОткрытьФормуЧека(ЧекВозврата, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКассовуюСмену()
	
	КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
	
	Если ЗначениеЗаполнено(КассоваяСмена) И
		Продажи.КассоваяСменаПросрочена(КассоваяСмена) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуЧекаПоВидуОперации(ИдентификаторСтроки, ДанныеНоменклатуры, ОчищатьСуществующиеМарки = Истина)
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		
		ЗаполнитьСтрокуЧека(ИдентификаторСтроки, ДанныеНоменклатуры, ОчищатьСуществующиеМарки);
	Иначе
		
		ЗаполнитьСтрокуЧекаВозврат(ИдентификаторСтроки, ДанныеНоменклатуры, ОчищатьСуществующиеМарки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьСтрокуЧека(Номенклатура, Цена = Неопределено)
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаЧека = Объект.Товары.Добавить();
		
	Иначе
		СтрокаЧека = Неопределено;
		
		// количество суммируется только если не введена скидка
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если Строка.СкидкаНаценкаСумма = 0 Тогда
				
				Если НЕ Цена = Неопределено Тогда
					Если НЕ Строка.Цена = Цена Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаЧека = Строка;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаЧека = Неопределено Тогда
			СтрокаЧека = Объект.Товары.Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаЧека.ПолучитьИдентификатор();
	
КонецФункции

&НаСервере
Функция ОпределитьСтрокуЧекаВозврат(Номенклатура, Цена = Неопределено)
	
	СтрокаЧекаВозврат = Неопределено;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура", Номенклатура);
	
	Если НЕ Цена = Неопределено Тогда
		ПараметрыПоиска.Вставить("ЦенаСУчетомСкидки", Цена);
	КонецЕсли;
	
	НайденныеСтрокиБуфер = БуферВозвратаТоваров.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого СтрокаБуфера Из НайденныеСтрокиБуфер Цикл
		
		РазрешеноДобавить = СтрокаБуфера.Количество - СтрокаБуфера.КоличествоВозврат;
		
		Если НЕ РазрешеноДобавить > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("Номенклатура, ЦенаСУчетомСкидки", Номенклатура, СтрокаБуфера.ЦенаСУчетомСкидки);
	
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаЧекаВозврат = Объект.Товары.Добавить();
		Иначе
			
			СтрокаЧекаВозврат = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаЧекаВозврат.ЦенаСУчетомСкидки = СтрокаБуфера.ЦенаСУчетомСкидки;
		
		Прервать;
		
	КонецЦикла;
	
	Если СтрокаЧекаВозврат = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Товар не доступен к возврату'");
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Возврат СтрокаЧекаВозврат.ПолучитьИдентификатор();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЧек(ЭтоПречек = Ложь)
	
	Объект.Дата = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЭтоПречек Тогда
		Объект.СистемаНалогообложенияККТ = ЗначениеНастроекВызовСервераПовтИсп.СистемаНалогообложенияККТ();
	КонецЕсли;
	
	Если (ЭтоПречек И ЗначениеНастроекВызовСервераПовтИсп.ПечататьШтрихкодНаПречеке())
		ИЛИ (НЕ ЭтоПречек И ЗначениеНастроекВызовСервераПовтИсп.ПечататьШтрихкодНаЧеке())Тогда
		
		ЗаполнитьШтрихкодЧека();
		
	КонецЕсли;
	
	ЗаписатьЧекСервер();
	
	ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("ЗаписанЧек", Объект.Ссылка);
	Оповестить("КассоваяОперация", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЧекСервер()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если НЕ ЭтотОбъект.Записать(ПараметрыЗаписи) Тогда
		
		// исключительная ситуация
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		ЭтотОбъект.Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
	ОбновитьЗаписиПоСтрокамТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодборТоваровСервер(Результат.АдресВоВременномХранилище);
	
	ПриИзмененииТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ПодборТоваровСервер(АдресВоВременномХранилище)
	
	ТаблицаПодбор = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ОчищатьСуществующиеМарки = Ложь;
	
	Для Каждого СтрокаПодбора Из ТаблицаПодбор Цикл
		
		Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
			
			ИдентификаторСтроки = ОпределитьСтрокуЧека(СтрокаПодбора.Номенклатура, СтрокаПодбора.Цена);
			
		Иначе
			ИдентификаторСтроки = ОпределитьСтрокуЧекаВозврат(СтрокаПодбора.Номенклатура, СтрокаПодбора.Цена);
		КонецЕсли;
		
		ЗаполнитьСтрокуЧекаПоВидуОперации(ИдентификаторСтроки,СтрокаПодбора, ОчищатьСуществующиеМарки);
		
	КонецЦикла;
	
	Если ИспользуютсяСкидкиНаценки Тогда
		РассчитатьСкидкуНаценкуПоДокументу();
		ОбновитьОтображениеСкидкиНаДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЧекПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Аннулирован");
	
	ЗаписатьЧек();
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбОплате()
	
	ОбновитьДанныеОбОплате();
	
	Если Объект.СтатусОплаты = Перечисления.СтатусыОплатыЧека.Оплачен
		ИЛИ Объект.СтатусОплаты = Перечисления.СтатусыОплатыЧека.ОплаченЧастично Тогда
		
		УстановитьТолькоПросмотрТоваров();
	КонецЕсли;
	
	НастроитьВидимостьЭлементовОбОплате();
	
	НастроитьОтображениеОперацийПлатежнойСистемы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбОплате()
	
	ОплаченоНаличными = 0;
	ОплаченоПлатежнойКартой = 0;
	ОплаченоВидОплаты = Неопределено;
	ОплаченоВстречноеПредоставление = 0;
	
	Для Каждого СтрокаОплаты Из Объект.Оплаты Цикл
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплаты.Наличные Тогда
			
			ОплаченоНаличными = ОплаченоНаличными + СтрокаОплаты.Сумма;
			
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплаты.ПлатежнаяКарта Тогда
			
			ОплаченоПлатежнойКартой = ОплаченоПлатежнойКартой + СтрокаОплаты.Сумма;
			ОплаченоВидОплаты = СтрокаОплаты.ВидОплаты;
			
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплаты.Предоплата Тогда
			
			ОплаченоПредоплата = ОплаченоПредоплата + СтрокаОплаты.Сумма;
			
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплаты.ВстречноеПредоставление Тогда
			
			ОплаченоВстречноеПредоставление = ОплаченоВстречноеПредоставление + СтрокаОплаты.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЭтотЧекПробит() Тогда
		
		Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
			
			ИтогиРасчетовПоЗаказу = Продажи.ПолучитьИтогиРасчетовПоЗаказу(Объект.ЗаказКлиента);
			ДолгКлиента = ИтогиРасчетовПоЗаказу.ДолгКлиента;
			ОплаченоПредоплата = ИтогиРасчетовПоЗаказу.СуммаОплаты;
			
		Иначе
			
			ИтогиРасчетовПоЗаказу = Продажи.ПолучитьИтогиРасчетовПоЗаказу(Объект.ЗаказКлиента);
			ДолгКлиента = ИтогиРасчетовПоЗаказу.ДолгКлиента;
			ОплаченоПредоплата = 0;
			
			Если ДолгКлиента <= 0 Тогда
				
				ВозвратДолгПередКлиентом = - ДолгКлиента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовОбОплате()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОплаченоНаличными, ОплаченоНаличнымиГоризонт", "Видимость",
		ЗначениеЗаполнено(ОплаченоНаличными)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОплаченоПлатежнойКартой, ОплаченоПлатежнойКартойГоризонт", "Видимость",
		ЗначениеЗаполнено(ОплаченоПлатежнойКартой)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОплаченоВидОплаты, ОплаченоВидОплатыГоризонт", "Видимость",
		ЗначениеЗаполнено(ОплаченоВидОплаты)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОплаченоПредоплата, ОплаченоПредоплатаГоризонт", "Видимость",
		ЗначениеЗаполнено(ОплаченоПредоплата)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОплаченоВстречноеПредоставление, ОплаченоВстречноеПредоставлениеГоризонт",
		"Видимость",
		ЗначениеЗаполнено(ОплаченоВстречноеПредоставление)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОплаченоПолученоБезОплаты, ОплаченоПолученоБезОплатыГоризонт",
		"Видимость",
		ОплаченоНаличными = 0 И ОплаченоПлатежнойКартой = 0 И ЭтотЧекПробит()
		И Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборВидаОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОплаты = ДополнительныеПараметры.ПараметрыОплаты;
	ПараметрыОплаты.ВидОплаты = Результат;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект);
	ОткрытьФорму(ДополнительныеПараметры.ИмяФормыОплаты, ПараметрыОплаты, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьЗаписиПоСтрокамТЧ();
	
	Если Результат = Неопределено
		ИЛИ Результат = КодВозвратаДиалога.Отмена
		ИЛИ НЕ Результат.Свойство("Успешно") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.Успешно Тогда
		
		Возврат;
	КонецЕсли;
	
	Объект.Дата       = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
	Объект.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧеков.Пробит");
	
	ЗаполнитьЗначенияСвойств(Объект, Результат,
	"КассоваяСмена,
	|АдресЧекаЕГАИС,
	|ПодписьЧекаЕГАИС,
	|АдресEmailПокупателя,
	|НомерТелефонаПокупателя,
	|ПризнакСпособаРасчета,
	|АдресРасчета,
	|МестоРасчета
	|"
	);
	
	Для Каждого СтруктураОплаты Из Результат.Оплата Цикл
		
		Если СтруктураОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплаты.ПлатежнаяКарта")
			И НЕ СтруктураОплаты.РезультатОперацииПоПлатежнойСистеме = Неопределено Тогда
			
			// добавление платежей происходит в ПослеПолучениеРезультатаПоПлатежнойСистеме
			
		Иначе
			НоваяОплата = Объект.Оплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяОплата, СтруктураОплаты);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		
		Объект.СуммаДокумента = Объект.Оплаты.Итог("Сумма");
		
		Если Объект.ЦенаВключаетНДС Тогда
			ПроцентНДС = ЦенообразованиеКлиентСерверПовтИсп.
			ПолучитьСтавкуНДСЧислом(ЦенообразованиеКлиентСервер.ПолучитьРасчетнуюСтавкуНДСАванса());
			
			Объект.СуммаНДСДокумента = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Объект.СуммаДокумента, ПроцентНДС);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")
		ИЛИ Объект.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная") Тогда
		
		УстановитьРасчетнуюСтавкуНДС();
		
	КонецЕсли;
	
	Объект.ФискальныйНомер = Результат.ФискальныйНомер;
	Объект.ФискальныйПризнак = Результат.ФискальныйПризнак;
	
	ЗаписатьЧек();
	
	ПомощникUIКлиент.ПоказатьСообщение(НСтр("ru = 'Чек пробит'"));
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие("ЧекПробит", Строка(Объект.Номер));
	
	Если ОпределитьКоординатыПробития() Тогда
		ЭтотОбъект.Закрыть(КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасчетнуюСтавкуНДС()
	
	Для Каждого СтрокаТовары ИЗ Объект.Товары Цикл
		
		СтрокаТовары.СтавкаНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьРасчетнуюСтавкуНДС(СтрокаТовары.СтавкаНДС);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИзменитьСтроку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураСтроки.Вставить("Цена",         СтрокаТаблицы.Цена);
		СтруктураСтроки.Вставить("Количество", 0);
	КонецЕсли;
	
	Если Результат.Свойство("УдалитьСтроку") Тогда
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КлючСвязи) Тогда
			
			УдалитьАкцизныеМаркиПоКлючуСвязи(Объект.Марки, СтрокаТаблицы.КлючСвязи);
			
		КонецЕсли;
		
		ИндексСтроки = Объект.Товары.Индекс(СтрокаТаблицы);
		Объект.Товары.Удалить(ИндексСтроки);
		
		Модифицированность = Истина;
		
	ИначеЕсли Результат.Свойство("Сохранить") Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
		
		Если (ИспользуетсяЕГАИС И СтрокаТаблицы.НеобходимостьВводаАкцизнойМарки)
			ИЛИ (СтрокаТаблицы.ЭтоМаркируемаяПродукция И НЕ Объект.ЭтоЧекКоррекции) Тогда
			
			Марки = ПолучитьИзВременногоХранилища(Результат.АдресМарокВХранилище);
			ЗаполнитьМаркиПоВСтрокеЧека(СтрокаТаблицы.КлючСвязи, Марки);
			
		КонецЕсли;
		
		ОбновитьЗаписьПоСтроке(,ИдентификаторСтроки);
		
		Модифицированность = Истина;
		
		ПодсветитьСтроку(ИдентификаторСтроки);
	КонецЕсли;
	
	// обновление буфера возврата
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		Если Результат.Свойство("УдалитьСтроку") Тогда
			СтруктураСтроки.Количество = 0;
		ИначеЕсли Результат.Свойство("Сохранить") Тогда
			СтруктураСтроки.Количество = Результат.Количество;
		КонецЕсли;
		
		ОбновитьСтрокуБуфера(СтруктураСтроки);
		
	КонецЕсли;
	
	Если ИспользуютсяСкидкиНаценки Тогда
		РассчитатьСкидкуНаценкуПоДокументу();
		ОбновитьОтображениеСкидкиНаДокумент();
	КонецЕсли;
	
	ПриИзмененииТоваров();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовФормы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СуммаНДС, СуммаНДСГоризонт", "Видимость",
		Объект.ЦенаВключаетНДС
	);
	
	УстановитьДоступностьРедактированияТоваров();
	
	НастроитьВидимостьПоПризнакуСпособаРасчета();
	
	НастроитьВидимостьПоСтатусуЧека();
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"РаспечататьПречек, ОплаченоПредоплата, ОплаченоПредоплатаГоризонт, СоздатьЧекКоррекции",
			"Видимость",
			Ложь
		);
		
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользоватьПречек() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"РаспечататьПречек",
			"Видимость",
			Ложь
		);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОткрытьПрочиеДанные, ОткрытьПрочиеДанныеГоризонт", "Видимость",
		ЗначениеЗаполнено(Объект.СистемаНалогообложенияККТ)
		ИЛИ ЗначениеЗаполнено(Объект.ШтрихкодЧека)
		ИЛИ ЗначениеЗаполнено(Объект.КассоваяСмена)
		ИЛИ ЗначениеЗаполнено(Объект.ФискальныйНомер)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ЧекПродажи, ЧекПродажиГоризонт",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЧекПродажи)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ЗаказКлиента, ЗаказКлиентаГоризонт",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЗаказКлиента)
	);
	
	// Чек корреции
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаКоррекция, ГруппаКоррекцияГоризонт", 
		"Видимость",
		Объект.ЭтоЧекКоррекции
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"НомерПредписания, НомерПредписанияГоризонт",
		"Видимость",
		ЗначениеЗаполнено(Объект.НомерПредписания)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ЧекОснование, ЧекОснованиеГоризонт",
		"Видимость",
		ЗначениеЗаполнено(Объект.ЧекОснование)
	);
	
	Если ЗначениеЗаполнено(ЧекКоррекции) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СоздатьЧекКоррекции",
			"Видимость",
			Ложь
		);
	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаЧекКоррекции, ОтступЧекКоррекции",
		"Видимость",
		ЗначениеЗаполнено(ЧекКоррекции)
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоПризнакуСпособаРасчета()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"НадписьБезПередачиТоваров,
		|НадписьБезПередачиТоваровГоризонт,
		|ВозвратДолгПередКлиентом,
		|ВозвратДолгПередКлиентомГоризонт
		|",
		"Видимость",
		Ложь
	);
	
	Если Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		УстановитьТолькоПросмотрТоваров();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НадписьБезПередачиТоваров, НадписьБезПередачиТоваровГоризонт",
			"Видимость", Истина
		);
		
		Элементы.Товары.Видимость = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СуммаСкидкиНаценки, СуммаСкидкиНаценкиГоризонт, ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт, СоздатьЧекКоррекции",
			"Видимость", Ложь
		);
		
		Если НЕ ЭтотЧекПробит() Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
				ЭтотОбъект,
				"СуммаОплата, СуммаОплатаИнфо, СуммаНДС, СуммаОплатаГоризонт, СуммаНДСГоризонт",
				"Видимость",
				Ложь
			);
			
			Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
					"ВозвратДолгПередКлиентом, ВозвратДолгПередКлиентомГоризонт",
					"Видимость",
					Истина
				);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
		ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СоздатьЧекКоррекции",
			"Видимость", Ложь
		);
		
	ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СоздатьЧекКоррекции",
			"Видимость", Ложь
		);
		
		УстановитьТолькоПросмотрТоваров();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НадписьБезПередачиТоваров, НадписьБезПередачиТоваровГоризонт",
			"Видимость", Истина
		);
		
	ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
		ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"СоздатьЧекКоррекции",
			"Видимость", Ложь
		);
		
		УстановитьТолькоПросмотрТоваров();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НадписьБезПередачиТоваров, НадписьБезПередачиТоваровГоризонт",
			"Видимость", Истина
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт",
			"Видимость", Ложь
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоСтатусуЧека()
	
	Если Объект.СтатусЧека = Перечисления.СтатусыЧеков.Пробит Тогда
		
		СписокКнопок = "Отложить, Аннулировать,
						|РаспечататьПречек";
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Ложь);
		
		УстановитьТолькоПросмотрТоваров();
		
		Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
				"ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт", "Видимость", Ложь);
		КонецЕсли;
		
	ИначеЕсли Объект.СтатусЧека = Перечисления.СтатусыЧеков.Архивный Тогда
		
		СписокКнопок = "Отложить, Аннулировать,
						|ИзменитьАдрес, ИзменитьАдресГоризонт, РаспечататьПречек";
						
		УстановитьТолькоПросмотрТоваров();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Ложь);
		
		Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
				ЭтотОбъект, "ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт", "Видимость", Ложь);
		КонецЕсли;
		
		
	ИначеЕсли Объект.СтатусЧека = Перечисления.СтатусыЧеков.Отложен Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"Аннулировать", "Видимость", Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт, Геолокация, ГеолокацияГоризонт, СоздатьЧекКоррекции",
			"Видимость", Ложь);
		
	ИначеЕсли Объект.СтатусЧека = Перечисления.СтатусыЧеков.Аннулирован Тогда
		
		УстановитьТолькоПросмотрТоваров();
		
		СписокКнопок = "Отложить, Аннулировать, ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт,
						|Геолокация, ГеолокацияГоризонт,
						|РаспечататьПречек, СоздатьЧекКоррекции";
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Ложь);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СтатусЧека) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ГруппаВозвратЧека, ГруппаВозвратЧекаГоризонт, Аннулировать,
			|Геолокация, ГеолокацияГоризонт, СоздатьЧекКоррекции",
			"Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрТоваров()
	
	ТоварыТолькоПросмотр = Истина;
	
	СписокКнопок = "ПодборТоваров, СканированиеШтрихкода, ПодборТоваровГоризонт, СканированиеШтрихкодаГоризонт";
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРедактированияТоваров()
	
	ТоварыТолькоПросмотр = Ложь;
	
	СписокКнопок = "ПодборТоваров, СканированиеШтрихкода, ПодборТоваровГоризонт, СканированиеШтрихкодаГоризонт";
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокКнопок, "Видимость", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СканированиеШтрихкода, СканированиеШтрихкодаГоризонт",
		"Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() И НЕ ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписьПоСтроке(Знач Строка, ИдентификаторСтроки = Неопределено)
	
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		СтрокаТЧ = Строка;
	КонецЕсли;
	
	ЗаписьПоСтроке = НСтр("ru = '%Количество%%ЕдИзм% Х %Цена%%Скидка% = %Сумма%'");
	
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Количество%", Формат(СтрокаТЧ.Количество, ЗначениеНастроекПовтИсп.ФорматКоличественныхПолей()));
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%ЕдИзм%",      Строка(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения));
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Цена%",       Формат(СтрокаТЧ.Цена, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
	ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Сумма%",      Формат(СтрокаТЧ.Сумма, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
	
	// Скидка
	СкидкаНаценкаСумма = СтрокаТЧ.СкидкаНаценкаСумма;
	Если ЗначениеЗаполнено(СкидкаНаценкаСумма) Тогда
		
		СкидкаНаценкаПроцент = СтрокаТЧ.СкидкаНаценкаПроцент;
		Если ЗначениеЗаполнено(СкидкаНаценкаПроцент) Тогда
			
			ЗаписьСкидкаНаценка = НСтр("ru = '%Знак% %СкидкаНаценкаСумма% (%Процент%%)'");
			Процент = ?(СкидкаНаценкаПроцент > 0, СкидкаНаценкаПроцент, -СкидкаНаценкаПроцент);

			ЗаписьСкидкаНаценка = СтрЗаменить(ЗаписьСкидкаНаценка, "%Процент%", Формат(Процент, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
		Иначе
			
			ЗаписьСкидкаНаценка = НСтр("ru = '%Знак% %СкидкаНаценкаСумма%'");
		КонецЕсли;
		
		СкидкаСумма = ?(СкидкаНаценкаСумма > 0, СкидкаНаценкаСумма, - СкидкаНаценкаСумма);
		Знак = ?(СкидкаНаценкаСумма > 0, "+", "-");
		
		ЗаписьСкидкаНаценка = СтрЗаменить(ЗаписьСкидкаНаценка, "%Знак%", Знак);
		ЗаписьСкидкаНаценка = СтрЗаменить(ЗаписьСкидкаНаценка, "%СкидкаНаценкаСумма%", Формат(СкидкаСумма, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей()));
		
		ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Скидка%", " " + ЗаписьСкидкаНаценка);
	Иначе
		ЗаписьПоСтроке = СтрЗаменить(ЗаписьПоСтроке, "%Скидка%", "");
	КонецЕсли;
	
	СтрокаТЧ.ТоварыЗаписьПоСтроке = ЗаписьПоСтроке;
	
	СтрокаТЧ.СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуВозврат(ИдентификаторСтроки, ДанныеНоменклатуры, Количество, СтрокаБуфера, ОчищатьСуществующиеМарки)
	
	Номенклатура = ДанныеНоменклатуры.Номенклатура;
	Цена = СтрокаБуфера.Цена;
	
	СтрокаЧека = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаЧека.Номенклатура = Номенклатура;
	СтрокаЧека.СтавкаНДС = СтрокаБуфера.СтавкаНДС;
	
	Если НЕ Объект.ЦенаВключаетНДС Тогда
		СтрокаЧека.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаЧека, ДанныеНоменклатуры, "Штрихкод");
	
	Если ИспользуетсяЕГАИС И ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки Тогда
		
		СтрокаЧека.НеобходимостьВводаАкцизнойМарки = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаЧека, "КлючСвязи");
		Количество = ЗаполнитьМаркиПоВСтрокеЧека(СтрокаЧека.КлючСвязи, ДанныеНоменклатуры.Марки);
		
	ИначеЕсли ДанныеНоменклатуры.ЭтоМаркируемаяПродукция И НЕ Объект.ЭтоЧекКоррекции Тогда
		
		СтрокаЧека.ЭтоМаркируемаяПродукция = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаЧека, "КлючСвязи");
		
		Количество = ЗаполнитьМаркиПоВСтрокеЧека(СтрокаЧека.КлючСвязи,
			ДанныеНоменклатуры.Марки, ОчищатьСуществующиеМарки);
		
	КонецЕсли;
	
	СтрокаЧека.Количество = СтрокаЧека.Количество + Количество;
	
	СтрокаЧека.Цена              = Цена;
	СтрокаЧека.Сумма             = СтрокаЧека.Цена * СтрокаЧека.Количество;
	СтрокаЧека.ЦенаСУчетомСкидки = СтрокаБуфера.ЦенаСУчетомСкидки;
	
	Если НЕ СтрокаБуфера.СкидкаНаценкаСуммаПродажи = 0 Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Количество",                СтрокаЧека.Количество);
		СтруктураДанных.Вставить("КоличествоПродажи",         СтрокаБуфера.КоличествоПродажи);
		СтруктураДанных.Вставить("Цена",                      Цена);
		СтруктураДанных.Вставить("СкидкаНаценкаСуммаПродажи", СтрокаБуфера.СкидкаНаценкаСуммаПродажи);
		СтруктураДанных.Вставить("СкидкаНаценкаСумма",        0);
		СтруктураДанных.Вставить("Сумма",                     0);
		СтруктураДанных.Вставить("ЦенаСУчетомСкидки",         0);
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуВозвратаПоПродаже(СтруктураДанных);
		
		ЗаполнитьЗначенияСвойств(СтрокаЧека, СтруктураДанных, "Сумма, СкидкаНаценкаСумма");
		
	КонецЕсли;
	
	Если ИспользуетсяЕГАИС Тогда
		
		СтрокаЧека.НеобходимостьШтрихкодаПриПродаже = ПродажиВызовСервера.ОпределитьНеобходимостьШтрихкодаПриПродаже(Номенклатура);
		
		Если СтрокаЧека.НеобходимостьШтрихкодаПриПродаже И НЕ ЗначениеЗаполнено(СтрокаЧека.Штрихкод) Тогда
			
			СтрокаЧека.Штрихкод = ПродажиВызовСервера.ПодобратьШтрихкодДляПродажи(Номенклатура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьНДССтрокиЧека(СтрокаЧека, Объект.ЦенаВключаетНДС);
	ОбновитьЗаписьПоСтроке(СтрокаЧека);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНДССтрокиЧека(СтрокаЧека, ЦенаВключаетНДС)
	
	СуммаНДС = 0;
	
	Если ЦенаВключаетНДС Тогда
		
		ПроцентНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаЧека.СтавкаНДС);
		
		Если СтрокаЧека.ЭтоМаркируемаяПродукция И СтрокаЧека.Количество > 1 Тогда
			
			Коэффициенты = Новый Массив(СтрокаЧека.Количество);
			
			Индекс = 0;
			Для Каждого _ Из Коэффициенты Цикл
				Коэффициенты[Индекс] = 1;
				Индекс = Индекс + 1;
			КонецЦикла;
			
			РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаЧека.Сумма, Коэффициенты);
			
			Для Каждого РаспределеннаяСумма Из РаспределенныеСуммы Цикл
				СуммаНДС = СуммаНДС + ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(РаспределеннаяСумма, ПроцентНДС);
			КонецЦикла;
			
		Иначе
			СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаЧека.Сумма, ПроцентНДС);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаЧека.СуммаНДС = СуммаНДС;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтрокуЧека(ИдентификаторСтроки, ДанныеНоменклатуры, ОчищатьСуществующиеМарки = Истина)
	
	СтрокаЧека = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Номенклатура = ДанныеНоменклатуры.Номенклатура;
	
	СтрокаЧека.Номенклатура = Номенклатура;
	
	РеквизитыНоменклатуры = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(
		Номенклатура, "СтавкаНДС, Цена"
	);
	
	ЗаполнитьЗначенияСвойств(СтрокаЧека, РеквизитыНоменклатуры, "СтавкаНДС, Цена");
	
	Если Объект.ЦенаВключаетНДС Тогда
		СтрокаЧека.СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавку_18_20(СтрокаЧека.СтавкаНДС);
	Иначе
		СтрокаЧека.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Штрихкод) Тогда
		СтрокаЧека.Штрихкод = ДанныеНоменклатуры.Штрихкод;
	КонецЕсли;
	
	Если НЕ ДанныеНоменклатуры.Цена = Неопределено Тогда
		СтрокаЧека.Цена = ДанныеНоменклатуры.Цена;
	КонецЕсли;
	
	Если ИспользуетсяЕГАИС И ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки Тогда
		
		СтрокаЧека.НеобходимостьВводаАкцизнойМарки = ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаЧека, "КлючСвязи");
		
		СтрокаЧека.Количество = ЗаполнитьМаркиПоВСтрокеЧека(СтрокаЧека.КлючСвязи,
			ДанныеНоменклатуры.Марки, ОчищатьСуществующиеМарки);
			
	ИначеЕсли ДанныеНоменклатуры.ЭтоМаркируемаяПродукция И НЕ Объект.ЭтоЧекКоррекции Тогда
		
		СтрокаЧека.ЭтоМаркируемаяПродукция = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаЧека, "КлючСвязи");
		
		СтрокаЧека.Количество = ЗаполнитьМаркиПоВСтрокеЧека(СтрокаЧека.КлючСвязи,
			ДанныеНоменклатуры.Марки, ОчищатьСуществующиеМарки);
		
	Иначе
		
		Если ДанныеНоменклатуры.Количество = Неопределено Тогда
			
			СтрокаЧека.Количество = СтрокаЧека.Количество + 1;
		Иначе
			
			СтрокаЧека.Количество = СтрокаЧека.Количество + ДанныеНоменклатуры.Количество;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользуетсяЕГАИС Тогда
		
		СтрокаЧека.НеобходимостьШтрихкодаПриПродаже = ПродажиВызовСервера.ОпределитьНеобходимостьШтрихкодаПриПродаже(Номенклатура);
		
		Если СтрокаЧека.НеобходимостьШтрихкодаПриПродаже И НЕ ЗначениеЗаполнено(СтрокаЧека.Штрихкод) Тогда
			
			СтрокаЧека.Штрихкод = ПродажиВызовСервера.ПодобратьШтрихкодДляПродажи(Номенклатура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаЧека.Сумма = СтрокаЧека.Цена * СтрокаЧека.Количество;
	
	РассчитатьНДССтрокиЧека(СтрокаЧека, Объект.ЦенаВключаетНДС);
	
	ОбновитьЗаписьПоСтроке(СтрокаЧека);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьМаркиПоВСтрокеЧека(КлючСвязи, Марки, ОчищатьСуществующиеМарки = Истина)
	
	Если ОчищатьСуществующиеМарки Тогда
		УдалитьАкцизныеМаркиПоКлючуСвязи(Объект.Марки, КлючСвязи);
	КонецЕсли;
	
	Для Каждого Марка Из Марки Цикл
		
		СтрокаАкцизнаяМарка = Объект.Марки.Добавить();
		СтрокаАкцизнаяМарка.КлючСвязи = КлючСвязи;
		
		ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, Марка,
			"ТипМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер, КодМаркировки"
		);
		
	КонецЦикла;
	
	Возврат КоличествоМарокПоКлючуСвязи(Объект.Марки, КлючСвязи);
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаписиПоСтрокамТЧ()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ОбновитьЗаписьПоСтроке(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыСтроки()
	
	Если ГоризонтальнаяОриентацияЭкрана Тогда
		ТекущиеДанные = Элементы.ТоварыГоризонт.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	СтруктураПараметров.Вставить("НомерСтроки",         ТекущиеДанные.НомерСтроки);
	СтруктураПараметров.Вставить("Номенклатура",        ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Количество",          ТекущиеДанные.Количество);
	СтруктураПараметров.Вставить("Цена",                ТекущиеДанные.Цена);
	СтруктураПараметров.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	СтруктураПараметров.Вставить("Сумма",               ТекущиеДанные.Сумма);
	СтруктураПараметров.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	СтруктураПараметров.Вставить("Штрихкод",            ТекущиеДанные.Штрихкод);
	СтруктураПараметров.Вставить("СкидкаНаценкаПроцент",ТекущиеДанные.СкидкаНаценкаПроцент);
	СтруктураПараметров.Вставить("СкидкаНаценкаСумма",  ТекущиеДанные.СкидкаНаценкаСумма);
	СтруктураПараметров.Вставить("ЦенаСУчетомСкидки",   ТекущиеДанные.ЦенаСУчетомСкидки);

	СтруктураПараметров.Вставить("ЦенаВключаетНДС",     Объект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("ВозвратТоваров",      Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат());
	СтруктураПараметров.Вставить("ЧекПродажи",          Объект.ЧекПродажи);
	СтруктураПараметров.Вставить("Заказ",               Объект.ЗаказКлиента);
	СтруктураПараметров.Вставить("Чек",                 Объект.Ссылка);
	СтруктураПараметров.Вставить("ЭтоЧекКоррекции",     Объект.ЭтоЧекКоррекции);
	
	СтруктураПараметров.Вставить("НеобходимостьВводаАкцизнойМарки",  ТекущиеДанные.НеобходимостьВводаАкцизнойМарки);
	СтруктураПараметров.Вставить("НеобходимостьШтрихкодаПриПродаже", ТекущиеДанные.НеобходимостьШтрихкодаПриПродаже);
	
	СтруктураПараметров.Вставить("АдресМарокВХранилище", АдресМарокВХранилище(ТекущиеДанные.КлючСвязи));
	
	СтруктураПараметров.Вставить("ТолькоПросмотрФормы", ТолькоПросмотрФормы());
	
	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СканированиеШтрихкода, СканированиеШтрихкодаГоризонт", 
		"Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров()
		И НЕ ИспользуетсяАсинхронныйСканер
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"Геолокация, ГеолокацияГоризонт",
		"Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяГеолокация()
	);
	
	ОбщегоНазначения.УстановитьВысотуПоляНаименованиеТовара(ЭтотОбъект,
		"ТоварыНоменклатура, ТоварыНоменклатураГоризонт"
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СуммаСкидкиНаценки, СуммаСкидкиНаценкиГоризонт",
		"Видимость",
		ИспользуютсяСкидкиНаценки
	);
	
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект,
		"СуммаОплата, СуммаОплатаИнфо, СуммаОплатаГоризонт"
	);
	
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ЗаголовокОплаты, ЗаголовокОплатыГоризонт",
		"ЦветТекста",
		ЗначениеНастроекКлиентСерверПовтИсп.ЦветТекстаЗаголовка()
	);
	
	Если НЕ ЭтотЧекПробит() Тогда
		
		СписокКоманд = "КомандаНаличные, КомандаНаличныеГоризонт,
		|КомандаПлатежнаяКарта, КомандаПлатежнаяКартаГоризонт,
		|КомандаСмешаннаяОплатаПодвал, КомандаСмешаннаяОплатаГоризонт,
		|КомандаПробитьБезОплатыПодвал,
		|КомандаСмешаннаяОплата,
		|КомандаПробитьБезОплаты, КомандаПробитьБезОплатыГоризонт
		|";
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			СписокКоманд,
			"ЦветФона",
			ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово()
		);
		
	КонецЕсли;
	
	
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект, "КомандаВозвратЧека, КомандаВозвратЧекаГоризонт");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаСервере
Функция СтруктураПараметровДляПечатиЧека(ЭтоПречек = Ложь)
	
	ДанныеРасчетов = Новый Структура;
	ДанныеРасчетов.Вставить("ОплаченоПредоплата", ОплаченоПредоплата);
	ДанныеРасчетов.Вставить("ДолгКлиента", ДолгКлиента);
	ДанныеРасчетов.Вставить("ДоступнаяСуммаВозвратаНаличные", ДоступнаяСуммаВозвратаНаличные);
	ДанныеРасчетов.Вставить("ДоступнаяСуммаВозвратаПлатежнаяКарта", ДоступнаяСуммаВозвратаПлатежнаяКарта);
	ДанныеРасчетов.Вставить("ИспользуютсяРасчетыСКлиентами", ИспользуютсяРасчетыСКлиентами);
	
	ПараметровДляПечатиЧека = Документы.Чек.ПолучитьДанныеДляФискализацииЧека(Объект.Ссылка, ЭтоПречек, ДанныеРасчетов);
	
	Возврат ПараметровДляПечатиЧека;
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммыДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	Объект.СуммаНДСДокумента = Объект.Товары.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТоваров()
	
	РассчитатьСуммыДокумента();
	УстановитьДоступностьОплаты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйНомер()
	
	ЧекОбъект = РеквизитФормыВЗначение("Объект");
	ЧекОбъект.УстановитьНовыйНомер();
	ЗначениеВРеквизитФормы(ЧекОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокЧека()
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		
		Если Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
		
			Заголовок = НСтр("ru = 'Продажа'");
			
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.ЭтоЧекКоррекции Тогда
				ЭтотОбъект.АвтоЗаголовок = Ложь;
				Заголовок = НСтр("ru = 'Продажа: Коррекция (создание)'");
			КонецЕсли;
			
		ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
			
			Заголовок = НСтр("ru = 'Предоплата'");
			
		ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
			
			Заголовок = НСтр("ru = 'Постоплата'");
			
		ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
			
			Заголовок = НСтр("ru = 'Продажа (рассрочка)'");
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		Если Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
			
			Заголовок = НСтр("ru = 'Возврат'");
			
		ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
			
			Заголовок = НСтр("ru = 'Возврат оплаты'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеОперацийПлатежнойСистемы()
	
	КоличествоОпераций = Объект.ОперацииПлатежнойСистемы.Количество();
	
	Если НЕ КоличествоОпераций = 0 Тогда
		
		ЗаголовокСсылки = НСтр("ru = 'Операции платежной системы (%КоличествоОпераций%)'");
		ЗаголовокСсылки = СтрЗаменить(ЗаголовокСсылки, "%КоличествоОпераций%", КоличествоОпераций);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ОткрытьОперацииПлатежнойСистемы, ОткрытьОперацииПлатежнойСистемыГоризонт", "Заголовок",
			ЗаголовокСсылки
		);
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОткрытьОперацииПлатежнойСистемы, ОткрытьОперацииПлатежнойСистемыГоризонт", "Видимость",
		НЕ КоличествоОпераций = 0
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуОплаты()
	
	Если Объект.ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		
		Если Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
				"ЗаголовокОплаты, ЗаголовокОплатыГоризонт", "Заголовок",
				ВРег(НСтр("ru = 'Принять оплату'"))
			);
			
		ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
				"ЗаголовокОплаты, ЗаголовокОплатыГоризонт", "Заголовок",
				ВРег(НСтр("ru = 'Принять постоплату'"))
			);
			
		ИначеЕсли Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
			ИЛИ Объект.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
				"ЗаголовокОплаты, ЗаголовокОплатыГоризонт", "Заголовок",
				ВРег(НСтр("ru = 'Принять предоплату'"))
			);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ЗаголовокОплаты, ЗаголовокОплатыГоризонт",
			"Заголовок",
			ВРег(НСтр("ru = 'Вернуть оплату'"))
		);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилище()
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьШтрихкодЧека()
	
	Если ЗначениеЗаполнено(Объект.ШтрихкодЧека) Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксШтрихкода = ПродажиКлиентСерверПовтИсп.ПрефиксШтрихкодаЧека(); //диапазон купонов
	
	Генератор = Новый ГенераторСлучайныхЧисел();
	СлучайноеЧисло = Генератор.СлучайноеЧисло(1000000000, 4294967295);
	
	ИдентификаторЧека = Строка(Формат(СлучайноеЧисло, "ЧГ=0"));
	
	КонтрольныйСимволEAN13 = ОбщегоНазначенияКлиентСервер.КонтрольныйСимволEAN13(ПрефиксШтрихкода + ИдентификаторЧека);
	
	Объект.ШтрихкодЧека = ПрефиксШтрихкода + ИдентификаторЧека + КонтрольныйСимволEAN13;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьСтроку(ИдентификаторСтроки)
	
	СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ СтрокаТоваров = Неопределено Тогда
		НомерСтрокиДляПодсветки = СтрокаТоваров.НомерСтроки;
		Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		
		Если НЕ ГоризонтальнаяОриентацияЭкрана Тогда
			
			Элементы.СтраницыПролистывания.ТекущаяСтраница = Элементы.СтраницаТовары;
			
		КонецЕсли;
		
		ИнтервалСек = 1;
		ПодключитьОбработчикОжидания("Подключаемый_ОчиститьНомерСтрокиДляПодсветки", ИнтервалСек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчиститьНомерСтрокиДляПодсветки()
	
	НомерСтрокиДляПодсветки = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ЭтотЧекПробит()
	
	ЧекПробит = Объект.СтатусЧека = Перечисления.СтатусыЧеков.Пробит
			ИЛИ Объект.СтатусЧека = Перечисления.СтатусыЧеков.Архивный;
	
	Возврат ЧекПробит;
	
КонецФункции

&НаСервере
Процедура ПроверитьСтавкуНДС()
	
	Если Объект.Дата < ЦенообразованиеКлиентСервер.ПолучитьДатуПереходаНДС20()
		И ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату() > ЦенообразованиеКлиентСервер.ПолучитьДатуПереходаНДС20() Тогда
		
		ПерезаполнитьСтавкуНДС();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСтавкуНДС()
	
	ИзмененаСтавкаНДС = Ложь;
	
	Для Каждого СтрокаЧека Из Объект.Товары Цикл
		
		Ставка_18_20 = ЦенообразованиеКлиентСервер.ПолучитьСтавку_18_20(СтрокаЧека.СтавкаНДС);
		
		Если НЕ СтрокаЧека.СтавкаНДС = Ставка_18_20 Тогда
			
			СтрокаЧека.СтавкаНДС = Ставка_18_20;
			ИзмененаСтавкаНДС = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмененаСтавкаНДС Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		ЭтотОбъект.Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
	ГоризонтальнаяОриентацияЭкрана = ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана;
	
	Если ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана Тогда
		
		Элементы.СтраницаГоризонтальная.Видимость = Истина;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаГоризонтальная;
		
		Элементы.СтраницаВертикальная.Видимость = Ложь;
	Иначе
		
		Элементы.СтраницаВертикальная.Видимость = Истина;
		
		Элементы.страницы.ТекущаяСтраница = Элементы.СтраницаВертикальная;
		
		Элементы.СтраницаГоризонтальная.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
