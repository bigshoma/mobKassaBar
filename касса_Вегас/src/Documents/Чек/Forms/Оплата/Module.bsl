
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЧекКоррекции = Параметры.ОбщиеПараметры.ЭтоЧекКоррекции
		ИЛИ ЗначениеЗаполнено(Параметры.ОбщиеПараметры.ЧекОснование);
	
	НастроитьФормуПоЗначениямНастроек();
	
	НастроитьОформлениеПолейФормы();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"ФормаОплаты,
		|ВидОперации,
		|ВидОплаты,
		|ЧекПродажи,
		|Заказ,
		|ПредоплатаАванс,
		|ДолгКлиента,
		|ДоступнаяСуммаВозвратаНаличные,
		|ДоступнаяСуммаВозвратаПлатежнаяКарта,
		|ИспользуютсяРасчетыСКлиентами
		|"
	);
	
	Всего = Параметры.СуммаДокумента;
	ОстатокКОплате = ?(Всего - ПредоплатаАванс > 0, Всего - ПредоплатаАванс, 0);
	
	ПризнакСпособаРасчета = Параметры.ОбщиеПараметры.ПризнакСпособаРасчета;
	
	ОпределитьПризнакиСпособаРасчетаПередачиТоваров();
	НастроитьОтображенияШапки();
	
	Если ФормаОплаты = "ПлатежнаяКарта" ИЛИ ФормаОплаты = "СмешаннаяОплата" Тогда
		
		ДанныеОплатыПоПлатежнойКарте = Параметры.ДанныеОплатыПоПлатежнойКарте;
		
		РезультатОперацииПоПлатежнойСистеме = ДанныеОплатыПоПлатежнойКарте;
		
		Если НЕ ДанныеОплатыПоПлатежнойКарте = Неопределено Тогда
			ПолученоПлатежнаяКарта = ДанныеОплатыПоПлатежнойКарте.Сумма;
			ВидОплаты = ДанныеОплатыПоПлатежнойКарте.ВидОплаты;
		КонецЕсли;
		
		Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
			
			ДанныеОплатыПоПлатежнойКартеЧекаПродажи = Параметры.ДанныеОплатыПоПлатежнойКартеЧекаПродажи;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОплаты) Тогда
			Если ПродажиВызовСервераПовтИсп.КоличествоВидовОплаты() = 1 Тогда
				ВидОплаты = ПродажиВызовСервераПовтИсп.ПолучитьВидОплаты();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметровДляПечати = Новый Структура;
	СтруктураПараметровДляПечати.Вставить("ОбщиеПараметры", Параметры.ОбщиеПараметры);
	СтруктураПараметровДляПечати.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ВидОплаты", "Видимость", ЗначениеЗаполнено(ВидОплаты)
	);
	
	НастроитьВидимостьКартинокSMSиEmail();
	
	НастроитьВидПоДаннымОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазблокироватьФорму();
	
	ПриИзмененииПолучено();
	
	Если ДоступноБезСдачи Тогда
		ДобавитьБезСдачи(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметровДляПечати.ОбщиеПараметры.АдресРасчета) Тогда
		ОпределитьКоординатыПробития();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Если НЕ ДоступноЗакрытиеФормы Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПодключаемоеОборудованиеКлиент.ОтключитьОборудование(ОборудованиеПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ПолученоНаличныеПриИзменении(Элемент)
	
	ПриИзмененииПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученоПлатежнаяКартаПриИзменении(Элемент)
	
	ПриИзмененииПолучено("ПлатежнаяКарта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧекПокупателюНажатие(Элемент)
	
	ОткрытьФормуВводаНомераТелефонаИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияSMSНажатие(Элемент)
	
	ОткрытьФормуВводаНомераТелефонаИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияEmailНажатие(Элемент)
	
	ОткрытьФормуВводаНомераТелефонаИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПлатежаПриИзменении(Элемент)
	
	Если ФормаОплаты = "ПлатежнаяКарта" Тогда
		ПолученоПлатежнаяКарта = СуммаПлатежа;
		
	Иначе
		
		Если ДоступноБезСдачи Тогда
			ДобавитьБезСдачи(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьСуммуПлатежа();
	
	ПриИзмененииПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОплатыТоваровПриИзменении(Элемент)
	
	Если ВариантОплатыТоваров = "Продажа" Тогда
		
		ПризнакСпособаРасчета =
			ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		
	ИначеЕсли ВариантОплатыТоваров = "Рассрочка" Тогда
		
		ПризнакСпособаРасчета =
			ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой");
		
	КонецЕсли;
	
	НастроитьОтображенияШапки();
	
	ПриИзмененииПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученоНаличныеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если БезСдачи Тогда
		
		БезСдачи = Ложь;
		
		ПолученоНаличные = 0;
		ПриИзмененииПолучено();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяККТ() Тогда
		
		Если ЗначениеЗаполнено(КассоваяСмена) Тогда
			
			ПробитьЧекПродолжение();
			
		Иначе
			
			ОписаниеПослеОткрытиеСмены = Новый ОписаниеОповещения("ПослеОткрытиеСмены", ЭтотОбъект);
			ПродажиКлиент.ОткрытьСмену(ЭтотОбъект, ОписаниеПослеОткрытиеСмены);
			
		КонецЕсли;
		
	Иначе
		
		ПробитьЧекПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплату(Команда)
	
	ЗаблокироватьФорму();
	
	ОтобразитьПустуюСтраницуПечатиЧека();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьОплатуПродолжение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Отменить оплату в платежной системе?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Подтверждение'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить50(Команда)
	
	ДобавитьКупюру(50);
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить100(Команда)
	
	ДобавитьКупюру(100);
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить500(Команда)
	
	ДобавитьКупюру(500);
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить1000(Команда)
	
	ДобавитьКупюру(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБезСдачи(Команда)
	
	БезСдачи = Истина;
	
	ПолученоНаличные = СуммаПлатежа;
	ПриИзмененииПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолнаяПредоплата(Команда)
	
	СуммаПлатежа = ОстатокКОплате;
	СуммаПлатежаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОплата;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьАдресРасчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресРасчета", СтруктураПараметровДляПечати.ОбщиеПараметры.АдресРасчета);
	ПараметрыФормы.Вставить("МестоРасчета", СтруктураПараметровДляПечати.ОбщиеПараметры.МестоРасчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаАдресаРасчета", ЭтотОбъект);
	
	ОткрытьФорму("Документ.Чек.Форма.ВводАдресаРасчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПробитиеЧека

&НаСервере
Процедура ПодготовитьСтруктуруПараметровДляПечати()
	
	СтруктураПараметровДляПечати.ОбщиеПараметры.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная Тогда
		
		Если СуммаПлатежа + ПредоплатаАванс = Всего Тогда
			
			СтруктураПараметровДляПечати.ОбщиеПараметры.ПризнакСпособаРасчета =
				Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
		Иначе
			
			СтруктураПараметровДляПечати.ОбщиеПараметры.ПризнакСпособаРасчета =
				Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
		
		Если ЗначениеЗаполнено(ПредоплатаАванс) Тогда
			ПредоплатаАванс = ?(ПредоплатаАванс > Всего, Всего, ПредоплатаАванс);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.ПозицииЧека.Очистить();
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Предоплата по заказу:'") + " "
				+ СтруктураПараметровДляПечати.ОбщиеПараметры.Основание;
				
		Иначе
			
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Возврат оплаты по заказу:'") + " "
				+ СтруктураПараметровДляПечати.ОбщиеПараметры.Основание;
			
		КонецЕсли;
		
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.Аванс;
		
		СтрокаПозицииЧека.Количество = 1;
		
		СуммаВАванс = СуммаПлатежа + ПредоплатаАванс;
		
		СтрокаПозицииЧека.Цена           = СуммаВАванс;
		СтрокаПозицииЧека.ЦенаСоСкидками = СуммаВАванс;
		СтрокаПозицииЧека.Сумма          = СуммаВАванс;
		
		Если СтруктураПараметровДляПечати.ОбщиеПараметры.СистемаНалогообложения =
			Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			
			Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
				СтрокаПозицииЧека.СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьРасчетнуюСтавкуНДСАвансаЧислом();
			Иначе
				СтрокаПозицииЧека.СтавкаНДС = Документы.ЗаказКлиента.ПолучитьРасчетнуюСтавкуНДСВозвратаАвансаЧислом(Заказ);
			КонецЕсли;
			
		Иначе
			СтрокаПозицииЧека.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		Постоплата = 0;
		
	КонецЕсли;
	
	// Подготовка таблицы оплат
	СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат.Очистить();
	
	Если ЗначениеЗаполнено(ПолученоНаличные) Тогда
		
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаОплаты.Сумма = ПолученоНаличные;
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученоПлатежнаяКарта) Тогда
		
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		СтрокаОплаты.Сумма = ПолученоПлатежнаяКарта;
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если НЕ ВстречноеПредоставление = 0 Тогда
		
		Если ВстречноеПредоставление > Всего Тогда
			ВстречноеПредоставление = Всего;
		КонецЕсли;
		
		Если НЕ ВстречноеПредоставление = 0 Тогда
			СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
			СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
			СтрокаОплаты.Сумма = ВстречноеПредоставление;
			
			СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредоплатаАванс) Тогда
		
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		СтрокаОплаты.Сумма = ПредоплатаАванс;
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// постоплата
	Если Постоплата > 0 Тогда
		
		СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
		СтрокаОплаты.Сумма = Постоплата;
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	КонецЕсли;
	
	СтруктураПараметровДляПечати.ОбщиеПараметры.Вставить("ПокупательEmail", АдресEmail);
	СтруктураПараметровДляПечати.ОбщиеПараметры.Вставить("ПокупательНомер", НомерТелефона);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПродолжение()
	
	ЗаблокироватьФорму();
	ОтобразитьПустуюСтраницуПечатиЧека();
	
	Если ЭтоОплатаПоКарте И НЕ ПолученоПлатежнаяКарта = 0 Тогда
		
		Если ЭтоЧекКоррекции Тогда
			
			ОтобразитьПечатьЧека();
			ПодключитьОбработчикОжидания("Подключаемый_ПробитьЧек", 0.1, Истина);
		
		ИначеЕсли ЗначениеЗаполнено(ОборудованиеПлатежнойСистемы) Тогда
			
			Если ОплатаПоПлатежнойСистемеПроведена Тогда
				
				ПоказатьРаспечататьСлипЧек();
				
			Иначе
				
				ОтобразитьСтраницуПроцесса();
				
				Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
					ПодключитьОбработчикОжидания("Подключаемый_ОплатитьПоПлатежнойСистеме", 0.1, Истина);
				Иначе
					ПодключитьОбработчикОжидания("Подключаемый_ВозвратитьОплатуПоПлатежнойСистеме", 0.1, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПробитьЧекВопрос", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,, НСтр("ru = 'Подтверждение'"));
			
		КонецЕсли;
		
	Иначе
		
		ОтобразитьПечатьЧека();
		ПодключитьОбработчикОжидания("Подключаемый_ПробитьЧек", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПробитьЧек()
	
	ПодготовитьСтруктуруПараметровДляПечати();
	
	РезультатПечатиЧека = ПродажиКлиент.РезультатПечатиЧека();
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	
	СтруктураПараметровДляПечати.Вставить("ОборудованиеПечати", ОборудованиеПечати);
	ПродажиКлиент.ПечатьЧекаПродажи(СтруктураПараметровДляПечати, РезультатПечатиЧека);
	
	Если РезультатПечатиЧека.Успешно Тогда
		
		ПараметрыЗакрытия = ПодготовитьПараметрыЗакрытияФормы(РезультатПечатиЧека);
		
		РазблокироватьФорму();
		Закрыть(ПараметрыЗакрытия);
	Иначе
		
		ОтобразитьОшибкуПечатиЧека(РезультатПечатиЧека.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьРаспечататьСлипЧек()
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		
		// функция разреза [cut] будет перенесена в мБПО, временное решение.
		
		МассивРазрезанныхСлипЧеков = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатОперацииПоПлатежнойСистеме.СлипЧек, "[cut]", Ложь, Ложь);
		
		Для Каждого РазрезанныйСлипЧек Из МассивРазрезанныхСлипЧеков Цикл
			
			ОчиститьСообщения();
			ВыходныеПараметры = Неопределено;
			ВходныеПараметры = Новый Структура("СтрокиТекста", РазрезанныйСлипЧек);
			
			Если МенеджерОборудованияКлиент.ВыполнитьПечатьТекста(
				УникальныйИдентификатор,
				ОборудованиеПечати,
				ВходныеПараметры,
				ВыходныеПараметры) Тогда
				
				ОтобразитьПустуюСтраницуПечатиЧека();
			Иначе
				
				ОтобразитьОшибкуПечатиСлипЧека(ВыходныеПараметры.ТекстОшибки);
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		ПоказатьРаспечататьСлипЧекЗавершение(Неопределено, Неопределено);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстСлипЧека", РезультатОперацииПоПлатежнойСистеме.СлипЧек);
		ПараметрыФормы.Вставить("ДатаОперации", РезультатОперацииПоПлатежнойСистеме.ДатаОперации);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьРаспечататьСлипЧекЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.СлипЧекПлатежнойСистемы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОплатитьПоПлатежнойСистеме()
	
	ВыполняемаяОперацияПлатежнойСистемы = "Оплата";
	
	ПараметрыОплаты = ПродажиКлиент.ПараметрыОплатыПоПлатежнойСистеме();
	ПараметрыОплаты.Сумма = ПолученоПлатежнаяКарта;
	ПараметрыОплаты.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыОплаты.Оборудование = ОборудованиеПлатежнойСистемы;
	ПараметрыОплаты.НомерЧека = Строка(СтруктураПараметровДляПечати.ОбщиеПараметры.НомерЧека);
	
	РезультатОперацииПоПлатежнойСистеме = ПродажиКлиент.ОплатитьПоПлатежнойСистеме(ПараметрыОплаты);
	
	ВладелецФормы.ПослеПолучениеРезультатаПоПлатежнойСистеме(ПолученоПлатежнаяКарта, ВидОплаты, РезультатОперацииПоПлатежнойСистеме);
	
	ОбновитьДанныеОплатыПоПлатежнойКарте();
	
	Если РезультатОперацииПоПлатежнойСистеме.Успешно Тогда
		
		ПоказатьРаспечататьСлипЧек();
		ОтобразитьОплатаЗавершенаУспешно();
	Иначе
		
		ОшибкаОплаты = РезультатОперацииПоПлатежнойСистеме.ТекстОшибки;
		
		ОтобразитьОшибкаОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВозвратитьОплатуПоПлатежнойСистеме()
	
	ВыполняемаяОперацияПлатежнойСистемы = "ВозвратОплаты";
	
	ПараметрыВозвратаОплаты                     = ПродажиКлиент.ПараметрыВозвратаОплатыПоПлатежнойСистеме();
	ПараметрыВозвратаОплаты.Сумма               = ПолученоПлатежнаяКарта;
	ПараметрыВозвратаОплаты.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыВозвратаОплаты.Оборудование        = ОборудованиеПлатежнойСистемы;
	
	Если НЕ ДанныеОплатыПоПлатежнойКартеЧекаПродажи = Неопределено Тогда
		
		ПараметрыВозвратаОплаты.НомерКарты          = ДанныеОплатыПоПлатежнойКартеЧекаПродажи.НомерКарты;
		ПараметрыВозвратаОплаты.НомерСсылкиОперации = ДанныеОплатыПоПлатежнойКартеЧекаПродажи.НомерСсылкиОперации;
		ПараметрыВозвратаОплаты.КодАвторизации      = ДанныеОплатыПоПлатежнойКартеЧекаПродажи.КодАвторизации;
		
	КонецЕсли;
	
	ПараметрыВозвратаОплаты.НомерЧека           = СтруктураПараметровДляПечати.ОбщиеПараметры.НомерЧека;
	
	РезультатОперацииПоПлатежнойСистеме = ПродажиКлиент.ВозвратитьОплатуПоПлатежнойСистеме(ПараметрыВозвратаОплаты);
	
	ВладелецФормы.ПослеПолучениеРезультатаПоПлатежнойСистеме(ПолученоПлатежнаяКарта, ВидОплаты, РезультатОперацииПоПлатежнойСистеме);
	ОбновитьДанныеОплатыПоПлатежнойКарте();
	
	Если РезультатОперацииПоПлатежнойСистеме.Успешно Тогда
		
		ПоказатьРаспечататьСлипЧек();
		ОтобразитьВозвратОплатыУспешно();
	Иначе
		
		ОшибкаОплаты = РезультатОперацииПоПлатежнойСистеме.ТекстОшибки;
		
		ОтобразитьОшибкаОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьОплатуПоПлатежнойСистеме()
	
	ВыполняемаяОперацияПлатежнойСистемы = "ОтменаОплаты";
	
	ПараметрыОтменыОплаты = ПродажиКлиент.ПараметрыОтменыОплатыПоПлатежнойСистеме();
	
	ПараметрыОтменыОплаты.Сумма                   = ПолученоПлатежнаяКарта;
	ПараметрыОтменыОплаты.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыОтменыОплаты.Оборудование            = ОборудованиеПлатежнойСистемы;
	ПараметрыОтменыОплаты.НомерКарты              = ДанныеОплатыПоПлатежнойКарте.НомерКарты;
	ПараметрыОтменыОплаты.НомерСсылкиОперации     = ДанныеОплатыПоПлатежнойКарте.НомерСсылкиОперации;
	ПараметрыОтменыОплаты.КодАвторизации          = ДанныеОплатыПоПлатежнойКарте.КодАвторизации;
	ПараметрыОтменыОплаты.НомерЧека               = СтруктураПараметровДляПечати.ОбщиеПараметры.НомерЧека;
	
	РезультатОперацииПоПлатежнойСистеме = ПродажиКлиент.ОтменитьОплатуПоПлатежнойСистеме(ПараметрыОтменыОплаты);
	
	ВладелецФормы.ПослеПолучениеРезультатаПоПлатежнойСистеме(ПолученоПлатежнаяКарта, ВидОплаты, РезультатОперацииПоПлатежнойСистеме);
	ОбновитьДанныеОплатыПоПлатежнойКарте();
	
	Если РезультатОперацииПоПлатежнойСистеме.Успешно Тогда
		
		ОтобразитьОтменаОплатыЗавершенаУспешно();
		ПоказатьРаспечататьСлипЧек();
		
	Иначе
		
		ОшибкаОплаты = РезультатОперацииПоПлатежнойСистеме.ТекстОшибки;
		ОтобразитьОшибкаОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытиеСмены(Результат, ДополнительныеПараметры) Экспорт
	
	КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
	
	Если ЗначениеЗаполнено(КассоваяСмена) Тогда
		ПробитьЧекПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыЗакрытияФормы(РезультатПечатиЧека)
	
	ПараметрыЗакрытия = Новый Структура;
	
	ПараметрыЗакрытия.Вставить("Успешно",                 Истина);
	ПараметрыЗакрытия.Вставить("ФискальныйНомер",         РезультатПечатиЧека.НомерЧека);
	ПараметрыЗакрытия.Вставить("ФискальныйПризнак",       РезультатПечатиЧека.ФискальныйПризнак);
	ПараметрыЗакрытия.Вставить("АдресЧекаЕГАИС",          РезультатПечатиЧека.АдресЧекаЕГАИС);
	ПараметрыЗакрытия.Вставить("ПодписьЧекаЕГАИС",        РезультатПечатиЧека.ПодписьЧекаЕГАИС);
	ПараметрыЗакрытия.Вставить("АдресEmailПокупателя",    АдресEmail);
	ПараметрыЗакрытия.Вставить("НомерТелефонаПокупателя", НомерТелефона);
	
	ПараметрыЗакрытия.Вставить("ПризнакСпособаРасчета",
		СтруктураПараметровДляПечати.ОбщиеПараметры.ПризнакСпособаРасчета
	);
	
	ПараметрыЗакрытия.Вставить("АдресРасчета",
		СтруктураПараметровДляПечати.ОбщиеПараметры.АдресРасчета
	);
	
	ПараметрыЗакрытия.Вставить("МестоРасчета",
		СтруктураПараметровДляПечати.ОбщиеПараметры.МестоРасчета
	);
	
	Оплаты = Новый Массив;
	
	Для Каждого ОплатаККТ ИЗ СтруктураПараметровДляПечати.ОбщиеПараметры.ТаблицаОплат Цикл
		
		Если ОплатаККТ.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные") Тогда
			
			СтруктураОплаты = Новый Структура();
			СтруктураОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплаты.Наличные"));
			СтруктураОплаты.Вставить("Сумма",     ПолученоНаличные - Сдача);
			Оплаты.Добавить(СтруктураОплаты);
			
		ИначеЕсли ОплатаККТ.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
			
			СтруктураОплаты = Новый Структура();
			СтруктураОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплаты.ПлатежнаяКарта"));
			СтруктураОплаты.Вставить("Сумма", 	  ОплатаККТ.Сумма);
			СтруктураОплаты.Вставить("ВидОплаты", ВидОплаты);
			СтруктураОплаты.Вставить("РезультатОперацииПоПлатежнойСистеме", РезультатОперацииПоПлатежнойСистеме);
			
			Оплаты.Добавить(СтруктураОплаты);
			
		ИначеЕсли ОплатаККТ.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
			
			СтруктураОплаты = Новый Структура();
			СтруктураОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплаты.Предоплата"));
			СтруктураОплаты.Вставить("Сумма",     ОплатаККТ.Сумма);
			
			Оплаты.Добавить(СтруктураОплаты);
			
		ИначеЕсли ОплатаККТ.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
			
			СтруктураОплаты = Новый Структура();
			СтруктураОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплаты.ВстречноеПредоставление"));
			СтруктураОплаты.Вставить("Сумма",     ОплатаККТ.Сумма);
			
			Оплаты.Добавить(СтруктураОплаты);
			
		ИначеЕсли ОплатаККТ.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
			
			СтруктураОплаты = Новый Структура();
			СтруктураОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплаты.Постоплата"));
			СтруктураОплаты.Вставить("Сумма",     ОплатаККТ.Сумма);
			
			Оплаты.Добавить(СтруктураОплаты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыЗакрытия.Вставить("Оплата", Оплаты);
	
	Если НЕ ЗначениеЗаполнено(КассоваяСмена) Тогда
		КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Истина);
		Оповестить("ИзмененаКассоваяСмена");
	КонецЕсли;
	
	ПараметрыЗакрытия.Вставить("КассоваяСмена", КассоваяСмена);
	
	Возврат ПараметрыЗакрытия;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ОпределитьКоординатыПробития()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяГеолокация() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеМестоположения = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ДанныеМестоположения = ГеолокацияКлиент.ПолучитьМестоположение();
		
	#КонецЕсли
	
	Если НЕ ДанныеМестоположения = Неопределено Тогда
		
		ГеоКоординаты = ГеолокацияКлиент.ПолучитьКоординатыПоМестоположению(ДанныеМестоположения);
		
		КоординатыДолгота = ГеоКоординаты.Долгота;
		КоординатыШирота  = ГеоКоординаты.Широта;
		
		СтруктураПараметровДляПечати.ОбщиеПараметры.АдресРасчета =
			ГеолокацияКлиент.ПолучитьПредставлениеАдресаМестоположения(, КоординатыШирота, КоординатыДолгота);
		
	Иначе
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ВвестиАдрес", НСтр("ru = 'Ввести адрес вручную'"));
		Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		
		Оповещение = Новый ОписаниеОповещения("ВопросВвестиАдрес", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Адрес расчета не определен'"), Кнопки,, "ВвестиАдрес");
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВопросВвестиАдрес(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = "ВвестиАдрес" Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьДиалогВводаАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВводаАдреса(ПробитиеЧека = Истина)
	
	УказатьАдресРасчета(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводаАдресаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СтруктураПараметровДляПечати.ОбщиеПараметры.АдресРасчета = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКупюру(Номинал)
	
	Если БезСдачи Тогда
		
		БезСдачи = Ложь;
		
		ПолученоНаличные = 0;
		
	КонецЕсли;
	
	ПолученоНаличные = ПолученоНаличные + Номинал;
	ПриИзмененииПолучено();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображенияШапки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект,
		"ОстатокКОплате,
		|Всего,
		|ДолгКлиента,
		|ГруппаРасчетыСКлиентом,
		|ГруппаНаличные,
		|ДобавитьБезСдачи,
		|ГруппаПлатежнаяКарта,
		|ГруппаНаличныеСдача,
		|ПодсказкаВозвратаОплаты,
		|ВидОплаты,
		|СуммаПлатежа,
		|ГруппаПредоплата,
		|ГруппаОшибкиСуммыПлатежа,
		|ГруппаВариантОплатыТоваров,
		|Постоплата
		|",
		"Видимость", Ложь
	);
	
	ПолученоНаличные = 0;
	ПолученоПлатежнаяКарта = 0;
	
	РазблокироватьВводПоПлатежнойКарте();
	РазблокироватьВводСуммаПлатежа();
	
	Элементы.ПредоплатаАванс.Видимость = НЕ (ПредоплатаАванс = 0);
	
	НастроитьОтображениеПоФормеОплаты();
	
	НастроитьОтображениеПоСпособуРасчетаПродажа();
	
	НастроитьОтображениеПоСпособуРасчетаВозврат();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПоФормеОплаты()
	
	Если ФормаОплаты = "Наличные" Тогда
		
		ЭтоНаличнаяОплата = Истина;
		
		Заголовок = НСтр("ru = 'Наличные'");
		
		Элементы.ГруппаНаличные.Видимость = Истина;
		
	ИначеЕсли ФормаОплаты = "ПлатежнаяКарта" Тогда
		
		ЭтоОплатаПоКарте = Истина;
		
		Заголовок = НСтр("ru = 'Платежная карта'");
		
		Элементы.ГруппаПлатежнаяКарта.Видимость = Истина;
		
	ИначеЕсли ФормаОплаты = "СмешаннаяОплата" Тогда
		
		ЭтоНаличнаяОплата = Истина;
		ЭтоОплатаПоКарте = Истина;
		
		Заголовок = НСтр("ru = 'Смешанная оплата'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ГруппаНаличные, ГруппаПлатежнаяКарта",
			"Видимость",
			Истина
		);
		
	ИначеЕсли ФормаОплаты = "БезОплаты" Тогда
		
		Заголовок = НСтр("ru = 'Без оплаты'");
		Элементы.ВариантОплатыТоваров.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ ЭтоНаличнаяОплата Тогда
		ДоступнаяСуммаВозвратаНаличные = 0;
	КонецЕсли;
	
	Если НЕ ЭтоОплатаПоКарте Тогда
		ДоступнаяСуммаВозвратаПлатежнаяКарта = 0;
	КонецЕсли;
	
	СформироватьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПоСпособуРасчетаПродажа()
	
	Если НЕ ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		Возврат;
	КонецЕсли;
	
	// ПередачаСПолнойОплатой
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
		
		СуммаПлатежа = ОстатокКОплате;
		
		Элементы.Всего.Видимость = Истина;
		
		Если НЕ ПредоплатаАванс = 0 Тогда
			
			Элементы.ПредоплатаАванс.Видимость = Истина;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
				ЭтотОбъект,
				"СуммаПлатежа, ПредоплатаАванс, ГруппаРасчетыСКлиентом",
				"Видимость", Истина
			);
			
			ЗаблокироватьВводСуммаПлатежа();
		КонецЕсли;
		
		Элементы.ГруппаНаличныеСдача.Видимость = ЭтоНаличнаяОплата;
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ПолученоПлатежнаяКарта = СуммаПлатежа;
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
		Если ИспользуютсяРасчетыСКлиентами Тогда
			Элементы.ГруппаВариантОплатыТоваров.Видимость = Истина;
		КонецЕсли;
		
	// ПередачаСЧастичнойОплатой
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
		
		СуммаПлатежа = 0;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"Всего, ГруппаРасчетыСКлиентом, СуммаПлатежа, Постоплата",
			"Видимость", Истина
		);
		
		Элементы.ГруппаНаличныеСдача.Видимость = ЭтоНаличнаяОплата;
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		НастроитьОтображениеОстатка();
		
		Если НЕ ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте Тогда // без оплаты
			ЗаблокироватьВводСуммаПлатежа();
		КонецЕсли;
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
		Если ИспользуютсяРасчетыСКлиентами Тогда
			Элементы.ГруппаВариантОплатыТоваров.Видимость = Истина;
		КонецЕсли;
		
	// ПередачаБезОплаты
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"Всего, ГруппаРасчетыСКлиентом, СуммаПлатежа, Постоплата",
			"Видимость", Истина
		);
		
		ЗаблокироватьВводСуммаПлатежа();
		
		Если ИспользуютсяРасчетыСКлиентами Тогда
			Элементы.ГруппаВариантОплатыТоваров.Видимость = Истина;
		КонецЕсли;
		
	// Аванс
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ГруппаРасчетыСКлиентом, СуммаПлатежа",
			"Видимость", Истина
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ГруппаНаличныеСдача",
			"Видимость", ЭтоНаличнаяОплата
		);
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
	// ПредоплатаПолная ПредоплатаЧастичная
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"Всего, ГруппаРасчетыСКлиентом, СуммаПлатежа, ГруппаПредоплата",
			"Видимость", Истина
		);
		
		Элементы.ГруппаНаличныеСдача.Видимость = ЭтоНаличнаяОплата;
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		НастроитьОтображениеОстатка();
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
		
		ОстатокКОплате = ДолгКлиента;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"Всего, ГруппаРасчетыСКлиентом, СуммаПлатежа, ГруппаПредоплата",
			"Видимость", Истина
		);
		
		Элементы.ГруппаНаличныеСдача.Видимость = ЭтоНаличнаяОплата;
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		Элементы.ОстатокКОплате.Видимость = Истина;
		Элементы.Постоплата.Видимость = Истина;
		
		Элементы.ПолнаяПредоплата.Заголовок = НСтр("ru = 'остаток'");
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПоСпособуРасчетаВозврат()
	
	Если НЕ ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПодсказкиНаличные = "";
	ТекстПодсказкиПлатежнаяКарта = "";
	
	// ПередачаСПолнойОплатой
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
		
		ВстречноеПредоставление = ДолгКлиента;
		
		СуммаПлатежа = ОстатокКОплате - ВстречноеПредоставление;
		
		Элементы.Всего.Видимость = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ДолгКлиента, СуммаПлатежа, ГруппаРасчетыСКлиентом",
			"Видимость", ДолгКлиента > 0
		);
		
		ЗаблокироватьВводСуммаПлатежа();
		
		Элементы.ГруппаНаличныеСдача.Видимость = ЭтоНаличнаяОплата;
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ПолученоПлатежнаяКарта = СуммаПлатежа;
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
		Если НЕ ДоступнаяСуммаВозвратаНаличные = 0 И НЕ ДоступнаяСуммаВозвратаНаличные >= СуммаПлатежа Тогда
			ТекстПодсказкиНаличные = "Возврат наличными не больше "
			+ Формат(ДоступнаяСуммаВозвратаНаличные, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей());
		КонецЕсли;
	
		Если НЕ ДоступнаяСуммаВозвратаПлатежнаяКарта = 0 И НЕ ДоступнаяСуммаВозвратаПлатежнаяКарта >= СуммаПлатежа Тогда
			ТекстПодсказкиПлатежнаяКарта = "Возврат по карте не больше "
			+ Формат(ДоступнаяСуммаВозвратаПлатежнаяКарта, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей());
		КонецЕсли;
		
		// Аванс
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		
		Всего = - ДолгКлиента;
		ОстатокКОплате = Всего;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"Всего, СуммаПлатежа, ГруппаРасчетыСКлиентом, ГруппаПредоплата",
			"Видимость", Истина
		);
		
		Элементы.ГруппаНаличныеСдача.Видимость = ЭтоНаличнаяОплата;
		
		ДоступноБезСдачи = ЭтоНаличнаяОплата И НЕ ЭтоОплатаПоКарте;
		Элементы.ДобавитьБезСдачи.Видимость = ДоступноБезСдачи;
		
		Если Всего - ОстатокКОплате = 0 Тогда
			Элементы.ПолнаяПредоплата.Заголовок = НСтр("ru = 'полный возврат'");
		КонецЕсли;
		
		Если НЕ ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			ЗаблокироватьВводПоПлатежнойКарте();
		КонецЕсли;
		
		Если НЕ ДоступнаяСуммаВозвратаНаличные = 0 И НЕ ДоступнаяСуммаВозвратаНаличные >= Всего Тогда
			ТекстПодсказкиНаличные = "Возврат наличными не больше "
			+ Формат(ДоступнаяСуммаВозвратаНаличные, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей());
		КонецЕсли;
	
		Если НЕ ДоступнаяСуммаВозвратаПлатежнаяКарта = 0 И НЕ ДоступнаяСуммаВозвратаПлатежнаяКарта >= Всего Тогда
			ТекстПодсказкиПлатежнаяКарта = "Возврат по карте не больше "
			+ Формат(ДоступнаяСуммаВозвратаПлатежнаяКарта, ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей());
		КонецЕсли;
		
		// ПередачаСЧастичнойОплатой
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
		
		ВызватьИсключение НСтр("ru = 'Операция возврата ПередачаСЧастичнойОплатой не поддерживается'");
		
		// ПередачаБезОплаты
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
		
		ВызватьИсключение НСтр("ru = 'Операция возврата ПередачаБезОплаты не поддерживается'");
		
		// ПредоплатаПолная ПредоплатаЧастичная
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
		
		ВызватьИсключение НСтр("ru = 'Операция возврата ПредоплатаПолная/ПредоплатаЧастичная не поддерживается'");
		
		// Постоплата
	ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
		
		ВызватьИсключение НСтр("ru = 'Операция возврата ОплатаКредита не поддерживается'");
	КонецЕсли;
	
	ТекстПодсказки = ТекстПодсказкиНаличные
	+ ?(ПустаяСтрока(ТекстПодсказкиНаличные), "", Символы.ПС)
	+ ТекстПодсказкиПлатежнаяКарта;
	
	Элементы.ПодсказкаВозвратаОплаты.Заголовок = ТекстПодсказки;
	Элементы.ПодсказкаВозвратаОплаты.Видимость = НЕ ПустаяСтрока(ТекстПодсказки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОплатыПоПлатежнойКарте()
	
	ДанныеОплатыПоПлатежнойКарте = ВладелецФормы.ДанныеОплатыПоПлатежнойКарте();
	
	Если НЕ ДанныеОплатыПоПлатежнойКарте = Неопределено И ЗначениеЗаполнено(ДанныеОплатыПоПлатежнойКарте.НомерСсылкиОперации) Тогда
		
		ОплатаПоПлатежнойСистемеПроведена = Истина;
		
	Иначе
		ОплатаПоПлатежнойСистемеПроведена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСуммуПлатежа()
	
	Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		
		Если ПризнакСпособаРасчета =
			ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
			
			Если СуммаПлатежа >= ОстатокКОплате Тогда
				
				Если ПредоплатаАванс = 0 Тогда
					НадписьОшибкаСуммыПлатежа = НСтр("ru = 'только меньше суммы всего'");
				Иначе
					НадписьОшибкаСуммыПлатежа = НСтр("ru = 'только меньше остатка'");
				КонецЕсли;
				
				Элементы.ГруппаОшибкиСуммыПлатежа.Видимость = Истина;
				
			Иначе
				
				Элементы.ГруппаОшибкиСуммыПлатежа.Видимость = Ложь;
			КонецЕсли;
			
		ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")
			ИЛИ ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")
			ИЛИ ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
			
			Если СуммаПлатежа > ОстатокКОплате Тогда
				
				Если ПредоплатаАванс = 0 Тогда
					НадписьОшибкаСуммыПлатежа = НСтр("ru = 'не больше суммы всего'");
				Иначе
					НадписьОшибкаСуммыПлатежа = НСтр("ru = 'не больше остатка'");
				КонецЕсли;
				
				Элементы.ГруппаОшибкиСуммыПлатежа.Видимость = Истина;
				
			Иначе
				
				Элементы.ГруппаОшибкиСуммыПлатежа.Видимость = Ложь;
			КонецЕсли;
			
			
		КонецЕсли;
		
	Иначе // возврат
		
		Если СуммаПлатежа > ОстатокКОплате Тогда
			
			Если ПредоплатаАванс = 0 Тогда
				НадписьОшибкаСуммыПлатежа = НСтр("ru = 'не больше суммы всего'");
			Иначе
				НадписьОшибкаСуммыПлатежа = НСтр("ru = 'не больше остатка'");
			КонецЕсли;
			
			Элементы.ГруппаОшибкиСуммыПлатежа.Видимость = Истина;
			
		Иначе
			
			Элементы.ГруппаОшибкиСуммыПлатежа.Видимость = Ложь;
		КонецЕсли;
		
		Если ЭтоНаличнаяОплата И ЭтоОплатаПоКарте Тогда
			
			Если ДоступнаяСуммаВозвратаНаличные + ДоступнаяСуммаВозвратаПлатежнаяКарта = СуммаПлатежа Тогда
				
				ПолученоПлатежнаяКарта = ДоступнаяСуммаВозвратаПлатежнаяКарта;
				ПолученоНаличные = ДоступнаяСуммаВозвратаНаличные;
				
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ЭтоНаличнаяОплата Тогда
			
			Если ДоступнаяСуммаВозвратаНаличные >= СуммаПлатежа Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ЭтоОплатаПоКарте Тогда
			
			Если ДоступнаяСуммаВозвратаПлатежнаяКарта >= СуммаПлатежа Тогда
				
				ПолученоПлатежнаяКарта = СуммаПлатежа;
				
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьВводПоПлатежнойКарте()
	
	Элементы.ПолученоПлатежнаяКарта.ТолькоПросмотр = Истина;
	Элементы.ПолученоПлатежнаяКарта.КнопкаОчистки = Ложь;
	
	ОбщегоНазначения.СброситьЦветПолей(ЭтотОбъект, "ПолученоПлатежнаяКарта");
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьВводПоПлатежнойКарте()
	
	Элементы.ПолученоПлатежнаяКарта.ТолькоПросмотр = Ложь;
	Элементы.ПолученоПлатежнаяКарта.КнопкаОчистки = Истина;
	
	Элементы.ПолученоПлатежнаяКарта.ЦветТекста = WebЦвета.Зеленый;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьВводСуммаПлатежа()
	
	Элементы.СуммаПлатежа.ТолькоПросмотр = Истина;
	Элементы.СуммаПлатежа.КнопкаОчистки = Ложь;
	
	ОбщегоНазначения.СброситьЦветПолей(ЭтотОбъект, "СуммаПлатежа");
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьВводСуммаПлатежа()
	
	Элементы.СуммаПлатежа.ТолькоПросмотр = Ложь;
	Элементы.СуммаПлатежа.КнопкаОчистки = Истина;
	
	Элементы.СуммаПлатежа.ЦветТекста = WebЦвета.Зеленый;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеОстатка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		ЭтотОбъект,
		"ОстатокКОплате",
		"Видимость", НЕ (ПредоплатаАванс = 0) И НЕ ФормаОплаты = "БезОплаты"
	);
	
	Если НЕ ПредоплатаАванс = 0 Тогда
		Элементы.ПолнаяПредоплата.Заголовок = НСтр("ru = 'остаток'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидПоДаннымОплаты()
	
	Если НЕ ДанныеОплатыПоПлатежнойКарте = Неопределено И ЗначениеЗаполнено(ДанныеОплатыПоПлатежнойКарте.НомерСсылкиОперации) Тогда
		
		ОплатаПоПлатежнойСистемеПроведена = Истина;
		
		Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
			ОтобразитьОплатаЗавершенаУспешно();
			Элементы.ОтменитьОплату.Видимость = Истина;
		Иначе
			ОтобразитьВозвратОплатыУспешно();
		КонецЕсли;
		
		Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаПродолжениеПечати;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		РазблокироватьФорму();
		Возврат;
	КонецЕсли;
	
	ОтобразитьСтраницуПроцесса();
	ПодключитьОбработчикОжидания("Подключаемый_ОтменитьОплатуПоПлатежнойСистеме", 0.1, Истина);
	
КонецПроцедуры

#Область ОтображениеСтраниц

&НаКлиенте
Процедура ОтобразитьСтраницуПроцесса()
	
	Элементы.СтраницыПлатежнаяСистема.ТекущаяСтраница = Элементы.СтраницаОплатаПроцесс;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОплатаЗавершенаУспешно()
	
	Элементы.СтраницыПлатежнаяСистема.ТекущаяСтраница = Элементы.СтраницаОплатаУспешно;
	Элементы.ПолученоПлатежнаяКарта.ТолькоПросмотр = Истина;
	ПолученоПлатежнаяКартаЗаблокировано = Истина;
	
	Элементы.ОтменитьОплату.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОтменаОплатыЗавершенаУспешно()
	
	Элементы.СтраницыПлатежнаяСистема.ТекущаяСтраница = Элементы.СтраницаОтменаОплатыУспешно;
	Элементы.ПолученоПлатежнаяКарта.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкаОперации()
	
	Элементы.СтраницыПлатежнаяСистема.ТекущаяСтраница = Элементы.СтраницаОперацияОшибка;
	
	РазблокироватьФорму();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВозвратОплатыУспешно()
	
	Элементы.СтраницыПлатежнаяСистема.ТекущаяСтраница = Элементы.СтраницаВозвратОплатыУспешно;
	Элементы.ПолученоПлатежнаяКарта.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПечатьЧека()
	
	Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаПечать;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПечатьСлипЧека()
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		
		Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаПечатьСлип;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуПечатиЧека(ОписаниеОшибки)
	
	ОшибкаПечати = ОписаниеОшибки;
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаОшибка;
	КонецЕсли;
	
	РазблокироватьФорму();
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие("Чек.Оплата", "Ошибка печати чека - " + ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкуПечатиСлипЧека(ОписаниеОшибки)
	
	ОшибкаПечати = ОписаниеОшибки;
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаОшибкаСлип;
	КонецЕсли;
	
	Элементы.ОтменитьОплату.Видимость = Истина;
	РазблокироватьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПустуюСтраницуПечатиЧека()
	
	Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаПустая;
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПроцесс;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПробитьЧекВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		РазблокироватьФорму();
		Возврат;
	КонецЕсли;
	
	ОтобразитьПечатьЧека();
	ПодключитьОбработчикОжидания("Подключаемый_ПробитьЧек", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРаспечататьСлипЧек()
	
	ОтобразитьПечатьСлипЧека();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьРаспечататьСлипЧек", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРаспечататьСлипЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыполняемаяОперацияПлатежнойСистемы = "ОтменаОплаты" Тогда
		ОтобразитьПечатьЧека();
		ПодключитьОбработчикОжидания("Подключаемый_ПробитьЧек", 0.1, Истина);
	Иначе
		РазблокироватьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	ОборудованиеПлатежнойСистемы = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПлатежнойСистемы();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СтраницыПлатежнаяСистема",
		"Видимость",
		ЗначениеЗаполнено(ОборудованиеПлатежнойСистемы)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаОтправка",
		"Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяККТ() И НЕ ЭтоЧекКоррекции
	);
	
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект, "Всего");
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаПробитьЧек", "ПробитьЧек", 2);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовок()
	
	Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
			
			Заголовок = НСтр("ru = 'Продажа: '") + Заголовок;
			
		ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита Тогда
			
			Заголовок = НСтр("ru = 'Постоплата: '") + Заголовок;
			
		ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
			
			Заголовок = НСтр("ru = 'Предоплата: '") + Заголовок;
			
		ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой Тогда
			
			Заголовок = НСтр("ru = 'Продажа: '") + Заголовок;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда
			
			Заголовок = НСтр("ru = 'Возврат: '") + Заголовок;
			
		ИначеЕсли ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
			
			Заголовок = НСтр("ru = 'Возврат оплаты: '") + Заголовок;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучено(ТипОплаты = "Наличные")
	
	Если ТипОплаты = "ПлатежнаяКарта" Тогда
		
		Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
			Если ПолученоПлатежнаяКарта >= ДоступнаяСуммаВозвратаПлатежнаяКарта Тогда
				ПолученоПлатежнаяКарта = ДоступнаяСуммаВозвратаПлатежнаяКарта;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолученоПлатежнаяКарта) И НЕ ЗначениеЗаполнено(ПолученоНаличные) Тогда
			ПолученоНаличные = СуммаПлатежа - ПолученоПлатежнаяКарта;
			
		КонецЕсли;
		
		Если ПолученоПлатежнаяКарта >= СуммаПлатежа Тогда
			ПолученоПлатежнаяКарта = СуммаПлатежа;
			ПолученоНаличные = 0;
		КонецЕсли;
		
	Иначе // Наличные
		
		Если ЭтоОплатаПоКарте И НЕ ПолученоПлатежнаяКартаЗаблокировано Тогда
			
			Если ЗначениеЗаполнено(ПолученоНаличные) Тогда
				
				Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
					ПолученоПлатежнаяКарта = СуммаПлатежа - ПолученоНаличные;
				
				Иначе
					
					ПолученоПлатежнаяКарта = СуммаПлатежа - (Мин(ПолученоНаличные, ДоступнаяСуммаВозвратаНаличные));
					
					Если ПолученоПлатежнаяКарта > ДоступнаяСуммаВозвратаПлатежнаяКарта Тогда
						ПолученоПлатежнаяКарта = ДоступнаяСуммаВозвратаПлатежнаяКарта;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолученоНаличные = 0 Тогда
		
		Сдача = 0;
		
	Иначе
		
		
		Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа() Тогда
			
			Сдача = ПолученоНаличные - (СуммаПлатежа - ПолученоПлатежнаяКарта);
			
		Иначе
			
			Сдача = ПолученоНаличные - Мин(СуммаПлатежа- ПолученоПлатежнаяКарта, ДоступнаяСуммаВозвратаНаличные);
		КонецЕсли;
		
	КонецЕсли;
	
	Постоплата = Всего - СуммаПлатежа - ПредоплатаАванс - ВстречноеПредоставление;
	Если Постоплата < 0 Тогда
		Постоплата = 0;
	КонецЕсли;
	
	УстановитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПризнакиСпособаРасчетаПередачиТоваров()
	
	ВариантОплатыТоваров = "Продажа";
	
	Если НЕ (ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа()
		И ИспользуютсяРасчетыСКлиентами) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой
		ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты Тогда
		
		Если ФормаОплаты = "БезОплаты" Тогда
			
			Если ПредоплатаАванс = 0 Тогда
				
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
				ВариантОплатыТоваров = "Рассрочка";
				
			ИначеЕсли ПредоплатаАванс > 0 И ОстатокКОплате > 0 Тогда
				
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
				ВариантОплатыТоваров = "Рассрочка";
				
			ИначеЕсли ОстатокКОплате = 0 Тогда
				
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
				ВариантОплатыТоваров = "Продажа";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПробитьЧек()
	
	Если ФормаОплаты = "БезОплаты" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ПробитьЧек",
			"Доступность",
			Истина
		);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПризнакСпособаРасчета
			= ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ПробитьЧек",
			"Доступность",
			(СуммаПлатежа > 0 И (ПолученоНаличные - Сдача + ПолученоПлатежнаяКарта) >= СуммаПлатежа)
			ИЛИ (ПредоплатаАванс > 0 И ОстатокКОплате = 0)
		);
		
	ИначеЕсли ПризнакСпособаРасчета
				= ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс") Тогда
		
		УсловиеВозврата = Истина;
		
		Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
			УсловиеВозврата = НЕ (СуммаПлатежа > ОстатокКОплате);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ПробитьЧек",
			"Доступность",
			УсловиеВозврата
			И СуммаПлатежа > 0
			И (ПолученоНаличные - Сдача + ПолученоПлатежнаяКарта) >= СуммаПлатежа
		);
		
		
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")
		ИЛИ ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")
		ИЛИ ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ПробитьЧек",
			"Доступность",
			СуммаПлатежа > 0
			И НЕ СуммаПлатежа > Всего
			И (ПолученоНаличные - Сдача + ПолученоПлатежнаяКарта) >= СуммаПлатежа
		);
		
	ИначеЕсли ПризнакСпособаРасчета =
		ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ПробитьЧек",
			"Доступность",
			СуммаПлатежа > 0
			И НЕ СуммаПлатежа >= Всего
			И (ПолученоНаличные - Сдача + ПолученоПлатежнаяКарта) >= СуммаПлатежа
		);
		
	ИначеЕсли ПризнакСпособаРасчета =
		ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
			ЭтотОбъект,
			"ПробитьЧек",
			"Доступность",
			Истина
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеПолейФормы()
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект,
		"Всего,
		|ПолученоНаличные,
		|ПолученоПлатежнаяКарта,
		|СуммаПлатежа,
		|Сдача,
		|ОстатокКОплате,
		|ПредоплатаАванс,
		|ДолгКлиента,
		|Постоплата"
	);
	
	ОбщегоНазначения.УстановитьЦветИтоговыхПолей(ЭтотОбъект,
		"Всего, Сдача"
	);
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект,
		"ВидОплаты"
	);
	
	ОбщегоНазначения.УстановитьЦветПолейУспешныхОпераций(ЭтотОбъект,
		"НадписьУспешно, НадписьОтменаУспешно, НадписьВозвратУспешно"
	);
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтотОбъект,
		"НадписьОшибка, НадписьОшибкаПечати, НадписьОшибкаПечатиСлип"
	);
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтотОбъект,
		"НадписьОшибка, НадписьОшибкаПечати, НадписьОшибкаПечатиСлип"
	);
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект,
		"ПодсказкаВозвратаОплаты"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьФорму()
	
	ДоступноЗакрытиеФормы = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ПробитьЧек, Отмена", "Доступность",
		Ложь
	);

КонецПроцедуры

&НаСервере
Процедура РазблокироватьФорму()
	
	ДоступноЗакрытиеФормы = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ПробитьЧек, Отмена", "Доступность",
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаАдресаРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровДляПечати.ОбщиеПараметры.АдресРасчета = Результат.АдресРасчета;
	СтруктураПараметровДляПечати.ОбщиеПараметры.МестоРасчета = Результат.МестоРасчета;
	
КонецПроцедуры

#Область НомерТелефонаИEmail

&НаКлиенте
Процедура ПослеВводаНомераТелефонаEmail(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	АдресEmail = Результат.АдресEmail;
	НомерТелефона = Результат.НомерТелефона;
	
	НастроитьВидимостьКартинокSMSиEmail();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКартинокSMSиEmail()
	
	Элементы.ДекорацияSMS.Видимость = ЗначениеЗаполнено(НомерТелефона);
	Элементы.ДекорацияEmail.Видимость = ЗначениеЗаполнено(АдресEmail);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаНомераТелефонаИEmail()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресEmail",    АдресEmail);
	ПараметрыФормы.Вставить("НомерТелефона", НомерТелефона);
	
	ПараметрыФормы.Вставить("АдресEmailСвязанныхДокументов", Новый Массив);
	ПараметрыФормы.Вставить("НомерТелефонаСвязанныхДокументов", Новый Массив);
	
	Если ВидОперации = ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат() Тогда
		
		РеквизитыЧекаПродажи = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ЧекПродажи, "АдресEmailПокупателя, НомерТелефонаПокупателя");
		
		АдресEmailПокупателя = РеквизитыЧекаПродажи.АдресEmailПокупателя;
		Если ЗначениеЗаполнено(АдресEmailПокупателя) Тогда
			ПараметрыФормы.АдресEmailСвязанныхДокументов.Добавить(АдресEmailПокупателя);
		КонецЕсли;
		
		НомерТелефонаПокупателя = РеквизитыЧекаПродажи.НомерТелефонаПокупателя;
		Если ЗначениеЗаполнено(НомерТелефонаПокупателя) Тогда
			ПараметрыФормы.НомерТелефонаСвязанныхДокументов.Добавить(НомерТелефонаПокупателя);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		РеквизитыЗаказа = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(Заказ, "АдресЭлектроннойПочты, Телефон");
		
		АдресEmailПокупателя = РеквизитыЗаказа.АдресЭлектроннойПочты;
		Если ЗначениеЗаполнено(АдресEmailПокупателя) Тогда
			ПараметрыФормы.АдресEmailСвязанныхДокументов.Добавить(АдресEmailПокупателя);
		КонецЕсли;
		
		НомерТелефонаПокупателя = РеквизитыЗаказа.Телефон;
		Если ЗначениеЗаполнено(НомерТелефонаПокупателя) Тогда
			ПараметрыФормы.НомерТелефонаСвязанныхДокументов.Добавить(НомерТелефонаПокупателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаНомераТелефонаEmail", ЭтотОбъект);
	
	ОткрытьФорму("Документ.Чек.Форма.ВводНомераТелефонаИEmail", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		ОписаниеОповещения
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры


#КонецОбласти


