
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	НастроитьПоляФормы();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "ПродолжитьБезИзъятия, Описание, ГруппаОстатокВКассе, ГруппаМинимальнаяСуммаИзъятия, МаксимальнаяСуммаОстатка",
		"Видимость", Ложь);
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Отмена, СохранитьИЗакрыть", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Сумма", "ТолькоПросмотр", Истина);
		Сумма = Объект.Сумма;
		Возврат;
		
	КонецЕсли;
	
	Объект.КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
	
	Если Параметры.ВидДвижения = "Внесение" Тогда
		
		Объект.ВидДвиженияНаличных = Перечисления.ВидыДвиженияДС.Внесение;
		Заголовок = НСтр("ru = 'Внесение наличных'");
		Элементы.СохранитьИЗакрыть.Заголовок = НСтр("ru = 'Внести'");
		
	ИначеЕсли Параметры.ВидДвижения = "Изъятие" Тогда
		
		Объект.ВидДвиженияНаличных = Перечисления.ВидыДвиженияДС.Изъятие;
		Заголовок = НСтр("ru = 'Изъятие наличных'");
		Элементы.СохранитьИЗакрыть.Заголовок = НСтр("ru = 'Изъять'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "ГруппаОстатокВКассе", "Видимость", Истина);
		
		Если Параметры.Свойство("ТипВыемки") Тогда
			
			Если НЕ ЗначениеЗаполнено(Параметры.ТипВыемки) Тогда //полная выемка
				
				Параметры.Свойство("ОстатокНаличныхВКассе", Сумма);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "ГруппаОстатокВКассе", "Видимость", Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Сумма", "ТолькоПросмотр", Истина);
				
				ТекстОписания = НСтр("ru = 'Перед закрытием смены необходимо изъять всю сумму наличных в кассе'");
				Описание = ТекстОписания;
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Описание", "Видимость", Истина);
				
			ИначеЕсли Параметры.ТипВыемки = Перечисления.ТипыВыемки.НеполнаяВыемка Тогда
				
				Параметры.Свойство("ОстатокНаличныхВКассе", ОстатокВКассе);
				
				МаксимальнаяСуммаОстатка = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("СуммаОстаткаВКассе");
				МинимальнаяСуммаИзъятия = ОстатокВКассе - МаксимальнаяСуммаОстатка;
				
				Элементы.Сумма.МинимальноеЗначение  = МинимальнаяСуммаИзъятия;
				Элементы.Сумма.МаксимальноеЗначение = ОстатокВКассе;
				
				Если НЕ ЗначениеЗаполнено(МинимальнаяСуммаИзъятия) Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "ПродолжитьБезИзъятия", "Видимость", Истина);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "МаксимальнаяСуммаОстатка, ГруппаМинимальнаяСуммаИзъятия", "Видимость", Истина);
				
				ТекстОписания = НСтр("ru = 'Перед закрытием смены необходимо изъять наличные из кассы'");
				Описание = ТекстОписания;
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Описание", "Видимость", Истина);
				
			КонецЕсли;
			
		Иначе
			
			ОстатокВКассе = ПродажиВызовСервера.ПолучитьОстатокНаличныхВКассе();
			Элементы.Сумма.МаксимальноеЗначение = ОстатокВКассе;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьСохранитьИЗакрыть();
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Сумма;
	
	#Если МобильноеПриложениеКлиент Тогда
		НачатьРедактированиеЭлемента();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	УстановитьДоступностьСохранитьИЗакрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	Объект.Сумма = Сумма;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "СохранитьИЗакрыть, Отмена", "Доступность", Ложь);
	
	ОтобразитьПечатьЧека();
	ПодключитьОбработчикОжидания("Подключаемый_ПробитьЧек", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВСумму(Команда)
	
	Сумма = ОстатокВКассе;
	УстановитьДоступностьСохранитьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура МинимальнуюСуммуИзъятияВСумму(Команда)
	
	Сумма = МинимальнаяСуммаИзъятия;
	УстановитьДоступностьСохранитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезИзъятия(Команда)
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Успешно", Истина);
	ЭтаФорма.Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьСохранитьИЗакрыть()
	
	Элементы.СохранитьИЗакрыть.Доступность = ЗначениеЗаполнено(Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПробитьЧек()
	
	Успешно = Ложь;
	ЕстьОшибки = Ложь;
	
	Внесение = Объект.ВидДвиженияНаличных = ПредопределенноеЗначение("Перечисление.ВидыДвиженияДС.Внесение");
	Если НЕ Внесение Тогда
		ПроверитьВозможностьВыемкиДС(ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяККТ() Тогда
		
		Если ЗначениеЗаполнено(Объект.КассоваяСмена) Тогда
			
			ПробитьЧекПродолжение();
			
		Иначе
			
			ОписаниеПослеОткрытиеСмены = Новый ОписаниеОповещения("ПослеОткрытиеСмены", ЭтотОбъект);
			ПродажиКлиент.ОткрытьСмену(ЭтаФорма, ОписаниеПослеОткрытиеСмены);
			
		КонецЕсли;
		
	Иначе
		
		ПробитьЧекПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПродолжение()
	
	Внесение = Объект.ВидДвиженияНаличных = ПредопределенноеЗначение("Перечисление.ВидыДвиженияДС.Внесение");
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		
		ОчиститьСообщения();
		
		ТекстОшибки = "";
		
		Успешно = ПродажиКлиент.ВыполнитьВнесениеВыемку(Внесение, Объект.Сумма, ТекстОшибки);
		
		Если НЕ Успешно Тогда
			
			ОтобразитьОшибкуПечатиЧека(ТекстОшибки);
		КонецЕсли;
		
	Иначе
		Успешно = Истина;
	КонецЕсли;
	
	Если НЕ Успешно Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "СохранитьИЗакрыть, Отмена", "Доступность", Истина);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КассоваяСмена) Тогда
		Объект.КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Истина);
		Оповестить("ИзмененаКассоваяСмена");
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Успешно", Успешно);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	ЭтаФорма.Записать(ПараметрыЗаписи);
	Оповестить("КассоваяОперация");
	
	ПомощникUIКлиент.ПоказатьСообщение(НСтр("ru = 'Чек пробит'"));
	ЭтаФорма.Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытиеСмены(Результат, ДополнительныеПараметры) Экспорт
	
	КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
	
	Если ЗначениеЗаполнено(КассоваяСмена) Тогда
		ПробитьЧекПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьВыемкиДС(Отказ)
	
	Сообщение = "";
	Продажи.ПроверитьВозможностьВыемкиДС(Объект.Сумма, Отказ, Сообщение);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаГотово", "СохранитьИЗакрыть", 2);
КонецПроцедуры

&НаСервере
Процедура НастроитьПоляФормы()
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтаФорма, "Сумма, ОстатокВКассе, МинимальнаяСуммаИзъятия, МаксимальнаяСуммаОстатка");
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтаФорма, "Описание");
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтаФорма,
		"НадписьОшибкаПечати"
	);

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПечатьЧека()
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		
		Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаПечать;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуПечатиЧека(ОписаниеОшибки)
	
	ТекстОшибки = ОписаниеОшибки;
	Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаОшибка;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти
