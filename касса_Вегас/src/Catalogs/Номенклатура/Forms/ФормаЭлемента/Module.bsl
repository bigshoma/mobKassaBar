#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ПолученныйШтрихкод) Тогда
		
		Штрихкод = ПолученныйШтрихкод;
		СписокШтрихкодов.Добавить(Штрихкод, Штрихкод);
		
		Модифицированность = Истина;
		ШтрихкодыИзменены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект, "Цена");
	
	НастроитьФормуПоЗначениямНастроек();
	
	Если Параметры.Свойство("ДобавлениеШтрихкодаВПрайсЛист") Тогда
		
		СписокШтрихкодов.Добавить(Параметры.Штрихкод, Параметры.Штрихкод);
		
		ШтрихкодыИзменены = Истина;
		Модифицированность = Истина;
		ДобавлениеШтрихкодаВПрайсЛист = Истина;
		
	ИначеЕсли Параметры.Свойство("Штрихкод") И ЗначениеЗаполнено(Параметры.Штрихкод) Тогда
		
		СписокШтрихкодов.Добавить(Параметры.Штрихкод, Параметры.Штрихкод);
		ШтрихкодыИзменены = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.ЕдиницаИзмерения = ОбщегоНазначенияПовтИсп.ПолучитьЕдиницуИзмерения("шт");
	КонецЕсли;
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
	УстановитьДоступностьРеквизитовАлкогольнойПродукции();
	
	ЗаполнитьСписокСтавокНДС();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьШтрихкоды(ТекущийОбъект.Ссылка, СписокШтрихкодов);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьИспользуютсяШтрихкоды = Ложь;
	
	Если ШтрихкодыИзменены Тогда
		
		НачатьТранзакцию();
		
		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(ТекущийОбъект.Ссылка);
		
		Для Каждого Штрихкод Из СписокШтрихкодов Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Номенклатура = ТекущийОбъект.Ссылка;
			Запись.Штрихкод = Штрихкод;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ИспользуютсяШтрихкоды = НЕ РезультатЗапроса.Пустой();
		
		Если НЕ ИспользуютсяШтрихкоды = ЗначениеНастроекПовтИсп.ИспользуютсяШтрихкоды() Тогда
			ОбновитьИспользуютсяШтрихкоды = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Избранное = ЗначениеНастроекПовтИсп.ИспользуютсяИзбранныеТовары() ИЛИ ОбновитьИспользуютсяШтрихкоды Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ОповеститьОбИзмененииЗначенийНастроек = Истина;
	КонецЕсли;
	
	Если ЗначениеНастроекВызовСервераПовтИсп.ПрайсЛистПуст() Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОповеститьОбИзмененииЗначенийНастроек Тогда
		Оповестить("ИзмененыЗначенияНастроек");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеФормы()
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.Наименование, НСтр("ru = 'Наименование'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПризнакПредметаРасчета) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.ПризнакПредметаРасчета, НСтр("ru = 'Предмет расчета'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.ЕдиницаИзмерения, НСтр("ru = 'Единица измерения'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	
	Если НЕ Объект.АлкогольнаяПродукция Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидАлкогольнойПродукции) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.ВидАлкогольнойПродукции, НСтр("ru = 'Вид'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъемАлкогольнойПродукции) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.ОбъемАлкогольнойПродукции, НСтр("ru = 'Объем (литр)'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьОтображениеИзбранное();
	
	#Если МобильноеПриложениеКлиент Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТекущийЭлемент = Элементы.Наименование;
			НачатьРедактированиеЭлемента();
			
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СканироватьШтрихкод(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнениеФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	Закрыть(Объект.Ссылка);
	
	Оповестить("ЗаписанТовар", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзПрайсЛиста(Команда)
	
	ТекстВопроса =  НСтр("ru = 'Пометить на удаление?
		|Товар будет скрыт из прайс-листа.'");
	
	Оповещение = Новый ОписаниеОповещения("УдалитьИзПрайсЛистаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуНаУдаление(Команда)
	
	ТекстВопроса =  НСтр("ru = 'Снять пометку на удаление?
		|Товар будет отображаться в прайс-листе.'");
	
	Оповещение = Новый ОписаниеОповещения("СнятьПометкуНаУдалениеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЭтикеткуЦенник(Команда)
	
	Если НЕ ПроверитьЗаполнениеФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.Сервис.Форма.ПечатьЭтикетокЦенников", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное(Команда)
	
	Объект.Избранное = Истина;
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	НастроитьОтображениеИзбранное();
	
	ПомощникUIКлиент.ПоказатьСообщение(НСтр("ru = 'Товар добавлен в избранное'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзИзбранного(Команда)
	
	Объект.Избранное = Ложь;
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() Тогда
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	НастроитьОтображениеИзбранное();
	
	ПомощникUIКлиент.ПоказатьСообщение(НСтр("ru = 'Товар удален из избранного'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СписокШтрихкодовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеРедактированияШтрихкодов", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокШтрихкодов", СписокШтрихкодов);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.Штрихкоды", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияПриИзменении(Элемент)
	
	УстановитьДоступностьРеквизитовАлкогольнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАлкогольнойПродукцииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидАлкогольнойПродукции) Тогда
		
		Объект.МаркируемаяАлкогольнаяПродукция = 
			ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидАлкогольнойПродукции, "Маркируемый");
		
	Иначе
		
		Объект.МаркируемаяАлкогольнаяПродукция = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокСтавокНДС()

	// +МИТ	
	Элементы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС, НСтр("ru = 'Без НДС'"));
	// -МИТ
	Если ЗначениеЗаполнено(Объект.СтавкаНДС) 
		И Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		
		Ставка_18_20 = Перечисления.СтавкиНДС.НДС20;
		
	Иначе
		Ставка_18_20 = Перечисления.СтавкиНДС.НДС18;
	КонецЕсли;
	
	Если ЦенообразованиеКлиентСервер.ПрименяетсяСтавкаНДС20() Тогда
		Элементы.СтавкаНДС.СписокВыбора.Добавить(Ставка_18_20, НСтр("ru = '20%'"));
	Иначе
		Элементы.СтавкаНДС.СписокВыбора.Добавить(Ставка_18_20, НСтр("ru = '18%'"));
	КонецЕсли;
	
	Элементы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10, НСтр("ru = '10%'"));
	Элементы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС0,  НСтр("ru = '0%'"));
	//Элементы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС, НСтр("ru = 'Без НДС'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзПрайсЛистаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ПометкаУдаления = Истина;
		Записать();
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуНаУдалениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ПометкаУдаления = Ложь;
		Записать();
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьШтрихкоды(Ссылка, СписокШтрихкодов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Номенклатура = &Номенклатура
	|";
	
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Штрихкоды = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Штрихкод");
		СписокШтрихкодов.ЗагрузитьЗначения(Штрихкоды);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРедактированияШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СписокШтрихкодов.ЗагрузитьЗначения(Результат.ВыгрузитьЗначения());
	ШтрихкодыИзменены = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект, "Цена");
	
	СписокТолькоПросмотр = "Наименование, ЕдиницаИзмерения, СтавкаНДС,
		|Артикул, ТипМаркировки, Родитель, Цена, ПризнакПредметаРасчета";
	
	СписокВидимость = "СканироватьШтрихкод, Готово";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокТолькоПросмотр, "ТолькоПросмотр",
		НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокВидимость, "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СканироватьШтрихкод", "Видимость",
		Элементы.СканироватьШтрихкод.Видимость И
		ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования()) 
		И НЕ ИспользуетсяАсинхронныйСканер);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаАлкогольнаяПродукция", "Видимость",
		ЗначениеНастроекПовтИсп.ИспользуетсяАлкогольнаяПродукция() И ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаАлкогольныеРеквизиты", "ТолькоПросмотр",
		НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "УдалитьИзПрайсЛиста", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() И ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.ПометкаУдаления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СнятьПометкуНаУдаление", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() И Объект.ПометкаУдаления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "РаспечататьЭтикеткуЦенник", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ПечататьЭтикеткиЦенники());
		
	ОбщегоНазначения.УстановитьВысотуПоляНаименованиеТовара(ЭтотОбъект, , "Наименование");
	
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость",
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовАлкогольнойПродукции()
	
	Если Объект.АлкогольнаяПродукция Тогда
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.ТипМаркировки.Видимость = Ложь;
		
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
		Элементы.ТипМаркировки.Видимость = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СтраницаАлкоголь", "Видимость",
		Объект.АлкогольнаяПродукция И ЗначениеНастроекПовтИсп.ИспользуетсяАлкогольнаяПродукция()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеИзбранное()
	
	Если Объект.Избранное Тогда
		
		Элементы.ДобавитьВИзбранное.Видимость = Ложь;
		Элементы.УдалитьИзИзбранного.Видимость = Истина;
	Иначе
		
		Элементы.ДобавитьВИзбранное.Видимость = Истина;
		Элементы.УдалитьИзИзбранного.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти




