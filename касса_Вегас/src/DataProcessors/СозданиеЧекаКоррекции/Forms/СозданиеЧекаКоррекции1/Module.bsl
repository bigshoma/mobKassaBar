
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры) Экспорт
	
	ВводитьАкцизныеМарки = Ложь;
	ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(НоменклатураПоШтрихкоду, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		ПараметрыЧека.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПробитияЧека", ЭтотОбъект);
		
		ЗаполнитьПараметрыКонструктораЧека(ПараметрыЧека);
		
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(НоменклатураПоШтрихкоду);
		
		ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = МассивНоменклатуры;
		ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
	Иначе
		
		ПулТоваров.Добавить(НоменклатураПоШтрихкоду);
		
		Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
			ДополнительныеПараметры.ВременноеЗакрытиеДиалога = Ложь;
			ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПотоковоеСканирование") И ПулТоваров.Количество() > 0 Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		ПараметрыЧека.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПробитияЧека", ЭтотОбъект);
		
		ЗаполнитьПараметрыКонструктораЧека(ПараметрыЧека);
		
		ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = ПулТоваров.ВыгрузитьЗначения();
		ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
		ПулТоваров.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АдресМарокЧекаВХранилище() Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(АкцизныеМарки.ВыгрузитьЗначения(), УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(
		ЭтотОбъект, 
		"ДекорацияПодсказка, ДекорацияПодсказкаСторно"
	);
	
	ЧекСОшибкой 		= Параметры.ЧекСОшибкой;
	ДатаКоррекции 		= Параметры.ДатаКоррекции;
	ОписаниеКоррекции 	= Параметры.ОписаниеКоррекции;
	ОснованиеКоррекции 	= Параметры.ОснованиеКоррекции;
	ТипКоррекции 		= Параметры.ТипКоррекции;
	ФискальныйПризнак 	= Параметры.ФискальныйПризнак;
	
	НастроитьФормуПоЗначениямНастроек();
	
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	ПриИзмененииПараметровЭкранаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Успешно Тогда
		Оповестить("ЗакрытьСозданиеЧекаКоррекции", ЧекСОшибкой);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТоваров(Команда)
	
	ОткрытьПодборТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	Если ПродажиВызовСервера.ПроверитьВозможностьВводаЧека() Тогда
		ОчиститьСообщения();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
		
		ОбработчикЗакрытияСканирования = Новый ОписаниеОповещения("ОбработкаЗакрытияСканирования", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
		
		ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОсновнию(Команда)
	
	ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
	ПараметрыЧека.Основание.ЗаполнитьТоварыПоЧекуОснованию = Истина;
	ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
	ПараметрыЧека.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПробитияЧека", ЭтотОбъект);
	
	ЗаполнитьПараметрыКонструктораЧека(ПараметрыЧека);
	
	ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьСторнирующийЧек(Команда)
	
	ПробитьЧекаСторно();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПодборТоваров()
	
	ПараметрыФормыПодбора = Новый Структура;
	ПараметрыФормыПодбора.Вставить("ЭтоЧекКоррекции", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПодборТоваров", ЭтотОбъект);
	ПродажиКлиент.ОткрытьПодборТоваров(ЭтотОбъект, Оповещение, ПараметрыФормыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПробитияЧека(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧекСОшибкой) Тогда
		
		ПробитьЧекаСторно();
	Иначе
		
		ОтобразитьСтраницуУспешно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтраницуУспешно()
	
	Успешно = Истина;
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУспех;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекаСторно()
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПробитиеЧекаСторно;
	Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаПечать;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПробитьЧекаСторно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПробитьЧекаСторно()
	
	ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
	
	ПараметрыЧека.Основание.ЗаполнитьТоварыПоЧекуОснованию = Истина;
	ПараметрыЧека.Основание.ЗаполнитьОплатыПоЧекуОснованию = Истина;
	ПараметрыЧека.Основание.ЭтоВозврат = Истина;
	
	ЗаполнитьПараметрыКонструктораЧека(ПараметрыЧека);
	
	РезультатПечати = ПродажиКлиент.РезультатПечатиЧека();
	
	ПродажиКлиент.СформироватьЧекПрограммно(ПараметрыЧека, УникальныйИдентификатор, СсылкаНаЧекСторно, РезультатПечати);
	
	Если РезультатПечати.Успешно Тогда
		
		ЗаписатьПробитыйЧек(СсылкаНаЧекСторно, РезультатПечати);
		
		ПомощникUIКлиент.ПоказатьСообщение(НСтр("ru = 'Чек пробит'"));
		
		Оповестить("ЗаписанЧек", СсылкаНаЧекСторно);
		
		ОтобразитьСтраницуУспешно();
		
	Иначе
		
		Элементы.СтраницыПечатьЧека.ТекущаяСтраница = Элементы.СтраницаПечатьЧекаОшибка;
		ОшибкаПечати = РезультатПечати.ОписаниеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		ПараметрыЧека.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеПробитияЧека", ЭтотОбъект);
		
		ЗаполнитьПараметрыКонструктораЧека(ПараметрыЧека);
		
		ПараметрыЧека.ПараметрыФормы.СозданиеИзПодбора = Истина;
		ПараметрыЧека.ПараметрыФормы.АдресВоВременномХранилище = Результат.АдресВоВременномХранилище;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыКонструктораЧека(ПараметрыЧека)
	
	ПараметрыЧека.Основание.ЭтоЧекКоррекции   = Истина;
	ПараметрыЧека.Основание.ДатаКоррекции     = ДатаКоррекции;
	ПараметрыЧека.Основание.ОписаниеКоррекции = ОписаниеКоррекции;
	ПараметрыЧека.Основание.НомерПредписания  = ОснованиеКоррекции;
	ПараметрыЧека.Основание.ТипКоррекции      = ТипКоррекции;
	
	Если ЗначениеЗаполнено(ЧекСОшибкой) Тогда
		
		ПараметрыЧека.Основание.ЧекОснование = ЧекСОшибкой;
		ПараметрыЧека.Основание.ФискальныйПризнак = ФискальныйПризнак;
		ПараметрыЧека.Основание.НеприменениеККТ = Ложь;
		
	Иначе
		ПараметрыЧека.Основание.НеприменениеККТ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПробитыйЧек(СсылкаНаЧекСторно, РезультатПечати)
	
	ЧекСторно = СсылкаНаЧекСторно.ПолучитьОбъект();
	ЧекСторно.СтатусЧека = Перечисления.СтатусыЧеков.Пробит;
	ЧекСторно.ФискальныйНомер = РезультатПечати.НомерЧека;
	ЧекСторно.ФискальныйПризнак = РезультатПечати.ФискальныйПризнак;
	ЧекСторно.КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену();
	
	ЧекСторно.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ЧекСОшибкой) Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаЧекСОшибкой;
	Иначе
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаНеприменениеККТ;
	КонецЕсли;
	
	Элементы.ГруппаЧекСОшибкой.Видимость = ЗначениеЗаполнено(ЧекСОшибкой);
	Элементы.СтраницыЗаполнитьПоОсновнию.Видимость = ЗначениеЗаполнено(ЧекСОшибкой);
	
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаЗаполнитьПоОсновнию", "ЗаполнитьПоОсновнию", 2);
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаГотово", "Готово", 2);
	
	Элементы.КомандаПодборТоваровЧекСОшибкой.ЦветРамки = ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово();
	
	Элементы.КомандаСканированиеШтрихкодаЧекСОшибкой.ЦветРамки =
		ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово();
	
	Если ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров()
		И НЕ ИспользуетсяАсинхронныйСканер Тогда
		
		Если ЗначениеЗаполнено(ЧекСОшибкой) Тогда
			
			
		Иначе
			Элементы.ГруппаПодборТоваров.Видимость = Ложь;
			
			Элементы.КомандаПодборТоваров.ЦветФона = ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово();
			
			Элементы.КомандаСканированиеШтрихкода.ЦветФона =
				ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово();
				
		КонецЕсли;
		
		Элементы.ГруппаПодборТоваров.Видимость = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(ЧекСОшибкой) Тогда
			
			Элементы.КомандаСканированиеШтрихкодаЧекСОшибкой.Видимость = Ложь;
		Иначе
			
			Элементы.ГруппаНовыйЧек.Видимость = Ложь;
			ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаПодборТоваров", "ПодборТоваров", 2);
			
		КонецЕсли;
		
		Элементы.ГруппаПодборТоваров.Видимость = Истина;
		
	КонецЕсли;
	
	НастроитьЭлементыАсинхронногоСканера();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры)
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	//
КонецПроцедуры

#КонецОбласти


