
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	ПутьКФайлу = Параметры.ПутьКФайлу;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"ВариантПоиска, СтавкаНДСПоУмолчанию, ЕдиницаИзмеренияПоУмолчанию, ГруппаПоУмолчанию, ПредметРасчетаПоУмолчанию"
	);
	
	ЕстьОшибки = Ложь;
	СообщениеОбОшибке = "";
	ЗагрузитьФайл(ПутьКФайлу, ЕстьОшибки, СообщениеОбОшибке);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьТовары(Команда)
	
	Если ФильтрПоЗначениямПоУмолчанию Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Перед записью необходимо снять флаг 
											|""Только со значениями по умолчанию""'"));
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = ТаблицаИмпорт.Количество();
	
	ПараметрыПоиска = Новый Структура("ТоварНайден", Истина);
	СтрокиСНайденнымиТоварами = ТаблицаИмпорт.НайтиСтроки(ПараметрыПоиска);
	
	ТекстВопроса = НСтр("ru = 'Записать новые позиции: %КоличествоНовых%
								|Обновить существующие позиции: %КоличествоСтарых%'");
	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КоличествоНовых%",  КоличествоСтрок - СтрокиСНайденнымиТоварами.Количество());
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КоличествоСтарых%", СтрокиСНайденнымиТоварами.Количество());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьТоваровПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ФильтрПоЗначениямПоУмолчаниюПриИзменении(Элемент)
	
	Если ФильтрПоЗначениямПоУмолчанию Тогда 
		ПараметрОтбора = Новый ФиксированнаяСтруктура("ЕстьЗначениеПоУмолчанию", Истина);
	Иначе
		ПараметрОтбора = Неопределено;
	КонецЕсли;
	
	Элементы.ТаблицаИмпорт.ОтборСтрок = ПараметрОтбора;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписьТоваровПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	СоздатьОбновитьНоменклатуру(ЕстьОшибки);
	
	Если Не ЕстьОшибки Тогда
		
		Закрыть(КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайл(ПутьКФайлуИмпорта, Отказ, СообщениеОбОшибке)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуИмпорта);
	ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	СвойстваФайла = ДанныеФайла.Последовательность();
	КоличествоСвойств = СвойстваФайла.Количество();
	
	НомерКолонкиЦена = 0;
	
	ЕстьКнигаСДанными = Ложь;
	Для Счетчик = 0 По КоличествоСвойств - 1 Цикл
		СвойствоФайла = СвойстваФайла.ПолучитьСвойство(Счетчик);
		Если СвойствоФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НРЕГ(СвойствоФайла.Имя) = "worksheet" Тогда
			ЕстьКнигаСДанными = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьКнигаСДанными Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Неверный формат таблицы XML.
			|Файл не может быть загружен'");
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = Неопределено;
	
	Если ТипЗнч(ДанныеФайла.Worksheet) = Тип("ОбъектXDTO") Тогда
		
		ЕстьЛистСДанными = Истина;
		Попытка
			ТаблицаДанных = ДанныеФайла.Worksheet.Table;
		Исключение
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат таблицы XML.
				|Файл не может быть загружен.'");
				
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ДанныеФайла.Worksheet) = Тип("СписокXDTO") Тогда
		
		ЕстьЛистСДанными = Ложь;
		ЛистСДанными = 0;
		Для Каждого Лист Из ДанныеФайла.Worksheet Цикл
			Если НЕ Найти(Лист.Name, "Price") = 0 Тогда
				ЕстьЛистСДанными = Истина;
				Прервать;
			КонецЕсли;
			ЛистСДанными = ЛистСДанными + 1;
		КонецЦикла;
		
		Если НЕ ЕстьЛистСДанными Тогда
			СообщениеОбОшибке = НСтр("ru = 'Файл не может быть загружен.
			|Отсутствует лист данных с именем ""Price"".'");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			ТаблицаДанных = ДанныеФайла.Worksheet[ЛистСДанными].Table;
		Исключение
			
			СообщениеОбОшибке = НСтр("ru = 'Неверный формат таблицы XML.
				|Файл не может быть загружен.'");
				
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТаблицаДанных = Неопределено Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Неверный формат таблицы XML.
			|Файл не может быть загружен.'");
			
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Ищем строку заголовков
	КоличествоКолонок = Число(ТаблицаДанных.ExpandedColumnCount);
	КоличествоСтрок = ТаблицаДанных.Row.Количество();
	НомерСтрокиЗаголовков = 0;
	НомерКолонкиНаименование = 0;
	НомерКолонкиАртикул = 0;
	НомерКолонкиЕдиницаИзмерения = 0;
	НомерКолонкиСтавкаНДС = 0;
	НомерКолонкиШтрихкод = 0;
	НомерКолонкиЦена = 0;
	НомерКолонкиГруппа = 0;
	НомерКолонкиВидАлкоголя = 0;
	НомерКолонкиОбъемАлкоголя = 0;
	НомерКолонкиПредметРасчета = 0;
	
	Для каждого Строка Из ТаблицаДанных.Row Цикл
		
		Если НЕ НомерКолонкиНаименование = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтрокиЗаголовков = НомерСтрокиЗаголовков + 1;
		ОбъединениеЯчеек = 0;
		СмещениеКолонки = 0;
		
		Для СчетчикКолонок = 1 По КоличествоКолонок Цикл
			
			Попытка
				ЗначениеЯчейки = Строка.Cell[СчетчикКолонок -1];
			Исключение
				Продолжить;
			КонецПопытки;
			
			Попытка
				Значение = ЗначениеЯчейки.Data.Последовательность().ПолучитьТекст(0);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Попытка
				СмещениеКолонки = Число(ЗначениеЯчейки.Index) - 1;
			Исключение
			КонецПопытки;
			
			Попытка
				ОбъединениеЯчеек = ОбъединениеЯчеек + Число(ЗначениеЯчейки.MergeAcross);
			Исключение
			КонецПопытки;
			
			Если НЕ Найти(НРЕГ(Значение), "наименование") = 0 Тогда
				НомерКолонкиНаименование = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
			
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "цена") = 0 Тогда
				НомерКолонкиЦена = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
			
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "артикул") = 0 Тогда
				НомерКолонкиАртикул = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
			
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "еи") = 0 Тогда
				НомерКолонкиЕдиницаИзмерения = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
			
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "ставка ндс") = 0 Тогда
				НомерКолонкиСтавкаНДС = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
			
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "штрихкод") = 0 Тогда
				НомерКолонкиШтрихкод = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
				
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "группа") = 0 Тогда
				НомерКолонкиГруппа = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
			
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "код алкоголя") = 0 Тогда
				НомерКолонкиВидАлкоголя = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
				
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "объем алкоголя") = 0 Тогда
				НомерКолонкиОбъемАлкоголя = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
				
			ИначеЕсли НЕ Найти(НРЕГ(Значение), "предмет расчета") = 0 Тогда
				НомерКолонкиПредметРасчета = СчетчикКолонок + СмещениеКолонки + ОбъединениеЯчеек;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НомерКолонкиНаименование = 0 Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Отсутствует колонка ""Наименование"".
			|Файл не может быть загружен.'");
			
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьНумерациюОбъектов(Метаданные.Справочники.Номенклатура);
	
	// загружаем данные из файла
	ТаблицаИмпорт.Очистить();
	Для НомерСтроки = НомерСтрокиЗаголовков По КоличествоСтрок - 1 Цикл
		
		СтрокаДанных = ТаблицаДанных.Row[НомерСтроки];
		МассивДанных = ПреобразоватьСтрокуДанныхВМассив(СтрокаДанных);
		
		// Наименование
		НаименованиеТовара = "";
		Попытка
			НаименованиеТовара = МассивДанных[НомерКолонкиНаименование - 1];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ПустаяСтрока(НаименованиеТовара) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыИмпорт = ТаблицаИмпорт.Добавить();
		СтрокаТаблицыИмпорт.Наименование = НаименованиеТовара;
		
		// Артикул
		Если НЕ НомерКолонкиАртикул = 0 Тогда
			Попытка
				СтрокаТаблицыИмпорт.Артикул = МассивДанных[НомерКолонкиАртикул - 1];
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Группа товаров
		Если НЕ НомерКолонкиГруппа = 0 Тогда
			Попытка
				
				ГруппаСтрокой = МассивДанных[НомерКолонкиГруппа - 1];
				Группа = ОбщегоНазначенияПовтИсп.ПолучитьГруппуТоваров(ГруппаСтрокой, "ПоУмолчанию");
				
				Если Группа = "ПоУмолчанию" Тогда
					УстановитьГруппуПоУмолчанию(СтрокаТаблицыИмпорт);
				Иначе
					СтрокаТаблицыИмпорт.Группа = Группа;
				КонецЕсли;
				
			Исключение
				УстановитьГруппуПоУмолчанию(СтрокаТаблицыИмпорт);
			КонецПопытки;
		Иначе
			УстановитьГруппуПоУмолчанию(СтрокаТаблицыИмпорт);
		КонецЕсли;
		
		// Единица измерения
		Если НЕ НомерКолонкиЕдиницаИзмерения = 0 Тогда
			Попытка
				
				ЕдиницаИзмеренияСтрокой = МассивДанных[НомерКолонкиЕдиницаИзмерения - 1];
				ЕдиницаИзмерения = ОбщегоНазначенияПовтИсп.ПолучитьЕдиницуИзмерения(ЕдиницаИзмеренияСтрокой, "ПоУмолчанию");
				
				Если ЕдиницаИзмерения = "ПоУмолчанию" Тогда
					УстановитьЕИПоУмолчанию(СтрокаТаблицыИмпорт);
				Иначе
					СтрокаТаблицыИмпорт.ЕдиницаИзмерения = ЕдиницаИзмерения;
				КонецЕсли;
				
			Исключение
				УстановитьЕИПоУмолчанию(СтрокаТаблицыИмпорт)
			КонецПопытки;
			
		Иначе
			УстановитьЕИПоУмолчанию(СтрокаТаблицыИмпорт)
		КонецЕсли;
		
		// Ставка НДС
		Если НЕ НомерКолонкиСтавкаНДС = 0 Тогда
			Попытка
				СтавкаНДСИзДанных = МассивДанных[НомерКолонкиСтавкаНДС - 1];
				
				Если СтавкаНДСИзДанных = Неопределено Тогда
					
					СтавкаНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДС(Неопределено, "ПоУмолчанию");
					
				Иначе
					СтавкаНДСЧислом = Число(СтавкаНДСИзДанных);
					СтавкаНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДС(СтавкаНДСЧислом, "ПоУмолчанию");
				КонецЕсли;
				
				Если СтавкаНДС = "ПоУмолчанию" Тогда
					УстановитьСтавкуНДСПоУмолчанию(СтрокаТаблицыИмпорт);
				Иначе
					СтрокаТаблицыИмпорт.СтавкаНДС = СтавкаНДС;
				КонецЕсли;
				
			Исключение
				УстановитьСтавкуНДСПоУмолчанию(СтрокаТаблицыИмпорт);
			КонецПопытки;
			
		Иначе
			УстановитьСтавкуНДСПоУмолчанию(СтрокаТаблицыИмпорт);
		КонецЕсли;
		
		// Цена
		Если НЕ НомерКолонкиЦена = 0 Тогда
			Попытка
				СтрокаТаблицыИмпорт.Цена = МассивДанных[НомерКолонкиЦена - 1];
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Штрихкод
		Если НЕ НомерКолонкиШтрихкод = 0 Тогда
			Попытка
				СтрокаТаблицыИмпорт.Штрихкод = МассивДанных[НомерКолонкиШтрихкод - 1];
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Объем алкоголя
		Если НЕ НомерКолонкиОбъемАлкоголя = 0 Тогда
			Попытка
				СтрокаТаблицыИмпорт.ОбъемАлкогольнойПродукции = МассивДанных[НомерКолонкиОбъемАлкоголя - 1];
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Вид алкоголя
		Если НЕ НомерКолонкиВидАлкоголя = 0 Тогда
			Попытка
				
				КодАлкоголя = МассивДанных[НомерКолонкиВидАлкоголя - 1];
				СтрокаТаблицыИмпорт.ВидАлкогольнойПродукции = ОбщегоНазначенияПовтИсп.ПолучитьВидАлкогольнойПродукцииПоКоду(КодАлкоголя);
				
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Предмет расчета
		Если НЕ НомерКолонкиПредметРасчета = 0 Тогда
			
			Попытка
				
				КодПредметаРасчета = МассивДанных[НомерКолонкиПредметРасчета - 1];
				
				КодПредметаРасчетаЧисло = Число(КодПредметаРасчета);
				
				СтрокаТаблицыИмпорт.ПредметРасчета =
					ОбщегоНазначенияПовтИсп.ПолучитьПризнакПредметаРасчетаПоКоду(КодПредметаРасчетаЧисло);
					
			Исключение
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыИмпорт.ПредметРасчета) Тогда
				УстановитьПредметРасчетаПоУмолчанию(СтрокаТаблицыИмпорт);
			КонецЕсли;
			
		Иначе
			УстановитьПредметРасчетаПоУмолчанию(СтрокаТаблицыИмпорт);
			
		КонецЕсли;
		
		НайтиНоменклатуру(СтрокаТаблицыИмпорт);
		
	КонецЦикла;
	
	Элементы.Артикул.Видимость          = НЕ НомерКолонкиАртикул = 0;
	Элементы.Цена.Видимость             = НЕ НомерКолонкиЦена = 0;
	Элементы.Штрихкод.Видимость         = НЕ НомерКолонкиШтрихкод = 0;
	Элементы.Группа.Видимость           = НЕ (НомерКолонкиГруппа = 0 И НЕ ЗначениеЗаполнено(ГруппаПоУмолчанию));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "ВидАлкогольнойПродукции, ОбъемАлкогольнойПродукции", "Видимость",
		ЗначениеНастроекПовтИсп.ИспользуетсяАлкогольнаяПродукция() И НЕ НомерКолонкиВидАлкоголя = 0 И НЕ НомерКолонкиОбъемАлкоголя = 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппуПоУмолчанию(СтрокаТаблицыИмпорт)
	
	Если ЗначениеЗаполнено(ГруппаПоУмолчанию) Тогда
		СтрокаТаблицыИмпорт.Группа = ГруппаПоУмолчанию;
		СтрокаТаблицыИмпорт.ГруппаПоУмолчанию = Истина;
		СтрокаТаблицыИмпорт.ЕстьЗначениеПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЕИПоУмолчанию(СтрокаТаблицыИмпорт)
	
	СтрокаТаблицыИмпорт.ЕдиницаИзмерения = ЕдиницаИзмеренияПоУмолчанию;
	СтрокаТаблицыИмпорт.ЕдиницаИзмеренияПоУмолчанию = Истина;
	СтрокаТаблицыИмпорт.ЕстьЗначениеПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуНДСПоУмолчанию(СтрокаТаблицыИмпорт)
	
	СтрокаТаблицыИмпорт.СтавкаНДС = СтавкаНДСПоУмолчанию;
	СтрокаТаблицыИмпорт.СтавкаНДСПоУмолчанию = Истина;
	СтрокаТаблицыИмпорт.ЕстьЗначениеПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредметРасчетаПоУмолчанию(СтрокаТаблицыИмпорт)
	
	СтрокаТаблицыИмпорт.ПредметРасчета = ПредметРасчетаПоУмолчанию;
	СтрокаТаблицыИмпорт.ПредметРасчетаПоУмолчанию = Истина;
	СтрокаТаблицыИмпорт.ЕстьЗначениеПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НайтиНоменклатуру(СтрокаТаблицыИмпорт)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	%Условие%";
	
	Если ВариантПоиска = "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "Номенклатура.Наименование = &Наименование");
		
	ИначеЕсли ВариантПоиска = "Артикул" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "Номенклатура.Артикул = &Артикул");
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыИмпорт["Артикул"]) ИЛИ НомерКолонкиАртикул = 0 Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантПоиска = "НаименованиеАртикул" Тогда
		
		Если НомерКолонкиАртикул = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "Номенклатура.Наименование = &Наименование");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "Номенклатура.Наименование = &Наименование И Номенклатура.Артикул = &Артикул");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Артикул", СтрокаТаблицыИмпорт["Артикул"]);
	Запрос.УстановитьПараметр("Наименование", СтрокаТаблицыИмпорт["Наименование"]);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтрокаТаблицыИмпорт["Номенклатура"] = Выборка.Номенклатура;
		СтрокаТаблицыИмпорт["ТоварНайден"] = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбновитьНоменклатуру(Отказ)
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаРеквизитов Из ТаблицаИмпорт Цикл
		
		Если СтрокаРеквизитов.ТоварНайден Тогда
			Товар = СтрокаРеквизитов.Номенклатура.ПолучитьОбъект();
		Иначе
			Товар = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		
		Товар.Наименование = СтрокаРеквизитов.Наименование;
		
		Товар.СтавкаНДС        = СтрокаРеквизитов.СтавкаНДС;
		Товар.ЕдиницаИзмерения = СтрокаРеквизитов.ЕдиницаИзмерения;
		Товар.ПризнакПредметаРасчета = СтрокаРеквизитов.ПредметРасчета;
		
		Если ЗначениеЗаполнено(СтрокаРеквизитов.Группа) Тогда
			Товар.Родитель = СтрокаРеквизитов.Группа;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРеквизитов.Артикул) Тогда
			Товар.Артикул = СтрокаРеквизитов.Артикул;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРеквизитов.Цена) Тогда
			Товар.Цена = СтрокаРеквизитов.Цена;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СтрокаРеквизитов.ВидАлкогольнойПродукции) 
			И ЗначениеЗаполнено(СтрокаРеквизитов.ОбъемАлкогольнойПродукции) Тогда
			
			Товар.АлкогольнаяПродукция      = Истина;
			Товар.ВидАлкогольнойПродукции   = СтрокаРеквизитов.ВидАлкогольнойПродукции;
			Товар.ОбъемАлкогольнойПродукции = СтрокаРеквизитов.ОбъемАлкогольнойПродукции;
		Иначе
			Товар.АлкогольнаяПродукция      = Ложь;
		КонецЕсли;
		
		Попытка
			Товар.Записать();
		Исключение
			Инфо = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Инфо);
			Отказ = Истина;
			Прервать;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(СтрокаРеквизитов.Штрихкод) Тогда
			
			МассивШтрихкодов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРеквизитов.Штрихкод,,,Истина);
			НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Товар.Ссылка);
			
			Для Каждого Штрихкод Из МассивШтрихкодов Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Номенклатура = Товар.Ссылка;
				Запись.Штрихкод = Штрихкод;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьСтрокуДанныхВМассив(СтрокаДанных)
	
	МассивДанных = Новый Массив();
	КоличествоЯчеекДанных = СтрокаДанных.Cell.Количество();
	
	ИндексМассива = 0;
	Для Счетчик = 0 По КоличествоЯчеекДанных - 1 Цикл
		
		НомерКолонки = 0;
		Попытка
			НомерКолонки = Число(СтрокаДанных.Cell[Счетчик].Index);
		Исключение
		КонецПопытки;
		
		ДанныеЯчейки = Неопределено;
		
		СвойстваXDTO = СтрокаДанных.Cell[Счетчик].Свойства();
		
		Если НЕ СвойстваXDTO.Получить("Data") = Неопределено
			И НЕ СтрокаДанных.Cell[Счетчик].Data.Последовательность().Количество() = 0 Тогда
			
			ДанныеЯчейки = СокрЛП(СтрокаДанных.Cell[Счетчик].Data.Последовательность().ПолучитьТекст(0));
			
		КонецЕсли;
		
		Если НЕ НомерКолонки = 0 Тогда
			ИндексМассива = НомерКолонки - 1;
		КонецЕсли;
		
		МассивДанных.Вставить(ИндексМассива, ДанныеЯчейки);
		ИндексМассива = ИндексМассива + 1;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

#КонецОбласти

