
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	ТранспортСинхронизацииЧерезWS = ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS();
	ИнтервалОжидания = 0.1;
	
	Если Параметры.Свойство("Выгрузка") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыгрузка;
		Заголовок = НСтр("ru = 'Выгрузка данных'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "СтраницыПроверкаФорматаВыгрузка", "Видимость",
			ТранспортСинхронизацииЧерезWS);
		
	Иначе
		
		ЗагрузкаДанных = Истина;
		
		ЗагружатьНастройки = ЗначениеНастроекПовтИсп.ЗагружатьНастройки();
		
		ЗагружатьЗаказы = ЗначениеНастроекПовтИсп.ЗагружатьЗаказы();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "СтраницыПроверкаФормата", "Видимость",
			ТранспортСинхронизацииЧерезWS);
		
		Заголовок = НСтр("ru = 'Загрузка данных'");
		
	КонецЕсли;
	
	Элементы.ВыполнитьЕщеРаз.Видимость = Ложь;
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтартСинхронизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЕщеРаз(Команда)
	
	СброситьЭлементыПередСтартом();
	
	СтартСинхронизации();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СтартСинхронизации()
	
	Если ЗагрузкаДанных Тогда
		Элементы.СтраницыСоединение.ТекущаяСтраница = Элементы.ГруппаСоединениеСтарт;
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", 0.1, Истина);
	Иначе
		Элементы.СтраницыСоединениеВыгрузка.ТекущаяСтраница = Элементы.ГруппаСоединениеВыгрузкаСтарт;
		ПодключитьОбработчикОжидания("Подключаемый_СтартВыгрузки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтартВыгрузки()
	
	Если ТипВыгрузки = "" Тогда //Соединение
		
		УстановитьСоединение();
		
		Если Отказ Тогда
			Элементы.СтраницыСоединениеВыгрузка.ТекущаяСтраница = Элементы.ГруппаСоединениеВыгрузкаОшибка;
			ОтобразитьОшибкуВыгрузки(ЭтотОбъект);
		Иначе
			Элементы.СтраницыСоединениеВыгрузка.ТекущаяСтраница = Элементы.ГруппаСоединениеВыгрузкаФиниш;
			
			Если ТранспортСинхронизацииЧерезWS Тогда
				
				ТипВыгрузки = "ПроверкаФормата";
				Элементы.СтраницыПроверкаФорматаВыгрузка.ТекущаяСтраница = Элементы.ГруппаПроверкаФорматаВыгрузкаСтарт;
				
			Иначе
				
				Элементы.СтраницыВыгрузкаОтчетыОПродажах.ТекущаяСтраница = Элементы.ГруппаВыгрузкаОтчетыОПродажахСтарт;
				ТипВыгрузки = "ОтчетыОПродажах";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартВыгрузки", 0.1, Истина);
		
	ИначеЕсли ТипВыгрузки = "ПроверкаФормата" Тогда
		
		ПроверитьФорматСообщенийОбмена();
		
		Если Отказ Тогда
			
			Элементы.СтраницыПроверкаФорматаВыгрузка.ТекущаяСтраница = Элементы.ГруппаПроверкаФорматаВыгрузкаОшибка;
			ОтобразитьОшибкуВыгрузки(ЭтотОбъект);
			
		Иначе
			
			Элементы.СтраницыПроверкаФорматаВыгрузка.ТекущаяСтраница = Элементы.ГруппаПроверкаФорматаВыгрузкаФиниш;
			
			Элементы.СтраницыВыгрузкаОтчетыОПродажах.ТекущаяСтраница = Элементы.ГруппаВыгрузкаОтчетыОПродажахСтарт;
			ТипВыгрузки = "ОтчетыОПродажах";
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартВыгрузки", 0.1, Истина);
		
	ИначеЕсли ТипВыгрузки = "ОтчетыОПродажах" Тогда
		
		ВыгрузитьОтчетыОПродажах();
		
		Если Отказ Тогда
			Элементы.СтраницыВыгрузкаОтчетыОПродажах.ТекущаяСтраница = Элементы.ГруппаВыгрузкаОтчетыОПродажахОшибка;
			ОтобразитьОшибкуВыгрузки(ЭтотОбъект);
		Иначе
			Элементы.СтраницыВыгрузкаОтчетыОПродажах.ТекущаяСтраница = Элементы.ГруппаВыгрузкаОтчетыОПродажахФиниш;
			ТипВыгрузки = "Готово";
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартВыгрузки", 0.1, Истина);
		
	ИначеЕсли ТипВыгрузки = "Готово" Тогда
		
		Оповестить("ВыполненОбмен");
		
	ИначеЕсли ТипВыгрузки = "Ошибка" Тогда
		
		Оповестить("ВыполненОбмен");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтартЗагрузки()
	
	Если ТипЗагрузки = "" Тогда //Соединение
		
		УстановитьСоединение();
		
		Если Отказ Тогда
			
			Элементы.СтраницыСоединение.ТекущаяСтраница = Элементы.ГруппаСоединениеОшибка;
			ОтобразитьОшибкуЗагрузки(ЭтотОбъект);
			
		Иначе
			
			Элементы.СтраницыСоединение.ТекущаяСтраница = Элементы.ГруппаСоединениеФиниш;
			
			Если ТранспортСинхронизацииЧерезWS Тогда
				
				ТипЗагрузки = "ПроверкаФормата";
				Элементы.СтраницыПроверкаФормата.ТекущаяСтраница = Элементы.ГруппаПроверкаФорматаСтарт;
				
			ИначеЕсли ЗагружатьНастройки Тогда
				
				ТипЗагрузки = "Настройки";
				Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхСтарт;
				
			Иначе
				
				ТипЗагрузки = "ПрайсЛист";
				Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхСтарт;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", 0.1, Истина);
		
	ИначеЕсли ТипЗагрузки = "ПроверкаФормата" Тогда
		
		ПроверитьФорматСообщенийОбмена();
		
		Если Отказ Тогда
			
			Элементы.СтраницыПроверкаФормата.ТекущаяСтраница = Элементы.ГруппаПроверкаФорматаОшибка;
			ОтобразитьОшибкуЗагрузки(ЭтотОбъект);
			
		Иначе
			
			Элементы.СтраницыПроверкаФормата.ТекущаяСтраница = Элементы.ГруппаПроверкаФорматаФиниш;
			
			Если ЗагружатьНастройки Тогда
				
				ТипЗагрузки = "Настройки";
			Иначе
				
				ТипЗагрузки = "ПрайсЛист";
			КонецЕсли;
			
			Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхСтарт;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", 0.1, Истина);
		
	ИначеЕсли ТипЗагрузки = "Настройки" Тогда
		
		Если ЗагружатьНастройки Тогда
			ЗагрузитьНастройки();
			Оповестить("ИзмененыЗначенияНастроек");
			Если Отказ Тогда
				Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхОшибка;
				
				ОтобразитьОшибкуЗагрузки(ЭтотОбъект);
			Иначе
				ТипЗагрузки = "ПрайсЛист";
			КонецЕсли;
			
		Иначе
			
			ТипЗагрузки = "ПрайсЛист";
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", 0.1, Истина);
		
	ИначеЕсли ТипЗагрузки = "ПрайсЛист" Тогда
		
		Интервал = 0.1;
		ЗагрузитьПрайсЛист();
		
		Если Отказ Тогда
			Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхОшибка;
			ОтобразитьОшибкуЗагрузки(ЭтотОбъект);
			
		ИначеЕсли ТипЗагрузки = "ПолученИдентификаторПередачи" Тогда
			
			// запускаем процесс получения прайс-листа с идентификатором
			ТипЗагрузки = "ПрайсЛистСИдентификаторомПередачи";
		Иначе
			
			Если ЗагружатьЗаказы Тогда
				ТипЗагрузки = "Заказы";
			Иначе
				ТипЗагрузки = "Готово";
			КонецЕсли;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", 0.1, Истина);
		
	ИначеЕсли ТипЗагрузки = "ПрайсЛистСИдентификаторомПередачи" Тогда
		
		ЗагрузитьПакетПрайсЛиста();
		
		Если ТипЗагрузки = "Готово" Тогда
			
		ИначеЕсли ТипЗагрузки = "Ошибка" Тогда
			
			Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхОшибка;
		КонецЕсли;
		
		Если ОжиданиеДанных Тогда
			
			МаксВремяДляПовторногоОпроса = 16; // сек
			ВеличинаУвеличенияОжидания = 3;
			
			Если ИнтервалОжидания < МаксВремяДляПовторногоОпроса Тогда
				ИнтервалОжидания = ИнтервалОжидания + ВеличинаУвеличенияОжидания;
			КонецЕсли;
		Иначе
			ИнтервалОжидания = 0.1;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", ИнтервалОжидания, Истина);
		
		
	ИначеЕсли ТипЗагрузки = "Заказы" Тогда
		
		Интервал = 0.1;
		
		Если (ТранспортСинхронизацииЧерезWS И ВерсияФорматаОбмена() >= 2000) ИЛИ НЕ ТранспортСинхронизацииЧерезWS Тогда
			
			ЗагрузитьЗаказы();
			
			Если Отказ Тогда
				
				Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхОшибка;
				ОтобразитьОшибкуЗагрузки(ЭтотОбъект);
				
			Иначе
				
				Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхФиниш;
				ТипЗагрузки = "Готово";
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Заказы: Формат обмена не поддерживает загрузку заказов. Загрузка не производилась.'");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
			Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхФиниш;
			ТипЗагрузки = "Готово";
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_СтартЗагрузки", 0.1, Истина);
		
	ИначеЕсли ТипЗагрузки = "Готово" Тогда
		
		Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница = Элементы.ГруппаЗагрузкаДанныхФиниш;
		
		Оповестить("ВыполненОбмен");
		ОбновитьИнтерфейс();
		
	ИначеЕсли ТипЗагрузки = "Ошибка" Тогда
		
		Оповестить("ВыполненОбмен");
		ОбновитьИнтерфейс();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСоединение()
	
	Синхронизация.ПроверитьУстановитьПодключение(Отказ, Лог, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФорматСообщенийОбмена()
	
	Синхронизация.ПолучитьВерсиюФорматаОбмена(Отказ, Лог);
	Синхронизация.ПроверитьСовместимостьФорматовОбмена(Отказ, Лог);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОтчетыОПродажах()
	
	ИнфоТекст = "";
	ЕстьИзменения = Ложь;
	СообщениеПриОшибке = "";
	Синхронизация.ВыгрузитьОтчетыОПродажах(Отказ, СообщениеПриОшибке, ЕстьИзменения, ИнфоТекст);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, СообщениеПриОшибке);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ИнфоТекст = "";
	ЕстьИзменения = Ложь;
	СообщениеПриОшибке = "";
	Синхронизация.ПолучитьНастройки(Отказ, СообщениеПриОшибке, ЕстьИзменения, ИнфоТекст);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, СообщениеПриОшибке);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПрайсЛист()
	
	Если ТранспортСинхронизацииЧерезWS И ПараметрыСеанса.ВерсияФорматаОбмена > 1005 Тогда
		
		ИдентификаторПередачи = Синхронизация.ПолучитьИдентификаторПередачиПрайсЛиста(Отказ, Лог);
		
		Если НЕ Отказ Тогда
			ТипЗагрузки = "ПолученИдентификаторПередачи";
		КонецЕсли;
		
	Иначе
		
		Синхронизация.ПолучитьПрайсЛист(Отказ, Лог);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПакетПрайсЛиста()
	
	Рестарт = Ложь;
	ЗагрузкаЗавершена = Ложь;
	
	ТекстДляЛога = "";
	
	Синхронизация.ПолучитьПакетПрайсЛиста(ИдентификаторПередачи, Рестарт, ЗагрузкаЗавершена, Отказ, ТекстДляЛога);
	
	Если ТекстДляЛога = "Данные не готовы" И НЕ ОжиданиеДанных Тогда
		
		ОжиданиеДанных = Истина;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог,
			НСтр("ru = 'Данные еще не готовы на стороне сервера. Ожидание...'"));
			
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ".");
			
	ИначеЕсли ТекстДляЛога = "Данные не готовы" И ОжиданиеДанных Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ".", Ложь);
		
	Иначе
		ОжиданиеДанных = Ложь;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстДляЛога);
	КонецЕсли;
	
	Если ЗагрузкаЗавершена Тогда
		
		Если ЗагружатьЗаказы Тогда
			ТипЗагрузки = "Заказы";
		Иначе
			ТипЗагрузки = "Готово";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОтобразитьОшибкуЗагрузки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗаказы()
	
	Синхронизация.ПолучитьЗаказы(Отказ, Лог);
	
КонецПроцедуры

&НаСервере
Функция ВерсияФорматаОбмена()
	
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	Возврат ВерсияФорматаОбмена;
	
КонецФункции

&НаСервере
Процедура СброситьЭлементыПередСтартом()
	
	Элементы.ВыполнитьЕщеРаз.Видимость = Ложь;
	
	Если ЗагрузкаДанных Тогда
		
		ТипЗагрузки = "";
		Лог = "";
		Отказ = Ложь;
		
		Элементы.СтраницыСоединение.ТекущаяСтраница 		= Элементы.ГруппаСоединениеНачало;
		Элементы.СтраницыПроверкаФормата.ТекущаяСтраница 	= Элементы.ГруппаПроверкаФорматаНачало;
		Элементы.СтраницыЗагрузкаДанных.ТекущаяСтраница 	= Элементы.ГруппаЗагрузкаДанныхНачало;
		
	Иначе
		
		ТипВыгрузки = "";
		Лог = "";
		Отказ = Ложь;
		
		Элементы.СтраницыСоединениеВыгрузка.ТекущаяСтраница 		= Элементы.ГруппаСоединениеВыгрузкаНачало;
		Элементы.СтраницыПроверкаФорматаВыгрузка.ТекущаяСтраница 	= Элементы.ГруппаПроверкаФорматаВыгрузкаНачало;
		Элементы.СтраницыВыгрузкаОтчетыОПродажах.ТекущаяСтраница 	= Элементы.ГруппаВыгрузкаОтчетыОПродажахНачало;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьОшибкуЗагрузки(Форма)
	
	Форма.ТипЗагрузки = "Ошибка";
	Форма.Элементы.ВыполнитьЕщеРаз.Видимость = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьОшибкуВыгрузки(Форма)
	
	Форма.ТипВыгрузки = "Ошибка";
	Форма.Элементы.ВыполнитьЕщеРаз.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти
