
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	НастроитьПоляФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаблокироватьФорму();
	
	ОтобразитьПустуюСтраницуПечатиZОтчета();
	ПодключитьОбработчикОжидания("Подключаемый_РаспечататьZОтчет", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Если НЕ ДоступноЗакрытиеФормы Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПодключаемоеОборудованиеКлиент.ОтключитьОборудование(ОборудованиеПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_РаспечататьZОтчет()
	
	ВходныеПараметры = Новый Структура("ОтчетСГашением", Истина);
	ЕстьОшибки = Ложь;
	
	Если ЗначениеНастроекВызовСервераПовтИсп.ПечататьИнформациюПоСменеПриСнятииКассовыхОтчетов() Тогда
		
		КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
		
		Если Не КассоваяСмена = Неопределено Тогда 
			ТекстОтчета = ПродажиВызовСервера.СформироватьТекстXОтчетаДляПечати(КассоваяСмена);
			ВходныеПараметры.Вставить("ТекстОтчета", ТекстОтчета);
			НомерСмены = ПродажиВызовСервера.ПолучитьНомерСменыДляПечати(КассоваяСмена, Ложь);
			ВходныеПараметры.Вставить("НомерСмены", НомерСмены);
		КонецЕсли;
		
	КонецЕсли;
	
	ПродажиКлиент.ДобавитьПостоянныеПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие("ЗакрытьСмену");
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьЗакрытиеСменыНаФискальномУстройстве(УникальныйИдентификатор, ОборудованиеПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		
		ОтобразитьОшибкуПечатиZОтчета(ВыходныеПараметры.ТекстОшибки);
		
		ЕстьОшибки = Истина;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ЗакрытьСмену", "Ошибка - " + ВыходныеПараметры.ТекстОшибки);
		
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		ПродажиВызовСервера.ЗакрытьДокументКассоваяСмена();
		Оповестить("ИзмененаКассоваяСмена");
		Оповестить("ИзмененОтчетОПродажах");
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяПлатежнаяСистема() Тогда
			
			ОтобразитьСтраницуПроцессаСверкиИтогов();
			ПодключитьОбработчикОжидания("Подключаемый_СверитьИтогиПоПлатежнойСистеме", 0.1, Истина);
			
		Иначе
			
			РазблокироватьФорму();
			
			ОтобразитьСтраницуУспешно();
			ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СверитьИтогиПоПлатежнойСистеме()
	
	ПараметрыСверки = ПродажиКлиент.ПараметрыСверкиПоПлатежнойСистеме();
	ПараметрыСверки.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыСверки.Оборудование = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПлатежнойСистемы();
	
	РезультатСверки = ПродажиКлиент.СверитьИтогиПоПлатежнойСистеме(ПараметрыСверки);
	
	Если РезультатСверки.Успешно Тогда
		
		СлипЧек = РезультатСверки.СлипЧек;
		
		ОтобразитьПечатьСлипЧека();
		ПодключитьОбработчикОжидания("Подключаемый_РаспечататьСлипЧек", 0.1, Истина);
		
	Иначе
		
		СлипЧек = "";
		ОтобразитьОшибкуСверкиИтогов(РезультатСверки.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РаспечататьСлипЧек()
	
	// функция разреза [cut] будет перенесена в мБПО, временное решение.
	
	МассивРазрезанныхСлипЧеков = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СлипЧек, "[cut]", Ложь, Ложь);
	
	Для Каждого РазрезанныйСлипЧек Из МассивРазрезанныхСлипЧеков Цикл
		
		ВыходныеПараметры = Неопределено;
		ВходныеПараметры = Новый Структура("СтрокиТекста", РазрезанныйСлипЧек);
		
		Если МенеджерОборудованияКлиент.ВыполнитьПечатьТекста(
			УникальныйИдентификатор,
			ОборудованиеПечати,
			ВходныеПараметры,
			ВыходныеПараметры) Тогда
			
			РазблокироватьФорму();
			
			ОтобразитьСтраницуУспешно();
			ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 1, Истина);
		Иначе
			
			ОтобразитьОшибкуПечатиСлипЧека(ВыходныеПараметры.ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОтображениеСтраниц

&НаКлиенте
Процедура ОтобразитьСтраницуПроцессаСверкиИтогов()
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСверкаИтоговПроцесс;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПечатьСлипЧека()
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПечатьСлип;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуСверкиИтогов(ОписаниеОшибки)
	
	ТекстОшибки = ОписаниеОшибки;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Закрыть", "Видимость",
		Истина);
	РазблокироватьФорму();
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСверкаИтоговОшибка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуПечатиZОтчета(ОписаниеОшибки)
	
	ТекстОшибки = ОписаниеОшибки;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Закрыть", "Видимость",
		Истина);
	
	РазблокироватьФорму();
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПечатьОтчетаОшибка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуПечатиСлипЧека(ОписаниеОшибки)
	
	ТекстОшибки = ОписаниеОшибки;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Закрыть", "Видимость",
		Истина);
	
	РазблокироватьФорму();
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПечатьСлипОшибка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПустуюСтраницуПечатиZОтчета()
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПечатьОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтраницуУспешно()
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУспешно;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоляФормы()
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтаФорма,
		"НадписьОшибка, НадписьОшибкаПечати, НадписьОшибкаПечатиСлип"
	);
	
	ОбщегоНазначения.УстановитьЦветПолейУспешныхОпераций(ЭтаФорма,
		"НадписьУспешно"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьФорму()
	
	ДоступноЗакрытиеФормы = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Закрыть", "Видимость",
		Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьФорму()
	
	ДоступноЗакрытиеФормы = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

