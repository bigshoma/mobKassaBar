
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	МаркировкаGTIN = "";
	МаркировкаСерийныйНомер = "";
	
	Если ЗначениеЗаполнено(ПолученныйШтрихкод) Тогда
		
		ИдетПроцессСканирования = Ложь;
		ЗакрытьДиалогВводаШтрихкода();
		
		
		Если ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Алкоголь() Тогда
			
			Если НЕ ШтрихкодСоответствуетШаблону(ПолученныйШтрихкод) Тогда
				
				ЗаголовокИнформации = НСтр("ru = 'Штрихкод не соответствует формату PDF417'");
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("ПродолжитьСканирование", НСтр("ru = 'Продолжить сканирование марок'"));
				Кнопки.Добавить("Закрыть",                НСтр("ru = 'Закрыть'"));
				
				Оповещение = Новый ОписаниеОповещения("ОповещениеШтрихкодНеСоответствуетШаблону", ЭтотОбъект);
				
				ПоказатьВопрос(Оповещение, ЗаголовокИнформации, Кнопки,, "ПродолжитьСканирование");
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Результат = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(ПолученныйШтрихкод);
			
			Если Результат.Разобран Тогда
				
				МаркировкаGTIN          = Результат.ГлобальныйИдентификаторТорговойЕдиницы;
				МаркировкаСерийныйНомер = Результат.СерийныйНомер;
				ПолученныйШтрихкод      = Результат.КодМаркировки;
				
			Иначе
				
				Если ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Обувь() Тогда
					ЗаголовокИнформации = НСтр("ru = 'Штрихкод не соответствует формату обувной марки'");
					
				ИначеЕсли ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Табак() Тогда
					
					ЗаголовокИнформации = НСтр("ru = 'Штрихкод не соответствует формату табачной марки'");
					
				ИначеЕсли ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Мех() Тогда	
					ЗаголовокИнформации = НСтр("ru = 'Штрихкод не соответствует формату марки мехового изделия'");
					
				КонецЕсли;
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("ПродолжитьСканирование", НСтр("ru = 'Продолжить сканирование марок'"));
				Кнопки.Добавить("Закрыть",                НСтр("ru = 'Закрыть'"));
				
				Оповещение = Новый ОписаниеОповещения("ОповещениеШтрихкодНеСоответствуетШаблону", ЭтотОбъект);
				ПоказатьВопрос(Оповещение, ЗаголовокИнформации, Кнопки,, "ПродолжитьСканирование");
				
				Возврат;
			КонецЕсли;
						
		КонецЕсли;
		
		
		Если ШтрихкодМаркиПрисутствуетВЧеке(ПолученныйШтрихкод) Тогда
			
			ИдетПроцессСканирования = Ложь;
			ЗакрытьДиалогВводаШтрихкода();
			
			ЗаголовокИнформации = НСтр("ru = 'Марка уже присутствует в чеке'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("ПродолжитьСканирование", НСтр("ru = 'Продолжить сканирование марок'"));
			Кнопки.Добавить("Закрыть",                НСтр("ru = 'Закрыть'"));
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеШтрихкодНеСоответствуетШаблону", ЭтотОбъект);
			
			ПоказатьВопрос(Оповещение, ЗаголовокИнформации, Кнопки,, "ПродолжитьСканирование");
			
			Возврат;
			
		КонецЕсли;
		
		ЗагруженнаяМарка = Объект.Марки.Добавить();
		ЗагруженнаяМарка.КодМаркировки = ПолученныйШтрихкод;
		
		Если НЕ ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Алкоголь() Тогда
			
			ЗагруженнаяМарка.ТипМаркировки = ТипМаркировки;
			ЗагруженнаяМарка.ГлобальныйИдентификаторТорговойЕдиницы = МаркировкаGTIN;
			ЗагруженнаяМарка.СерийныйНомер = МаркировкаСерийныйНомер;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если МаксимальноеКоличество > 0 И МаксимальноеКоличество <= Объект.Марки.Количество() Тогда
		
		ЗакрытьДиалогВводаШтрихкода();
		
		УстановитьДоступностьСканирования();
		
	Иначе
		
		Если ИдетПроцессСканирования И ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьШтрихкод", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьСпискаМарок();
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект,
		"ДекорацияЗаголовок,
		|ДекорацияЗаголовокТабак,
		|НадписьНеУстановленСканерПуть,
		|ПодсказкаСканирование
		|"
	);
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтотОбъект,
		"НадписьСканированиеНевозможно, НадписьНеУстановленСканер");
	
	НастроитьФормуПоЗначениямНастроек();
	
	Номенклатура = Параметры.Номенклатура;
	
	ТипМаркировки = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипМаркировки"); 
	
	Если ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары Тогда
		
		ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Обувь();
		
	ИначеЕсли ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ИзделияИзМеха Тогда
		
		ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Мех();
		
	ИначеЕсли ТипМаркировки = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция Тогда
		
		ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Табак();
	Иначе
		
		ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Алкоголь();
	КонецЕсли;
	
	Если ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Табак() Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТабак;
		Элементы.СтраницаАкциз.Видимость = Ложь;
		
	ИначеЕсли ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Обувь() Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОбувь;
		Элементы.СтраницаАкциз.Видимость = Ложь;

	ИначеЕсли ТипМарки = ПродажиКлиентСерверПовтИсп.ТипМарки_Мех() Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаМех;
		Элементы.СтраницаАкциз.Видимость = Ложь;

	КонецЕсли;
	
	Если Параметры.Свойство("МаксимальноеКоличество") И ЗначениеЗаполнено(Параметры.МаксимальноеКоличество) Тогда
		
		Элементы.МаксимальноеКоличествоИнфо.Видимость = Истина;
		
		МаксимальноеКоличество = Параметры.МаксимальноеКоличество;
		
		НадписьМаксимальноеКоличество = НСтр("ru = 'максимальное количество = %МаксимальноеКоличество%'");
		НадписьМаксимальноеКоличество = СтрЗаменить(НадписьМаксимальноеКоличество, "%МаксимальноеКоличество%", 
			Формат(МаксимальноеКоличество, ЗначениеНастроекПовтИсп.ФорматКоличественныхПолей()));
		
		Элементы.МаксимальноеКоличествоИнфо.Заголовок = НадписьМаксимальноеКоличество;
		
		ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект, "МаксимальноеКоличествоИнфо");
		
	Иначе
		Элементы.МаксимальноеКоличествоИнфо.Видимость = Ложь;
	КонецЕсли;
	
	ЗагрузитьАкцизныеМарки(Параметры.АдресМарокВХранилище);
	
	Если НЕ (Параметры.Свойство("КонтрольДублейМарок") И НЕ Параметры.КонтрольДублейМарок) Тогда
		ЗагрузитьАкцизныеМаркиЧека(Параметры.АдресМарокЧекаВХранилище);
	КонецЕсли;
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УИВладельца = ВладелецФормы.УникальныйИдентификатор;
	
	УстановитьДоступностьСканирования();
	
	НастроитьВидимостьСпискаМарок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СканироватьМарки(Команда)
	
	ИдетПроцессСканирования = Истина;
	ОткрытьДиалогСканирования();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("АдресВХранилище", АдресМарокВХранилище());
	ПараметрыЗакрытия.Вставить("КоличествоМарок", Объект.Марки.Количество());
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура МаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиПриИзменении(Элемент)
	
	УстановитьДоступностьСканирования();
	НастроитьВидимостьСпискаМарок();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНеУстановленСканерНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПодключаемоеОборудованиеСканерШтрихкодов", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповещениеШтрихкодНеСоответствуетШаблону(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ПродолжитьСканирование" Тогда
		
		ИдетПроцессСканирования = Истина;
		ОткрытьДиалогСканирования();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСканирования()
	
	Если МаксимальноеКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СканироватьМарки.Доступность = МаксимальноеКоличество > Объект.Марки.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьДиалогВводаШтрихкода()
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВстроеннойКамерой() Тогда
		
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьШтрихкод()
	
	ОткрытьДиалогСканирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогСканирования()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
	ДополнительныеПараметры.Вставить("ЗаголовокСканирования", НСтр("ru = 'Считайте марку'"));
	
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище()
	
	МассивМарок = Новый Массив;
	
	Для Каждого Марка ИЗ Объект.Марки Цикл
		
		СтруктураМарки = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруМарки();
		
		ЗаполнитьЗначенияСвойств(СтруктураМарки, Марка,
			"КодМаркировки, ТипМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер");
		
		МассивМарок.Добавить(СтруктураМарки);
	КонецЦикла;
	
	АдресМарок = ПоместитьВоВременноеХранилище(МассивМарок, Новый УникальныйИдентификатор(УИВладельца));
	
	Возврат АдресМарок;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьАкцизныеМарки(АдресМарокВХранилище)
	
	Если АдресМарокВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеМарки = ПолучитьИзВременногоХранилища(АдресМарокВХранилище);
	
	Для Каждого Марка Из ПолученныеМарки Цикл
		
		ЗагруженнаяМарка = Объект.Марки.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЗагруженнаяМарка, Марка,
			"ТипМаркировки, КодМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер"
		);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАкцизныеМаркиЧека(АдресМарокЧекаВХранилище)
	
	Если АдресМарокЧекаВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаркиЧека = ПолучитьИзВременногоХранилища(АдресМарокЧекаВХранилище);
	
	КодыМаркировки = Новый Массив;
	Для Каждого МаркаЧека Из МаркиЧека Цикл
		КодыМаркировки.Добавить(МаркаЧека);
	КонецЦикла;
	
	ВведенныеМарки = Объект.Марки.Выгрузить().ВыгрузитьКолонку("КодМаркировки");
	
	Если МаркиЧека.Количество() > 0 И ВведенныеМарки.Количество() > 0 Тогда
		МаркиДляПроверкиДублей = ОбщегоНазначенияКлиентСервер.СократитьМассив(КодыМаркировки, ВведенныеМарки);
	Иначе
		МаркиДляПроверкиДублей = КодыМаркировки;
	КонецЕсли;
	
	Для Каждого КодМарки Из МаркиДляПроверкиДублей Цикл
		АкцизныеМаркиВЧеке.Добавить(КодМарки, КодМарки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ЕстьОборудованиеСканирования = ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования());
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаСканированиеНевозможно", "Видимость",
		НЕ ЕстьОборудованиеСканирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаМарки",
		"Видимость",
		ЕстьОборудованиеСканирования);
		
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"СтраницыСканирование",
		"Видимость",
		ЕстьОборудованиеСканирования
	);
	
	Если ИспользуетсяАсинхронныйСканер Тогда
		Элементы.СтраницыСканирование.ТекущаяСтраница = Элементы.СтраницаСканироватьПодсказка;
	Иначе
		Элементы.СтраницыСканирование.ТекущаяСтраница = Элементы.СтраницаСканироватьМарки;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьВысотуПоляНаименованиеТовара(ЭтотОбъект, , "Номенклатура");
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаГотово", "Готово", 2);
	
	НастроитьЭлементыАсинхронногоСканера();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШтрихкодСоответствуетШаблону(Штрихкод)

	
	Фабрика = ИнтеграцияЕГАИС.ФабрикаЕГАИС();
	ТипШтрихкодМарки = Фабрика.Тип(Справочники.ВидыОбъектовЕГАИС.ЧекККМ.ПространствоИмен, "ШтрихкодМарки");
	
	Попытка
		ТипШтрихкодМарки.Проверить(Штрихкод);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ШтрихкодМаркиПрисутствуетВЧеке(Штрихкод)
	
	Если НЕ АкцизныеМаркиВЧеке.НайтиПоЗначению(Штрихкод) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КодМаркировки", Штрихкод);
	
	НайденныеСтроки = Объект.Марки.НайтиСтроки(СтруктураПоиска);
	
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НастроитьВидимостьСпискаМарок()
	
	Если Объект.Марки.Количество() > 0 Тогда
		Элементы.СтраницыМарки.ТекущаяСтраница = Элементы.СтраницаМарки;
	Иначе
		Элементы.СтраницыМарки.ТекущаяСтраница = Элементы.СтраницаМаркиПустая;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

