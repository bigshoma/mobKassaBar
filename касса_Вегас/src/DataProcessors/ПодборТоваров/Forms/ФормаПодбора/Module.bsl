
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	Штрихкод = ПолученныйШтрихкод;
	ПоискПоШтрихкодуВручнуюФлаг = Истина;
	УстановитьВидимостьПоискПоШтрихкодуВручную();
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(ПрайсЛист, "ПоискШтрихкоду");
	ПоискПоШтрихкодуНаСервере();
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяЕГАИС = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяЕГАИСПриПродаже();
	КонтрольДублейМарок = Истина;
	
	РежимПодбора = "Подбор";
	
	Если Параметры.Свойство("Режим") Тогда
		
		РежимПодбора = Параметры.Режим;
	КонецЕсли;
	
	Если Параметры.Свойство("КонтрольДублейМарок") Тогда
		
		КонтрольДублейМарок = Параметры.КонтрольДублейМарок;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоЧекКоррекции") Тогда
		ЭтоЧекКоррекции = Параметры.ЭтоЧекКоррекции;
	КонецЕсли;
	
	ОбщегоНазначения.ОбновитьИндексПолнотекстовогоПоиска();
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект, "СписокПрайсЛистЦена, Сумма, СуммаГоризонт, СуммаПозиций, СуммаПозицийГоризонт");
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект, "ИнфоКорзина, ВыбраннаяГруппа, ВыбраннаяГруппаГоризонт,
		|МаксимальноеКоличествоИнфо, МаксимальноеКоличествоИнфоГоризонт");
	
	
	НастроитьФормуПоЗначениямНастроек();
	
	ЗаполнитьГруппыНоменклатуры();
	
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПодборТоваровОтборПоГруппеФлаг, ОтборПоГруппеФлаг);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПодборТоваровОтборПоГруппеЗначение, ОтборГруппа);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПодборТоваровПоискПоШтрихкодуВручнуюФлаг,
		ПоискПоШтрихкодуВручнуюФлаг);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПодборТоваровИзбранное, Избранное);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПодборТоваровВариантСортировки, ВариантСортировки);
	
	УстановитьВидимостьОтборПоГруппе();
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПрайсЛист,
		"Группа",
		ОтборГруппа,
		ЗначениеЗаполнено(ОтборГруппа),
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПрайсЛист,
		"Избранное",
		Избранное,
		Избранное,
		ВидСравненияКомпоновкиДанных.Равно);
	
	УстановитьВидимостьПоискПоШтрихкодуВручную();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
	УстановитьИсточникДанныхПрайсЛиста(Параметры);
	УстановитьВидимостьПоРежимуПодбора();
	
	СформироватьЗаголовок();
	
	УстановитьПорядокПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнфоКорзину();
	
	Если ОтображатьГруппыВПодбореТоваров Тогда
		УстановитьДоступностьКомандГрупп();
	КонецЕсли;
	
	НастроитьОтображениеИзбранное();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ОтборГруппаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПрайсЛист,
		"Группа",
		ОтборГруппа,
		ЗначениеЗаполнено(ОтборГруппа),
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрайсЛистВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеПрайсЛист = Элементы.ПрайсЛист.ТекущиеДанные;
	
	Если НЕ ТекущиеДанныеПрайсЛист = Неопределено Тогда
		
		ВыбраннаяНоменклатура = ТекущиеДанныеПрайсЛист.Номенклатура;
		Цена      = ТекущиеДанныеПрайсЛист.Цена;
		
		Если РежимПодбора = "Выбор" Тогда
			
			ДобавитьНоменклатуруВКорзину();
			ГотовоЗакрытьПодбор();
			Возврат;
			
		ИначеЕсли РежимПодбора = "ПодборВВозврат" Тогда
			
			УстановитьМаксКоличествоПриВозврате(ТекущиеДанныеПрайсЛист);
			
		КонецЕсли;
		
		Если НЕ РедактированиеКоличества Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Количество, КоличествоГоризонт", "Доступность", Истина);
			РедактированиеКоличества = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Цена) ИЛИ РежимПодбора = "ПодборБезСуммы" Тогда
			
			ДобавитьНоменклатуруВКорзину();
			
		Иначе
			
			ОписаниеОповещенияВводЦены = Новый ОписаниеОповещения("ОповещениеВводЦены", ЭтотОбъект);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", ВыбраннаяНоменклатура);
			
			ОткрытьФорму("Обработка.ПодборТоваров.Форма.ВводЦеныТовара", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещенияВводЦены);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ИдентификаторСтроки = ОпределитьСтрокуКорзины();
	
	ПересчитатьНоменклатуруВКорзине(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодОчистка(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(ПрайсЛист, "ПоискШтрихкоду");
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(ПрайсЛист, "ПоискШтрихкоду");
	ПоискПоШтрихкодуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИзменениеКоличества(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменениеКоличества(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОчистка(Элемент, СтандартнаяОбработка)
	
	Если НеобходимоВводитьМаркуАлкоголь ИЛИ НеобходимоВводитьМарку Тогда
		
		УдалитьАкцизныеМаркиПоКлючуСвязи(Марки, КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоГоризонтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИзменениеКоличества(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоГоризонтРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ИзменениеКоличества(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоГоризонтОчистка(Элемент, СтандартнаяОбработка)
	
	Если НеобходимоВводитьМаркуАлкоголь ИЛИ НеобходимоВводитьМарку Тогда
		
		УдалитьАкцизныеМаркиПоКлючуСвязи(Марки, КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПозицийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Корзина(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СуммаПозицийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Корзина(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ГотовоЗакрытьПодбор();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(ПрайсЛист, "ПоискШтрихкоду");
	ПоискПоШтрихкодуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоГруппеТоваров(Команда)
	
	ОтборПоГруппеФлаг = НЕ ОтборПоГруппеФлаг;
	УстановитьВидимостьОтборПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВручную(Команда)
	
	ПоискПоШтрихкодуВручнуюФлаг = НЕ ПоискПоШтрихкодуВручнуюФлаг;
	УстановитьВидимостьПоискПоШтрихкодуВручную();
	
	Если ПоискПоШтрихкодуВручнуюФлаг Тогда
		
		ТекущийЭлемент = Элементы.Штрихкод;
		
		#Если МобильноеПриложениеКлиент Тогда
			НачатьРедактированиеЭлемента();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуСканером(Команда)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Корзина(Команда)
	
	ПоместитьКорзинуВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	ПараметрыФормы.Вставить("РежимПодбора", РежимПодбора);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма.КорзинаПодбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьГруппу(Команда)
	
	ИмяКоманды = Команда.Имя;
	ОткрытьГруппу(ИмяКоманды);
	
	УстановитьДоступностьКомандГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	ПерейтиНазадСервер();
	УстановитьДоступностьКомандГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНачалу(Команда)
	
	Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы["Страница1"];
	Элементы.СтраницыГруппГоризонт.ТекущаяСтраница = Элементы["СтраницаГоризонт1"];
	
	ВыбраннаяГруппа = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПрайсЛист,
		"Группа",
		Неопределено,
		Ложь,
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
	УстановитьДоступностьКомандГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировать(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("НаимВозр", "Наименование: А -> Я",, БиблиотекаКартинок.СортироватьСписокПоВозрастанию);
	Список.Добавить("НаимУбыв", "Наименование: Я -> А",, БиблиотекаКартинок.СортироватьСписокПоУбыванию);
	Список.Добавить("ЦенаВозр", "Цена: возрастание",,    БиблиотекаКартинок.СортироватьПоВозрастаниюБелый);
	Список.Добавить("ЦенаУбыв", "Цена: убывание",,       БиблиотекаКартинок.СортироватьПоУбываниюБелый);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюСортировать", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.Сортировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИзбранноеВсе(Команда)
	
	Избранное = Ложь;
	ИзбранноеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИзбранноеТолько(Команда)
	
	Избранное = Истина;
	ИзбранноеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиМарки(ИдентификаторСтроки)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ПараметрыВводаМарок = ПродажиКлиент.ПараметрыВводаМарок();
	ПараметрыВводаМарок.Номенклатура             = ВыбраннаяНоменклатура;
	ПараметрыВводаМарок.АдресМарокВХранилище     = АдресМарокВХранилище(КлючСвязи);
	ПараметрыВводаМарок.МаксимальноеКоличество   = МаксимальноеКоличество;
	ПараметрыВводаМарок.КонтрольДублейМарок      = КонтрольДублейМарок;
		
	АдресМарокЧека = ВладелецФормы.АдресМарокЧекаВХранилище();
	ПараметрыВводаМарок.АдресМарокЧекаВХранилище = АдресМарокЧекаИПодбораВХранилище(АдресМарокЧека);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВводАкцизныхМарокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПродажиКлиент.ОткрытьВводМарок(ЭтотОбъект, ПараметрыВводаМарок, ОбработчикОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПорядокПрайсЛиста()
	
	Если ПустаяСтрока(ВариантСортировки) Тогда
		ВариантСортировки = "НаимВозр";
	КонецЕсли;
	
	Если ВариантСортировки = "НаимВозр" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(ПрайсЛист, "Наименование",
			НаправлениеСортировкиКомпоновкиДанных.Возр);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
		
	ИначеЕсли ВариантСортировки = "НаимУбыв" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(ПрайсЛист, "Наименование",
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
		
	ИначеЕсли ВариантСортировки = "ЦенаВозр" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(ПрайсЛист, "Цена",
			НаправлениеСортировкиКомпоновкиДанных.Возр);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьПоВозрастанию;
		
	ИначеЕсли ВариантСортировки = "ЦенаУбыв" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(ПрайсЛист, "Цена",
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьПоУбыванию;
		
	КонецЕсли;
	
	Элементы.ПрайсЛист.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюСортировать(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантСортировки = Результат.Значение;
	УстановитьПорядокПрайсЛиста();
	
КонецПроцедуры

&НаСервере
Функция АдресМарокЧекаИПодбораВХранилище(АдресМарокЧека)
	
	Если Марки.Количество() = 0 Тогда
		
		Возврат АдресМарокЧека;
	КонецЕсли;
	
	МаркиЧека = ПолучитьИзВременногоХранилища(АдресМарокЧека);
	
	Для Каждого МаркаПодбора Из Марки Цикл
		МаркиЧека.Добавить(МаркаПодбора.КодМаркировки);
	КонецЦикла;
	
	АдресМарокЧека = ПоместитьВоВременноеХранилище(МаркиЧека, УникальныйИдентификатор);
	
	Возврат АдресМарокЧека;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеКоличества(СтандартнаяОбработка)
	
	Если НеобходимоВводитьМаркуАлкоголь ИЛИ НеобходимоВводитьМарку Тогда
		СтандартнаяОбработка = Ложь;
		ИдентификаторСтроки = ОпределитьСтрокуКорзины();
		ВвестиМарки(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГотовоЗакрытьПодбор()
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя(
		"ПодборТоваровОтборПоГруппеФлаг", ОтборПоГруппеФлаг
	);
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя(
		"ПодборТоваровОтборПоГруппеЗначение", ОтборГруппа
	);
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя(
		"ПодборТоваровПоискПоШтрихкодуВручнуюФлаг", ПоискПоШтрихкодуВручнуюФлаг
	);
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя(
		"ПодборТоваровИзбранное", Избранное
	);
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя(
		"ПодборТоваровВариантСортировки", ВариантСортировки
	);
	
	ПоместитьКорзинуВоВременноеХранилище();
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	Закрыть(ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандГрупп()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, 
		"ПерейтиКНачалу, ПерейтиКНачалуГоризонт, ПерейтиНазад, ПерейтиНазадГоризонт",
		"Доступность",
		НЕ Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы["Страница1"] ИЛИ ЗначениеЗаполнено(ВыбраннаяГруппа)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводЦены(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") Тогда
		Цена = Результат;
	КонецЕсли;
	
	ДобавитьНоменклатуруВКорзину();
	
КонецПроцедуры

&НаСервере
Процедура ПоискПоШтрихкодуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
		
	СписокНоменклатуры = ОбработкаТабличнойЧастиВызовСервера.НайтиПоШтрихКодуПодобно(Штрихкод);
	
	ПоискШтрихкоду = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ПрайсЛист.Отбор.Элементы,
		"ПоискШтрихкоду",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
		ПоискШтрихкоду,
		"Номенклатура",
		СписокНоменклатуры,
		Истина,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнфоКорзину()
	
	КоличествоПозиций = Корзина.Количество();
	СуммаПозиций = Корзина.Итог("Сумма");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Готово, ГотовоГоризонт", "Доступность", ЗначениеЗаполнено(КоличествоПозиций));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ФорматКоличественныхПолей = ЗначениеНастроекПовтИсп.ФорматКоличественныхПолей();
	
	ИспользуютсяГруппы = ЗначениеНастроекПовтИсп.ИспользуютсяГруппыНоменклатуры();
	ОтображатьГруппыВПодбореТоваров = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОтображатьГруппыВПодбореТоваров") И ИспользуютсяГруппы;
	
	ИспользуютсяШтрихкоды = ЗначениеНастроекПовтИсп.ИспользуютсяШтрихкоды();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ПоискПоШтрихкоду", "Видимость", 
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() И НЕ ИспользуетсяАсинхронныйСканер);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ОтборПоГруппе", "Видимость",
		ЗначениеНастроекПовтИсп.ИспользуютсяГруппыНоменклатуры()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаИзбранное", "Видимость",
		ЗначениеНастроекПовтИсп.ИспользуютсяИзбранныеТовары()
	);
	
	ОбщегоНазначения.ОформитьКоличественныеПоля(ЭтотОбъект, "Количество, КоличествоГоризонт");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОтборПоГруппеТоваров, ОтборПоГруппе",
		"Видимость",
		ИспользуютсяГруппы И НЕ ОтображатьГруппыВПодбореТоваров
	);
	
	УстановитьВидимостьГруппНоменклатуры();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ПоискПоШтрихкодуВручную",
		"Видимость",
		ИспользуютсяШтрихкоды
	);
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ОбщегоНазначения.УстановитьВысотуПоляНаименованиеТовара(ЭтотОбъект,
		"СписокПрайсЛистНаименование",
		"ВыбраннаяНоменклатура, ВыбраннаяНоменклатураГоризонт");
	
	Если РежимПодбора = "ПодборВВозврат" И ЗначениеНастроекПовтИсп.ИспользуютсяСкидкиНаценки() Тогда
		
		Элементы.СписокПрайсЛистЦена.Заголовок = НСтр("ru = 'Цена (с учетом скидки)'");
		
	КонецЕсли;
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаГотово", "Готово");
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаГотовоГоризонт", "ГотовоГоризонт");
	
	НастроитьЭлементыАсинхронногоСканера();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппНоменклатуры()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппыНоменклатуры", "Видимость", ИспользуютсяГруппы
		И ОтображатьГруппыВПодбореТоваров И НЕ ГоризонтальнаяОриентацияЭкрана);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппыНоменклатурыГоризонт", "Видимость", ИспользуютсяГруппы
		И ОтображатьГруппыВПодбореТоваров И ГоризонтальнаяОриентацияЭкрана);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВКорзину()
	
	УстнановитьНеобходимостьВводаМарки();
	
	КоличествоВКорзине = 0;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ВыбраннаяНоменклатура);
	ПараметрыОтбора.Вставить("Цена", Цена);
	
	НайденныеСтроки = Корзина.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
	
	Если КоличествоНайденныхСтрок = 1 Тогда
		
		СтрокаКорзины      = НайденныеСтроки[0];
		КоличествоВКорзине = СтрокаКорзины.Количество;
		КлючСвязи          = СтрокаКорзины.КлючСвязи;
		Количество         = КоличествоВКорзине;
		
	Иначе
		
		КлючСвязи = 0;
		Количество = 0;
	КонецЕсли;
	
	ИдентификаторСтроки = ОпределитьСтрокуКорзины();
	
	Если НеобходимоВводитьМаркуАлкоголь ИЛИ НеобходимоВводитьМарку Тогда
		
		ВвестиМарки(ИдентификаторСтроки);
	Иначе
		
		Количество = КоличествоВКорзине + 1;
		
		Если РежимПодбора = "ПодборВВозврат" Тогда
			Количество = ?(МаксимальноеКоличество > Количество, Количество, МаксимальноеКоличество);
		КонецЕсли;
		
		ПересчитатьНоменклатуруВКорзине(ИдентификаторСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстнановитьНеобходимостьВводаМарки()
	
	НеобходимоВводитьМаркуАлкоголь = Ложь;
	НеобходимоВводитьМарку = Ложь;
	
	Если ЭтоЧекКоррекции Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяЕГАИС И (РежимПодбора = "Подбор" ИЛИ РежимПодбора = "ПодборВВозврат") Тогда
		НеобходимоВводитьМаркуАлкоголь = ПродажиВызовСервера.ОпределитьНеобходимостьВводаАкцизнойМарки(ВыбраннаяНоменклатура);
		
	КонецЕсли;
	
	Если РежимПодбора = "Подбор" ИЛИ РежимПодбора = "ПодборВВозврат" Тогда
		
		НеобходимоВводитьМарку = 
			ПродажиВызовСервера.ОпределитьНеобходимостьВводаМарки(ВыбраннаяНоменклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводАкцизныхМарокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("АдресВХранилище") Тогда
			
			СтрокаКорзины = Корзина.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Марки,
				СтрокаКорзины,
				"КлючСвязи");
			
			КлючСвязи = СтрокаКорзины.КлючСвязи;
			Количество = ЗаполнитьМаркиПоВСтрокеЧека(СтрокаКорзины.КлючСвязи, Результат.АдресВХранилище);
			
			Если Количество = 0 Тогда
				КлючСвязи = 0;
			КонецЕсли;
			
			ПересчитатьНоменклатуруВКорзине(ИдентификаторСтроки);
			
		КонецЕсли;
		
	Иначе
		
		СтрокаКорзины = Корзина.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если НЕ ЗначениеЗаполнено(СтрокаКорзины.Номенклатура) Тогда
			
			ИндексСтроки = Корзина.Индекс(СтрокаКорзины);
			Корзина.Удалить(ИндексСтроки);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСтрокуКорзины()

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ВыбраннаяНоменклатура);
	ПараметрыОтбора.Вставить("Цена", Цена);
	
	НайденныеСтроки = Корзина.НайтиСтроки(ПараметрыОтбора);
	
	КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
	
	Если КоличествоНайденныхСтрок = 0 Тогда
		
		СтрокаКорзины = Корзина.Добавить();
		
	ИначеЕсли КоличествоНайденныхСтрок = 1 Тогда
		
		СтрокаКорзины = НайденныеСтроки[0];
		
	КонецЕсли;
	
	Возврат СтрокаКорзины.ПолучитьИдентификатор();
	
КонецФункции

&НаСервере
Функция ЗаполнитьМаркиПоВСтрокеЧека(КлючСвязи, АдресМарокВХранилище)
	
	УдалитьАкцизныеМаркиПоКлючуСвязи(Марки, КлючСвязи);
	
	Если АдресМарокВХранилище = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	МассивАкцизныхМарок = ПолучитьИзВременногоХранилища(АдресМарокВХранилище);
	
	Для Каждого Марка Из МассивАкцизныхМарок Цикл
		
		СтрокаМарка = Марки.Добавить();
		СтрокаМарка.КлючСвязи = КлючСвязи;
		
		ЗаполнитьЗначенияСвойств(СтрокаМарка, Марка,
			"ТипМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер, КодМаркировки"
		);
		
	КонецЦикла;
	
	Возврат МассивАкцизныхМарок.Количество();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьАкцизныеМаркиПоКлючуСвязи(Марки, КлючСвязи)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", КлючСвязи);
	
	НайденныеМарки = Марки.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаМарка Из НайденныеМарки Цикл
		Марки.Удалить(СтрокаМарка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНоменклатуруВКорзине(ИдентификаторСтроки)
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКорзины = Корзина.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаКорзины.НеобходимоВводитьМаркуАлкоголь = НеобходимоВводитьМаркуАлкоголь;
	СтрокаКорзины.ЭтоМаркируемаяПродукция = НеобходимоВводитьМарку;
	
	СтрокаКорзины.Номенклатура = ВыбраннаяНоменклатура;
	
	Если Количество = 0 Тогда
		ИндексСтроки = Корзина.Индекс(СтрокаКорзины);
		Корзина.Удалить(ИндексСтроки);
		Сумма = 0;
	Иначе
		СтрокаКорзины.Количество = Количество;
		СтрокаКорзины.Сумма = Количество * Цена;
		СтрокаКорзины.Цена = Цена;
		Сумма = СтрокаКорзины.Сумма;
	КонецЕсли;
	
	ОбновитьИнфоКорзину();
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьКорзинуВоВременноеХранилище()
	
	ВыгружаемыеДанные = Новый Массив;
	
	Для Каждого СтрокаКорзины Из Корзина Цикл
		
		ДанныеНоменклатуры = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПередаваемыеДанныеНоменклатуры();
		
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатуры, СтрокаКорзины,
			"Номенклатура, Количество, Цена, Сумма, ЭтоМаркируемаяПродукция");
		
		ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки = СтрокаКорзины.НеобходимоВводитьМаркуАлкоголь; 
		
		Если ЗначениеЗаполнено(СтрокаКорзины.КлючСвязи) Тогда
			
			ДанныеНоменклатуры.Марки = ПолучитьМаркиПоСтрокеКорзины(СтрокаКорзины.КлючСвязи);
			
		КонецЕсли;
		
		ВыгружаемыеДанные.Добавить(ДанныеНоменклатуры);
		
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ВыгружаемыеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМаркиПоСтрокеКорзины(КлючСвязи)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Марки.НайтиСтроки(СтруктураОтбора);
	
	МассивМарок = Новый Массив;
	
	Для Каждого СтрокаМарка Из СтрокиМарок Цикл
		
		СтруктураМарки = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруМарки();
		
		ЗаполнитьЗначенияСвойств(СтруктураМарки, СтрокаМарка,
			"КодМаркировки, ТипМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер");
		
		МассивМарок.Добавить(СтруктураМарки);
		
	КонецЦикла;
	
	Возврат МассивМарок;
	
КонецФункции

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи)
	
	МассивМарок = ПолучитьМаркиПоСтрокеКорзины(КлючСвязи);
	
	АдресМарок = ПоместитьВоВременноеХранилище(МассивМарок, УникальныйИдентификатор);
	
	Возврат АдресМарок;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьОтборПоГруппе()
	
	ОбщегоНазначения.УстановитьПометкуКнопки(ЭтотОбъект, "ОтборПоГруппеТоваров", ОтборПоГруппеФлаг);
	Элементы.ОтборПоГруппе.Видимость = ОтборПоГруппеФлаг;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоискПоШтрихкодуВручную()
	
	ОбщегоНазначения.УстановитьПометкуКнопки(ЭтотОбъект, "ПоискПоШтрихкодуВручную", ПоискПоШтрихкодуВручнуюФлаг);
	Элементы.ГруппаПоискПоШтрихкоду.Видимость = ПоискПоШтрихкодуВручнуюФлаг;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппыНоменклатуры()
	
	Если НЕ ОтображатьГруппыВПодбореТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование ИЕРАРХИЯ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоГруппОбъект = РеквизитФормыВЗначение("ДеревоГрупп");
	
	Нумератор = 0;
	
	ДобавитьСтрокиВДерево(ДеревоГруппОбъект, , Выборка, Нумератор, НумераторСтраниц);
	
	СформироватьКомандыГрупп(ДеревоГруппОбъект);
	
	ЗначениеВРеквизитФормы(ДеревоГруппОбъект, "ДеревоГрупп");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВДерево(ДеревоГруппОбъект, СтрокаДерева, Выборка, Нумератор, НумераторСтраниц)
	
	НумераторСтраниц = НумераторСтраниц + 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если СтрокаДерева = Неопределено Тогда
			Строка = ДеревоГруппОбъект.Строки.Добавить();
		Иначе
			Строка = СтрокаДерева.Строки.Добавить();
		КонецЕсли;
		Нумератор = Нумератор + 1;
		
		Строка.НомерЭлемента       = Нумератор;
		Строка.Ссылка              = Выборка.Ссылка;
		Строка.НумераторСтраниц  = НумераторСтраниц;
		
	КонецЦикла;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаВнутри = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если НЕ ВыборкаВнутри.Количество() = 0 Тогда
			
			Строка = ДеревоГруппОбъект.Строки.Найти(Выборка.Ссылка, "Ссылка", Истина);
			ДобавитьСтрокиВДерево(ДеревоГруппОбъект, Строка, ВыборкаВнутри, Нумератор, НумераторСтраниц);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКомандыГрупп(ДеревоГруппОбъект)
	
	СчетчикСтраниц = 1;
	КоличествоГруппВОдномРяду 	= ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КоличествоГруппВОдномРядуПодбора");
	КоличествоРядов 			= ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КоличествоРядовГруппВПодборе");
	КоличествоНаОднойСтранице 	= КоличествоРядов * КоличествоГруппВОдномРяду;
	
	Пока СчетчикСтраниц <= НумераторСтраниц Цикл
		
		ПараметрыОтбора = Новый Структура("НумераторСтраниц", СчетчикСтраниц);
		ГруппыНоменклатуры = ДеревоГруппОбъект.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		КоличествоГрупп = ГруппыНоменклатуры.Количество();
		
		Если КоличествоГрупп = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЦелыхКолонок = ОбщегоНазначенияКлиентСервер.ОкруглитьКратно(КоличествоГрупп/КоличествоРядов, 1);
		КоличествоГруппВыравнивания = КоличествоЦелыхКолонок*КоличествоРядов - КоличествоГрупп;
		
		ДобавитьГруппыВыравнивания(КоличествоГруппВыравнивания, ГруппыНоменклатуры);
		
		РазмещатьНаСтраницахВнутри = КоличествоНаОднойСтранице < КоличествоГрупп;
		
		ИмяСтраницы = "Страница" + СчетчикСтраниц;
		СтраницаГрупп = ДобавитьСтраницуГрупп(ИмяСтраницы, Элементы.СтраницыГрупп);
		
		СчетчикПоГруппе = 1;
		СчетчикПоСтранице = 1;
		ГруппаДляРазмещения = Неопределено;
		СтраницыВнутренние = Неопределено;
		СтраницаВнутренняя = Неопределено;
		
		Для Каждого ГруппаНоменклатуры Из ГруппыНоменклатуры Цикл
			
			Если РазмещатьНаСтраницахВнутри Тогда
				
				Если СтраницыВнутренние = Неопределено Тогда
					СтраницыВнутренние = ДобавитьСтраницыПролистывания(ИмяСтраницы, СтраницаГрупп);
				КонецЕсли;
				
				Если СтраницаВнутренняя = Неопределено Тогда
					СтраницаВнутренняя = ДобавитьВнутреннююСтраницу(ИмяСтраницы, ГруппаНоменклатуры, СтраницыВнутренние);
				КонецЕсли;
				
				РазместитьКнопкуВГруппе(ГруппаНоменклатуры, ГруппаДляРазмещения, СтраницаВнутренняя);
				СчетчикПоСтранице = СчетчикПоСтранице + 1;
				
				Если СчетчикПоСтранице > КоличествоНаОднойСтранице Тогда
					СтраницаВнутренняя = Неопределено;
					СчетчикПоСтранице = 1;
				КонецЕсли;
				
			Иначе
				РазместитьКнопкуВГруппе(ГруппаНоменклатуры, ГруппаДляРазмещения, СтраницаГрупп);
			КонецЕсли;
			
			СчетчикПоГруппе = СчетчикПоГруппе + 1;
			
			Если СчетчикПоГруппе > КоличествоРядов Тогда
				ГруппаДляРазмещения = Неопределено;
				СчетчикПоГруппе = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		
	КонецЦикла;
	
	// Горизонт
	
	СчетчикСтраниц = 1;
	Пока СчетчикСтраниц <= НумераторСтраниц Цикл
		
		ПараметрыОтбора = Новый Структура("НумераторСтраниц", СчетчикСтраниц);
		ГруппыНоменклатуры = ДеревоГруппОбъект.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		
		КоличествоГрупп = ГруппыНоменклатуры.Количество();
		
		Если КоличествоГрупп = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЦелыхКолонок = ОбщегоНазначенияКлиентСервер.ОкруглитьКратно(КоличествоГрупп/КоличествоГруппВОдномРяду, 1);
		КоличествоГруппВыравнивания = КоличествоЦелыхКолонок*КоличествоГруппВОдномРяду - КоличествоГрупп;
		
		ДобавитьГруппыВыравнивания(КоличествоГруппВыравнивания, ГруппыНоменклатуры);
		
		РазмещатьНаСтраницахВнутри = КоличествоНаОднойСтранице < КоличествоГрупп;
		
		ИмяСтраницы = "СтраницаГоризонт" + СчетчикСтраниц;
		СтраницаГрупп = ДобавитьСтраницуГрупп(ИмяСтраницы, Элементы.СтраницыГруппГоризонт);
		
		СчетчикПоГруппе = 1;
		СчетчикПоСтранице = 1;
		ГруппаДляРазмещения = Неопределено;
		СтраницыВнутренние = Неопределено;
		СтраницаВнутренняя = Неопределено;
		
		Для Каждого ГруппаНоменклатуры Из ГруппыНоменклатуры Цикл
			
			Если РазмещатьНаСтраницахВнутри Тогда
				
				Если СтраницыВнутренние = Неопределено Тогда
					СтраницыВнутренние = ДобавитьСтраницыПролистывания(ИмяСтраницы, СтраницаГрупп);
				КонецЕсли;
				
				Если СтраницаВнутренняя = Неопределено Тогда
					СтраницаВнутренняя = ДобавитьВнутреннююСтраницу(ИмяСтраницы, ГруппаНоменклатуры, СтраницыВнутренние);
				КонецЕсли;
				
				РазместитьКнопкуВГруппе(ГруппаНоменклатуры, ГруппаДляРазмещения, СтраницаВнутренняя, Истина);
				
				СчетчикПоСтранице = СчетчикПоСтранице + 1;
				Если СчетчикПоСтранице > КоличествоНаОднойСтранице Тогда
					СтраницаВнутренняя = Неопределено;
					СчетчикПоСтранице = 1;
				КонецЕсли;
				
			Иначе
				РазместитьКнопкуВГруппе(ГруппаНоменклатуры, ГруппаДляРазмещения, СтраницаГрупп, Истина);
			КонецЕсли;
			
			СчетчикПоГруппе = СчетчикПоГруппе + 1;
			
			Если СчетчикПоГруппе > КоличествоГруппВОдномРяду Тогда
				ГруппаДляРазмещения = Неопределено;
				СчетчикПоГруппе = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтраницуГрупп(ИмяСтраницы, Родитель)
	
	ЭлементСтраница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Родитель);
	ЭлементСтраница.Вид = ВидГруппыФормы.Страница;
	ЭлементСтраница.РастягиватьПоГоризонтали = Истина;
	ЭлементСтраница.Заголовок = ИмяСтраницы;
	ЭлементСтраница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Возврат ЭлементСтраница;
	
КонецФункции

&НаСервере
Функция ДобавитьСтраницыПролистывания(ИмяСтраницы, Родитель)
	
	СтраницыВнутренние 							= Элементы.Добавить(ИмяСтраницы + "Внутренняя", Тип("ГруппаФормы"), Родитель);
	СтраницыВнутренние.Вид 						= ВидГруппыФормы.Страницы;
	СтраницыВнутренние.ОтображениеСтраниц 		= ОтображениеСтраницФормы.Пролистывание;
	СтраницыВнутренние.РастягиватьПоГоризонтали = Истина;
	СтраницыВнутренние.РастягиватьПоВертикали   = Ложь;
	
	Возврат СтраницыВнутренние;
	
КонецФункции

&НаСервере
Функция ДобавитьВнутреннююСтраницу(ИмяСтраницы, ГруппаНоменклатуры, Родитель)
	
	СтраницаВнутренняя = Элементы.Добавить(ИмяСтраницы + "Внутренняя" + ГруппаНоменклатуры.НомерЭлемента, Тип("ГруппаФормы"), Родитель);
	СтраницаВнутренняя.Вид = ВидГруппыФормы.Страница;
	СтраницаВнутренняя.Заголовок = НСтр("ru = 'Пролистывание'");
	СтраницаВнутренняя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	СтраницаВнутренняя.РастягиватьПоГоризонтали = Истина;
	СтраницаВнутренняя.РастягиватьПоВертикали = Ложь;
	
	Возврат СтраницаВнутренняя;
	
КонецФункции

&НаСервере
Процедура РазместитьКнопкуВГруппе(ГруппаНоменклатуры, ГруппаДляРазмещения, Страница, Горизонт = Ложь)
	
	ИмяКоманды = ?(Горизонт, "НомерЭлементаГоризонт", "НомерЭлемента") + ГруппаНоменклатуры.НомерЭлемента;
	
	Если ГруппаДляРазмещения = Неопределено Тогда
		
		ИмяГруппы = ?(Горизонт, "ГруппаВнутренняяГоризонт", "ГруппаВнутренняя");
		
		ГруппаДляРазмещения 							= Элементы.Добавить(ИмяГруппы + ГруппаНоменклатуры.НомерЭлемента, Тип("ГруппаФормы"), Страница);
		ГруппаДляРазмещения.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДляРазмещения.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаДляРазмещения.РастягиватьПоГоризонтали 	= Ложь;
		ГруппаДляРазмещения.РастягиватьПоВертикали 		= Ложь;
		ГруппаДляРазмещения.ОтображатьЗаголовок 		= Ложь;
		ГруппаДляРазмещения.Отображение 				= ОтображениеОбычнойГруппы.Нет;
		
	КонецЕсли;
	
	КомандаФормы 			= ЭтотОбъект.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие 	= "Подключаемый_ОткрытьГруппу";
	КомандаФормы.Заголовок 	= ?(ГруппаНоменклатуры.Ссылка = Неопределено, " ", ГруппаНоменклатуры.Ссылка);
	
	ЭлементКоманды = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДляРазмещения);
	ЭлементКоманды.ИмяКоманды = ИмяКоманды;
	
	Если ГруппаНоменклатуры.Ссылка = Неопределено Тогда
		ЭлементКоманды.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьГруппу(ИмяКоманды)
	
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "Горизонт", "");
	НомерЭлемента = Число(СтрЗаменить(ИмяКоманды, "НомерЭлемента", ""));
	
	ДеревоГруппОбъект = РеквизитФормыВЗначение("ДеревоГрупп");
	ГруппаНоменклатуры = ДеревоГруппОбъект.Строки.Найти(НомерЭлемента, "НомерЭлемента", Истина);
	
	ВыбраннаяГруппа = ГруппаНоменклатуры.Ссылка;
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПрайсЛист,
		"Группа",
		ВыбраннаяГруппа,
		ЗначениеЗаполнено(ВыбраннаяГруппа),
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
	ПодчиненныеГруппы = ГруппаНоменклатуры.Строки;
	
	Если ПодчиненныеГруппы.Количество() > 0 Тогда
		НомерСтраницы = ПодчиненныеГруппы[0].НумераторСтраниц;
		Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы["Страница" + НомерСтраницы];
		Элементы.СтраницыГруппГоризонт.ТекущаяСтраница = Элементы["СтраницаГоризонт" + НомерСтраницы];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНазадСервер()
	
	Если ГоризонтальнаяОриентацияЭкрана Тогда
		ТекущаяГруппаИмя = Элементы.СтраницыГруппГоризонт.ТекущаяСтраница.Имя;
		НомерСтраницы = Число(СтрЗаменить(ТекущаяГруппаИмя, "СтраницаГоризонт", ""));
	Иначе
		ТекущаяГруппаИмя = Элементы.СтраницыГрупп.ТекущаяСтраница.Имя;
		НомерСтраницы = Число(СтрЗаменить(ТекущаяГруппаИмя, "Страница", ""));
	КонецЕсли;
	
	ДеревоГруппОбъект = РеквизитФормыВЗначение("ДеревоГрупп");
	ГруппаНоменклатуры = ДеревоГруппОбъект.Строки.Найти(ВыбраннаяГруппа, "Ссылка", Истина);
	
	РодительГруппы = Неопределено;
	Если ЗначениеЗаполнено(ВыбраннаяГруппа) Тогда
		РодительГруппы = ВыбраннаяГруппа.Родитель;
	КонецЕсли;
	
	Если РодительГруппы = Неопределено Тогда
		
		ВыбраннаяГруппа = Неопределено;
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			ПрайсЛист,
			"Группа",
			Неопределено,
			Ложь,
			ВидСравненияКомпоновкиДанных.ВИерархии);
		
	Иначе
		
		Если НЕ ГруппаНоменклатуры.Строки.Количество() = 0 Тогда
			Элементы.СтраницыГрупп.ТекущаяСтраница = Элементы["Страница" + ГруппаНоменклатуры.НумераторСтраниц];
			Элементы.СтраницыГруппГоризонт.ТекущаяСтраница = Элементы["СтраницаГоризонт" + ГруппаНоменклатуры.НумераторСтраниц];
		КонецЕсли;
		
		ВыбраннаяГруппа = РодительГруппы;
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			ПрайсЛист,
			"Группа",
			ВыбраннаяГруппа,
			ЗначениеЗаполнено(ВыбраннаяГруппа),
			ВидСравненияКомпоновкиДанных.ВИерархии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппыВыравнивания(КоличествоГруппВыравнивания, ГруппыНоменклатуры)
	
	Для Счетчик = 1 По КоличествоГруппВыравнивания Цикл
		
		СлучайныйИдентификатор = Новый УникальныйИдентификатор();
		СлучайныйИдентификатор = СтрЗаменить(Строка(СлучайныйИдентификатор), "-", "");
		
		ГруппаВыравнивания = Новый Структура;
		ГруппаВыравнивания.Вставить("Ссылка", Неопределено);
		ГруппаВыравнивания.Вставить("НомерЭлемента", СлучайныйИдентификатор);
		ГруппыНоменклатуры.Добавить(ГруппаВыравнивания);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовок()
	
	Если ЭтоЧекКоррекции Тогда
		
		ЭтотОбъект.Заголовок = НСтр("ru = 'Коррекция: Подбор товаров'");
		
	ИначеЕсли РежимПодбора = "ПодборВВозврат" Тогда
		
		ЭтотОбъект.Заголовок = НСтр("ru = 'Возврат: Подбор товаров'");
		
	ИначеЕсли РежимПодбора = "Подбор" Тогда
		
		ЭтотОбъект.Заголовок = НСтр("ru = 'Продажа: Подбор товаров'");
		
	ИначеЕсли РежимПодбора = "Выбор" Тогда
		
		ЭтотОбъект.Заголовок = НСтр("ru = 'Выбор товара'");
		
	ИначеЕсли РежимПодбора = "ПодборБезСуммы" Тогда
		
		ЭтотОбъект.Заголовок = НСтр("ru = 'Подбор товаров'");
		
	ИначеЕсли РежимПодбора = "ПодборВЗаказКлиента" Тогда
		
		ЭтотОбъект.Заголовок = НСтр("ru = 'Заказ: Подбор товаров'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИсточникДанныхПрайсЛиста(Параметры)
	
	Если НЕ РежимПодбора = "ПодборВВозврат" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьБуферПодбораТоваров(Параметры);
	
	ТекстЗапроса = ПрайсЛист.ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК Количество", "ИсточникДанных.Количество КАК Количество");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ЕстьСкидка", "ИсточникДанных.ЕстьСкидка КАК ЕстьСкидка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Номенклатура", "РегистрСведений.БуферПодбораТоваров");
	
	ПрайсЛист.ТекстЗапроса = ТекстЗапроса;
	ПрайсЛист.ОсновнаяТаблица = "РегистрСведений.БуферПодбораТоваров";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБуферПодбораТоваров(Параметры)
	
	АдресВременногоХранилища = ?(Параметры.Свойство("АдресВоВременномХранилище"),
		Параметры.АдресВоВременномХранилище, Неопределено);
	
	ТаблицаТоваровДляВозврата = Продажи.ПолучитьТаблицуТоваровЧекаВозврата(
		Параметры.ЧекПродажи, АдресВременногоХранилища, Параметры.ЧекВозврата);
	
	Если ТаблицаТоваровДляВозврата.Количество() = 0 Тогда
		
		
		ТекстСообщения = НСтр("ru = 'Нет товаров к возврату'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.БуферПодбораТоваров.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваровДляВозврата Цикл
		
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицыТоваров);
		Запись.Цена = СтрокаТаблицыТоваров.ЦенаСУчетомСкидки;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоРежимуПодбора()
	
	СписокВидимость = "МаксимальноеКоличествоИнфо, МаксимальноеКоличествоИнфоГоризонт";
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокВидимость,
		"Видимость", РежимПодбора = "ПодборВВозврат");
	
	СписокВидимость = "Шапка, ГруппаТовар, ГруппаТоварГоризонт, Готово, ГотовоГоризонт";
	
	Если РежимПодбора = "Выбор" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокВидимость,
			"Видимость", Ложь);
		
	КонецЕсли;
	
	Если РежимПодбора = "ПодборБезСуммы" Тогда
		
		СписокВидимость = "СуммаПозиций, СуммаПозицийГоризонт";
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокВидимость,
			"Видимость", Ложь);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМаксКоличествоПриВозврате(ТекущиеДанные)
	
	МаксимальноеКоличество = ТекущиеДанные.Количество;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Количество, КоличествоГоризонт",
		"МаксимальноеЗначение", МаксимальноеКоличество);
	
	МаксКоличество = Формат(МаксимальноеКоличество, ФорматКоличественныхПолей);
	
	ШаблонИнформации = НСтр("ru = 'максимальное количество = %МаксКоличество%'");
	МаксимальноеКоличествоИнфо = СтрЗаменить(ШаблонИнформации, "%МаксКоличество%", МаксКоличество);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеИзбранное()
	
	Если Избранное Тогда
		
		Элементы.ОтобразитьИзбранноеТолько.Видимость = Ложь;
		Элементы.ОтобразитьИзбранноеВсе.Видимость = Истина;
	Иначе
		
		Элементы.ОтобразитьИзбранноеТолько.Видимость = Истина;
		Элементы.ОтобразитьИзбранноеВсе.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПриИзменении()
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		ПрайсЛист,
		"Избранное",
		Избранное,
		Избранное,
		ВидСравненияКомпоновкиДанных.Равно
	);
	
	НастроитьОтображениеИзбранное();
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
	Если ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана Тогда
		ГоризонтальнаяОриентацияЭкрана    = Истина;
		Элементы.ГруппаВерх.Видимость     = Ложь;
		Элементы.ГруппаНизПраво.Видимость = Истина;
		Элементы.ГруппаГотово.Видимость   = Ложь;
		
	Иначе
		ГоризонтальнаяОриентацияЭкрана    = Ложь;
		Элементы.ГруппаВерх.Видимость     = Истина;
		Элементы.ГруппаНизПраво.Видимость = Ложь;
		Элементы.ГруппаГотово.Видимость   = Истина;
	КонецЕсли;
	
	УстановитьВидимостьГруппНоменклатуры();
	
КонецПроцедуры

#КонецОбласти




