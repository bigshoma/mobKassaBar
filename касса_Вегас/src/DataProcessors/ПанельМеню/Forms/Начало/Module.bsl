
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры) Экспорт
	
	ВводитьАкцизныеМарки = ИспользуетсяЕГАИС;
	ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(НоменклатураПоШтрихкоду, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
		
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(НоменклатураПоШтрихкоду);
		
		ПродажиКлиент.СоздатьЧек(МассивНоменклатуры, ДополнительныеПараметры, Истина);
		
		АкцизныеМарки.Очистить();
		
	Иначе
		
		ПулТоваров.Добавить(НоменклатураПоШтрихкоду);
		
		Если ЗначениеЗаполнено(НоменклатураПоШтрихкоду.Марки) Тогда
			
			ВведенныеАкцизныеМарки = НоменклатураПоШтрихкоду.Марки;
			
			Для Каждого ВведеннаяМарка Из ВведенныеАкцизныеМарки Цикл
				
				АкцизныеМарки.Добавить(ВведеннаяМарка, ВведеннаяМарка);
			КонецЦикла;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
			ДополнительныеПараметры.ВременноеЗакрытиеДиалога = Ложь;
			ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПотоковоеСканирование") И ПулТоваров.Количество() > 0 Тогда
		
		ПродажиКлиент.СоздатьЧек(ПулТоваров.ВыгрузитьЗначения(), ДополнительныеПараметры, Истина);
		
		ПулТоваров.Очистить();
		АкцизныеМарки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АдресМарокЧекаВХранилище() Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(АкцизныеМарки.ВыгрузитьЗначения(), УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АкцизныеМарки = Новый Массив;
	
	НастроитьОформлениеПолей();
	
	НастроитьФормуПоЗначениямНастроек();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
	ОткрыватьЧтоНового = ПараметрыСеанса.ОткрыватьЧтоНового;
	ОбновлениеБД = ПараметрыСеанса.ОбновлениеБД;
	
	ОбновитьИнформациюПоКассовойСмене();
	
	ОпределитьТекущегоКассира();
	
	// Демоверсия
	НастроитьФормуДляДемоверсии();
	
	ОбновитьВиджеты();
	
	Элементы.ПоказатьОшибкуСинхронизации.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		ОбновитьВиджеты();
		
	ИначеЕсли ИмяСобытия = "ВыполненОбмен" Тогда
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ЗагружатьНастройки() Тогда
			ОбновитьПовторноИспользуемыеЗначения();
			Оповестить("ИзмененыЗначенияНастроек");
		КонецЕсли;
		
		НастроитьФормуПоЗначениямНастроек();
		ОбновитьВиджеты();
		
	ИначеЕсли ИмяСобытия = "ИзмененаКассоваяСмена" Тогда
		
		ОбновитьИнформациюПоКассовойСмене();
		
	ИначеЕсли ИмяСобытия = "ОбновленоМестоположение" Тогда
		
		ОпределитьМестоположение();
		
	ИначеЕсли ИмяСобытия = "ИнициализированАсинхронныйСканер" Тогда
		
		НастроитьЭлементыАсинхронногоСканера();
		
	ИначеЕсли ИмяСобытия = "ЗаписанЗаказ" Тогда
		
		ОбновитьВиджетЗаказы();
		
	ИначеЕсли ИмяСобытия = "КассоваяОперация" Тогда
		
		Если ОткрыватьПодборПослеПробитияЧека И ТипЗнч(Параметр) = Тип("ДокументСсылка.Чек") Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьПодборПослеПробитияЧека", 1, Истина);
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяСобытия = "ЗакрытьМастер" Тогда
		
		ОбновитьВиджет1СКасса();
		
		
	ИначеЕсли НЕ СтрНайти(ИмяСобытия,"СинхронизацияВФоне") = 0 Тогда
		
		ОбработатьДанныеСинхронизацииВФоне();
		
	ИначеЕсли ИмяСобытия = "ВыходПользователя" Тогда
		
		ТекущийПользователь = Неопределено;
		ВыбранныйПользователь = Неопределено;
		Авторизован = Ложь;
		
		УстановитьЗаголовокКассир();
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СообщениеРежимСинхронизацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.РежимСинхронизации", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПараметрыУчетаНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПараметрыУчета", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПараметрыСинхронизацииНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПараметрыСинхронизации", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДемоверсияНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.Демоверсия",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСменеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельМеню.Форма.Касса");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеНезаполненныеПараметрыУчетаЕГАИСНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПараметрыУчета", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеУстройствоПечатиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПодключаемоеОборудованиеУстройствоПечати", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СообщениеНеЗаполненЗаводскойНомерККМНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПодключаемоеОборудованиеУстройствоПечати", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПредупреждениеНажатие(Элемент)
	
	ИнициализироватьАсинхронныйСканер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСканерНеИнициализованНажатие(Элемент)
	
	ИнициализироватьАсинхронныйСканер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказыНаСегодня(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФильтрПериод", "ЗаказыНаСегодня");
	
	ОткрытьФорму("Обработка.ПанельМеню.Форма.Заказы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказыНаЗавтра(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФильтрПериод", "ЗаказыНаЗавтра");
	
	ОткрытьФорму("Обработка.ПанельМеню.Форма.Заказы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПодборТоваров", ЭтотОбъект);
	ПродажиКлиент.ОткрытьПодборТоваров(ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СканированиеШтрихкода(Элемент)
	
	Если ПродажиВызовСервера.ПроверитьВозможностьВводаЧека() Тогда
		ОчиститьСообщения();
		
		АкцизныеМарки.Очистить();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
		ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
		
		ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПользовательНажатие(Элемент)
	
	ИзменитьПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПользовательНажатие(Элемент)
	ИзменитьПользователя();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьКоординаты(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ОбновитьКоординатыМестоположения();
		
	#Иначе
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКоординатыНаКарте(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если ЗначениеЗаполнено(ДанныеМестоположения) Тогда
			ГеоКоординаты = ГеолокацияКлиент.ПолучитьКоординатыПоМестоположению(ДанныеМестоположения);
			ПоказатьНаКарте(ГеоКоординаты);
		КонецЕсли;
	#Иначе
		
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ИнициализироватьАсинхронныйСканер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	СинхронизацияКлиент.ЗапуститьОбменВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуСинхронизации(Команда)
	
	ОткрытьФорму("Обработка.ПанельМеню.Форма.Сервис");
	
	Оповестить("ОткрытьОшибкуСинхронизацииВФормеСервис");
	
	Элементы.ПоказатьОшибкуСинхронизации.Видимость = Ложь;
	
КонецПроцедуры

//@РегистрацияВОблаке
&НаКлиенте
Процедура НачатьРегистрациюВОблаке(Команда)
	
	РегистрацияВОблакеКлиент.ОткрытьМастерРегистрации();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьДанныеСинхронизацииВФоне()
	
	Если НЕ ПараметрыСинхронизацииВФоне.ОбменИнициализирован ИЛИ ПараметрыСинхронизацииВФоне.Успешно Тогда
		
		Элементы.Синхронизировать.Доступность = Истина;
		
		Если Элементы.ПоказатьОшибкуСинхронизации.Видимость Тогда
			
			Элементы.ПоказатьОшибкуСинхронизации.Видимость = Ложь;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ПараметрыСинхронизацииВФоне.Выполняется Тогда
		
		Элементы.Синхронизировать.Доступность = Ложь;
		
		Если Элементы.ПоказатьОшибкуСинхронизации.Видимость Тогда
			Элементы.ПоказатьОшибкуСинхронизации.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ ПараметрыСинхронизацииВФоне.Успешно Тогда
		
		Элементы.Синхронизировать.Доступность = Истина;
		Элементы.ПоказатьОшибкуСинхронизации.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПослеПробитияЧека()
	
	Если ВводДоступен() Тогда
		
		ОткрытьПодборТоваров(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия()
	
	Если ОбновлениеБД Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьБД", 0.1, Истина);
		
	ИначеЕсли ОткрыватьЧтоНового Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьЧтоНового", 0.1, Истина);
		
	ИначеЕсли ОткрыватьВводКодаДоступа Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьВводКодаДоступа", 0.1, Истина);
		
	ИначеЕсли ИспользуетсяАсинхронныйСканер И НЕ БылаПопыткаИнициализироватьСканер Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьАссинхронныйСканерШтрихкодов", 0.1, Истина);
		
	Иначе
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьМестоположение", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьБД()
	
	ОписаниеОбновлениеБД = Новый ОписаниеОповещения("ПослеОбновленияБД", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ОбновлениеБД",, ЭтотОбъект,,,,ОписаниеОбновлениеБД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьЧтоНового()
	
	ОписаниеЧтоНового = Новый ОписаниеОповещения("ПослеЧтоНового", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ЧтоНового",, ЭтотОбъект,,,,ОписаниеЧтоНового);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьВводКодаДоступа()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяУчетПоКассирам() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйПользователь) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АвторизованныйПользователь", ТекущийПользователь);
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеВыборКассира", ЭтотОбъект);
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораПользователя", ПараметрыФормы, ЭтотОбъект,
			,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ВводКодаДоступаЗавершение", ЭтотОбъект);
		
		ПараметрыКодаДоступа = Новый Структура;
		ПараметрыКодаДоступа.Вставить("УстановленныйКодДоступа", УстановленныйКодДоступа);
		ПараметрыКодаДоступа.Вставить("ФИО", ФИОВыбранногоКассира);
		ПараметрыКодаДоступа.Вставить("ЗапретИзмененияПользователя", КассоваяСменаОткрыта);
		
		ОбщегоНазначенияКлиент.ВвестиКодДоступа(ПараметрыКодаДоступа, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКодаДоступаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Если НЕ Авторизован Тогда
			
			ВыбранныйПользователь = Ложь;
			
			Подключаемый_ОткрытьВводКодаДоступа();
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		УстановитьАвторизациюВыбранногоПользователя();
		
	КонецЕсли;
	
	ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьАссинхронныйСканерШтрихкодов()
	
	ИнициализироватьАсинхронныйСканер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьМестоположение()
	
	ОбновитьМестоположение();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджеты()
	
	ОбновитьВиджетЗаказы();
	
	ОбновитьВиджет1СКасса();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоординатыМестоположения()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Элементы.СтраницыГео.ТекущаяСтраница = Элементы.СтраницаИдетОбновление;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКоординатыМестоположения", 0.1, Истина);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоординатыМестоположения()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ДанныеМестоположения = ГеолокацияКлиент.ОбновитьМестоположение();
		
		Если НЕ ДанныеМестоположения = Неопределено Тогда
			
			Местоположение = ГеолокацияКлиент.ПолучитьПредставлениеМестоположения(ДанныеМестоположения.Координаты);
			
		Иначе
			Местоположение = НСтр("ru = 'Не удалось определить'");
		КонецЕсли;
		
		Элементы.СтраницыГео.ТекущаяСтраница = Элементы.СтраницаКоординаты;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьМестоположение()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ИмяПровайдераГеолокации = ОбщегоНазначенияВызовСервера.ПолучитьПараметрСеанса("ИмяПровайдераГеолокации");
		
		Если ЗначениеЗаполнено(ИмяПровайдераГеолокации) Тогда
			
			ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(ИмяПровайдераГеолокации);
			
			Если НЕ ДанныеМестоположения = Неопределено Тогда
				Местоположение = ГеолокацияКлиент.ПолучитьПредставлениеМестоположения(ДанныеМестоположения.Координаты);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМестоположение()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяГеолокация() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКоординатыМестоположения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры)
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоКассовойСмене()
	
	Продажи.ОбновитьИнформациюПоКассовойСмене(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ИнформацияОСмене", "Видимость", КассоваяСменаПросрочена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаПодборТоваров, ГруппаСканированиеШтрихкода", "Доступность", НЕ КассоваяСменаПросрочена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЧтоНового(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеЧтоНовогоСервер();
	
	ПроверитьУстановленныеДрайверы();
	
	ОткрыватьЧтоНового = Ложь;
	
	ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияБД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		ОбновлениеБД = Ложь;
		
		ОткрыватьЧтоНового = Истина;
		
		ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия();
		
	Иначе
		ЗавершитьРаботуСистемы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	ИспользуетсяЕГАИС = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяЕГАИСПриПродаже();
	ОткрыватьПодборПослеПробитияЧека = ЗначениеНастроекВызовСервераПовтИсп.ОткрыватьПодборПослеПробитияЧека();
	
	ЕстьНеустановленныеПараметры = Ложь;
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.УстановленРежимСинхронизации() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСообщениеРежимСинхронизации", "Видимость", Истина);
		ЕстьНеустановленныеПараметры = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСообщениеРежимСинхронизации", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если ЗначениеНастроекВызовСервераПовтИсп.УстановленРежимСинхронизации()
		И НЕ ЗначениеНастроекВызовСервераПовтИсп.ЗаполненыПараметрыСинхронизации()
		И НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСообщениеПараметрыСинхронизации", "Видимость", НЕ ЕстьНеустановленныеПараметры);
		ЕстьНеустановленныеПараметры = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСообщениеПараметрыСинхронизации", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ЗаполненыПараметрыУчета() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСообщениеПараметрыУчета", "Видимость", НЕ ЕстьНеустановленныеПараметры);
		ЕстьНеустановленныеПараметры = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСообщениеПараметрыУчета", "Видимость", Ложь);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, 
		"СообщениеФормированиеЧековНевозможно",
		"Видимость",
		ЕстьНеустановленныеПараметры);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСканированиеШтрихкода", "Видимость", 
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() И НЕ ИспользуетсяАсинхронныйСканер);
		
	
	Если ИспользуетсяЕГАИС Тогда
		
		ОтобразитьСообщение = Ложь;
		
		Элементы.ГруппаЕГАИС.Видимость = Истина;
		
		СписокНезаполненныхПараметров = ЗначениеНастроекВызовСервераПовтИсп.НезаполненныеПараметрыЕГАИС();
		
		УстановленоОборудованиеПечати = ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати());
		Элементы.ГруппаУстройствоПечати.Видимость = НЕ УстановленоОборудованиеПечати;
		
		Если НЕ УстановленоОборудованиеПечати Тогда
			
			ОтобразитьСообщение = Истина;
		КонецЕсли;
		
		Если НЕ СписокНезаполненныхПараметров.Количество() = 0 Тогда
			
			ТекстСообщения = "";
			
			ЗначениеЗаводскойНомерККМ = СписокНезаполненныхПараметров.НайтиПоЗначению("ЗаводскойНомерККМ");
			
			Если ЗначениеЗаводскойНомерККМ = Неопределено ИЛИ НЕ УстановленоОборудованиеПечати Тогда
				
				Элементы.ГруппаЗаводскойНомерККМ.Видимость = Ложь;
			Иначе
				
				Элементы.ГруппаЗаводскойНомерККМ.Видимость = Истина;
				ОтобразитьСообщение = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаводскойНомерККМ = Неопределено Тогда
				
				СписокНезаполненныхПараметров.Удалить(ЗначениеЗаводскойНомерККМ);
			КонецЕсли;
			
			Если НЕ СписокНезаполненныхПараметров.Количество() = 0 Тогда
				
				Для Каждого Поле Из СписокНезаполненныхПараметров Цикл
					
					ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), ", " + Поле.Представление, Поле.Представление);
					
				КонецЦикла;
				
				Если СписокНезаполненныхПараметров.Количество() = 1 Тогда
					ТекстСообщенияНачало = НСтр("ru = 'Не заполнено поле'");
				Иначе
					ТекстСообщенияНачало = НСтр("ru = 'Не заполнены поля'");
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщенияНачало + " " + ТекстСообщения;
				
				Элементы.СообщениеНезаполненныеПараметрыУчетаЕГАИС.Заголовок = ТекстСообщения;
				Элементы.ГруппаПараметрыУчетаЕГАИС.Видимость = Истина;
				ОтобразитьСообщение = Истина;
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаПараметрыУчетаЕГАИС", "Видимость", Ложь);
					
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаЗаводскойНомерККМ, ГруппаПараметрыУчетаЕГАИС", "Видимость", Ложь);
		КонецЕсли;
		
		Элементы.СообщениеПробитиеАлкогольныхЧековНевозможно.Видимость = ОтобразитьСообщение;
	Иначе
		
		Элементы.ГруппаЕГАИС.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаГео", "Видимость", 
		ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяГеолокация()
	);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаАвторизация", "Видимость", 
		ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяУчетПоКассирам()
	);
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ВиджетЗаказы", "Видимость", 
		ЗначениеНастроекВызовСервераПовтИсп.ИспользуютсяЗаказыКлиентов()
	);
	
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект,
		"ПодборТоваровНадпись, СканированиеШтрихкодаНадпись, ЗаказыНаСегодняНадпись, ЗаказыНаЗавтраНадпись");
	
	Если ЗначениеНастроекПовтИсп.ИспользуетсяОбменВФоне() Тогда
		
		Элементы.Синхронизировать.Видимость = Истина;
	Иначе
		
		Элементы.Синхронизировать.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		ПараметрыЧека.ПараметрыФормы.СозданиеИзПодбора = Истина;
		ПараметрыЧека.ПараметрыФормы.АдресВоВременномХранилище = Результат.АдресВоВременномХранилище;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПослеЧтоНовогоСервер()
	
	ПараметрыСеанса.ОткрыватьЧтоНового = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляДемоверсии()
	
	Элементы.Демоверсия.Видимость = ЗначениеНастроекПовтИсп.ЭтоДемоверсия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановленныеДрайверы()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования()
			= ПредопределенноеЗначение("Перечисление.ТипыУстройствСканирования.ВнешнийСканерШтрихкодов") Тогда
			
			ОборудованиеСканированияШтрихкодов = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеСканированияШтрихкодов();
			
			Если ЗначениеЗаполнено(ОборудованиеСканированияШтрихкодов)
				И ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ОборудованиеСканированияШтрихкодов, "ДрайверОборудования")
					= ПредопределенноеЗначение("Справочник.ДрайверыОборудования.Драйвер1СУстройствоВвода") Тогда
				
				ВерсияДрайвераСканераВМакете = "";
				ВерсияДрайвераСканера = "";
				ДрайверСканераУстановлен = Ложь;
				
				ПодключаемоеОборудованиеКлиент.ПолучитьВерсиюДрайвераОборудования(
					ЭтотОбъект,
					ОборудованиеСканированияШтрихкодов,
					ВерсияДрайвераСканера,
					ВерсияДрайвераСканераВМакете,
					ДрайверСканераУстановлен);
				
				Если Лев(ВерсияДрайвераСканера , 5) = "1.0.0" Тогда
					
					Если ДрайверСканераУстановлен И НЕ ВерсияДрайвераСканераВМакете = ВерсияДрайвераСканера Тогда
						
						Оповещение = Новый ОписаниеОповещения("ОбновитьДрайверСканераШтрихкода", ЭтотОбъект);
						
						ТекстПредупреждения = НСтр("ru = 'Для корректной работы сканера штрихкода
						|необходимо обновить драйвер 1С:Устройство ввода.'");
						ПоказатьПредупреждение(Оповещение, ТекстПредупреждения);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДрайверСканераШтрихкода(ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиент.УстановитьДрайверИзМакета(ПредопределенноеЗначение("Справочник.ДрайверыОборудования.Драйвер1СУстройствоВвода"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетЗаказы()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуютсяЗаказыКлиентов() Тогда
		
		Возврат;
	КонецЕсли;
	
	// на сегодня
	СостояниеЗаказовНаСегодня = Документы.ЗаказКлиента.ПолучитьСостояниеЗаказовНаСегодня();
	
	Если СостояниеЗаказовНаСегодня.НеСогласовано = 0 И СостояниеЗаказовНаСегодня.Согласовано = 0 Тогда
		
		Если СостояниеЗаказовНаСегодня.Выполнено = 0 Тогда
			
			Элементы.ЗаказыНаСегодняВсеВыполнено.Видимость = Ложь;
			Элементы.ЗаказыНаСегодняЗаказовНет.Видимость = Истина;
		
		Иначе
			
			Элементы.ЗаказыНаСегодняВсеВыполнено.Видимость = Истина;
			Элементы.ЗаказыНаСегодняЗаказовНет.Видимость = Ложь;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ЗаказыНаСегодняСогласовано, ЗаказыНаСегодняНеСогласовано", "Видимость",
			Ложь
		);
		
	Иначе
		
		ШаблонНеСогласовано = НСтр("ru = 'Не согласовано: %НеСогласовано%'");
			Элементы.ЗаказыНаСегодняНеСогласовано.ТекстНевыбраннойКартинки =
			СтрЗаменить(ШаблонНеСогласовано, "%НеСогласовано%",
				СостояниеЗаказовНаСегодня.НеСогласовано
		);
	
		ШаблонСогласовано = НСтр("ru = 'Согласовано: %Согласовано%'");
			Элементы.ЗаказыНаСегодняСогласовано.ТекстНевыбраннойКартинки = СтрЗаменить(ШаблонСогласовано, "%Согласовано%",
				СостояниеЗаказовНаСегодня.Согласовано
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, 
			"ЗаказыНаСегодняЗаказовНет, ЗаказыНаСегодняВсеВыполнено", "Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ЗаказыНаСегодняСогласовано, ЗаказыНаСегодняНеСогласовано", "Видимость",
			Истина
		);
	
	КонецЕсли;
	
	
	// на завтра
	СостояниеЗаказовНаЗавтра = Документы.ЗаказКлиента.ПолучитьСостояниеЗаказовНаЗавтра();
	
	Если СостояниеЗаказовНаЗавтра.НеСогласовано = 0 И СостояниеЗаказовНаЗавтра.Согласовано = 0 Тогда
		
		Если СостояниеЗаказовНаЗавтра.Выполнено = 0 Тогда
			
			Элементы.ЗаказыНаЗавтраВсеВыполнено.Видимость = Ложь;
			Элементы.ЗаказыНаЗавтраЗаказовНет.Видимость = Истина;

		Иначе
			
			Элементы.ЗаказыНаЗавтраВсеВыполнено.Видимость = Истина;
			Элементы.ЗаказыНаЗавтраЗаказовНет.Видимость = Ложь;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"ЗаказыНаЗавтраСогласовано, ЗаказыНаЗавтраНеСогласовано",
			"Видимость",
			Ложь
		);

	Иначе
		
		ШаблонНеСогласовано = НСтр("ru = 'Не согласовано: %НеСогласовано%'");
			Элементы.ЗаказыНаЗавтраНеСогласовано.ТекстНевыбраннойКартинки = СтрЗаменить(ШаблонНеСогласовано, "%НеСогласовано%",
			СостояниеЗаказовНаЗавтра.НеСогласовано
		);
		
		ШаблонСогласовано = НСтр("ru = 'Согласовано: %Согласовано%'");
			Элементы.ЗаказыНаЗавтраСогласовано.ТекстНевыбраннойКартинки = СтрЗаменить(ШаблонСогласовано, "%Согласовано%",
			СостояниеЗаказовНаЗавтра.Согласовано
		);

		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, 
			"ЗаказыНаЗавтраЗаказовНет, ЗаказыНаЗавтраВсеВыполнено",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, 
			"ЗаказыНаЗавтраСогласовано, ЗаказыНаЗавтраНеСогласовано",
			"Видимость",
			Истина
		);
	
	КонецЕсли;
	
КонецПроцедуры

//@РегистрацияВОблаке
&НаСервере
Процедура ОбновитьВиджет1СКасса()
	
	Если РегистрацияВОблакеВызовСервера.ОтображатьВиджет1СКассаНаРабочемСтоле() Тогда
		
		Элементы.Виджет1СКасса.Видимость = Истина;
		
		ЗаголовокНадписи = РегистрацияВОблакеВызовСервера.ПолучитьЗаголовокВиджета1СКасса();
		Элементы.НачатьРегистрациюВОблаке.Высота = СтрЧислоСтрок(ЗаголовокНадписи) + 1;
		Элементы.НачатьРегистрациюВОблаке.Заголовок = ЗаголовокНадписи;
	Иначе
		
		Элементы.Виджет1СКасса.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Виджет1СКассаПодвал.Видимость =
		РегистрацияВОблакеВызовСервера.ОтображатьВиджет1СКассаНаРабочемСтолеПодвал();
	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеПолей()
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтотОбъект, 
		"СообщениеРежимСинхронизации, СообщениеПараметрыУчета, СообщениеФормированиеЧековНевозможно,
		|СообщениеПробитиеАлкогольныхЧековНевозможно, СообщениеПараметрыСинхронизации,
		|СообщениеНезаполненныеПараметрыУчетаЕГАИС, СообщениеУстройствоПечати, СообщениеНеЗаполненЗаводскойНомерККМ");
		
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект, "НадписьПродажа,
		|ПодсказкаСообщениеРежимСинхронизации, ПодсказкаСообщениеПараметрыУчета,
		|ПодсказкаСообщениеПараметрыСинхронизации, Демоверсия,
		|ПодсказкаПараметрыУчетаЕГАИС, ПодсказкаПараметрыУстройствоПечати,
		|ПодсказкаЗаводскойНомерККМ, НадписьГеоИдетОбновление"
	);
	
	ОбщегоНазначения.УстановитьЦветПредупреждающихПолей(ЭтотОбъект, "НадписьСканерНеИнициализирован");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьАсинхронныйСканер(Принудительно = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Принудительно", Принудительно);
	
	Оповещение = Новый ОписаниеОповещения("ЗавершениеИнициализироватьАсинхронныйСканер", ЭтотОбъект, ДополнительныеПараметры);
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеИнициализироватьАсинхронныйСканер(Результат, ДополнительныеПараметры) Экспорт
	
	БылаПопыткаИнициализироватьСканер = Истина;
	
	Если НЕ ДополнительныеПараметры.Принудительно Тогда
		ЗапуститьПродолжитьОчередьПроцедурПослеОткрытия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	АсинхронныйСканерИнициализирован = ПодключаемоеОборудованиеВызовСервера.СканерШтрихкодовИнициализирован();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаИнициализацияСканераПредупреждение", "Видимость",
		ИспользуетсяАсинхронныйСканер И НЕ АсинхронныйСканерИнициализирован
	);
	
КонецПроцедуры

// Текущий кассир

&НаКлиенте
Процедура ИзменитьПользователя()
	
	Если ЗначениеЗаполнено(КассоваяСмена) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = НСтр("ru = 'Изменение кассира невозможно. Необходимо закрыть кассовую смену.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОповещениеВыборКассира", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АвторизованныйПользователь", ТекущийПользователь);
		
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбораПользователя", ПараметрыФормы,
			ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКассир()
	
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		
		РеквизитыПользователя = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ТекущийПользователь, "Наименование, КодДоступа");
		
		УстановленныйКодДоступа = РеквизитыПользователя.КодДоступа;
		
		Элементы.НадписьПользователь.Заголовок = РеквизитыПользователя.Наименование;
		
		ОбщегоНазначения.СброситьЦветПолей(ЭтотОбъект, "НадписьПользователь");
		
	Иначе
		
		Элементы.НадписьПользователь.Заголовок = НСтр("ru = 'Кассир не определен'");
		
		ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтотОбъект, "НадписьПользователь");
		
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("Кассир", ТекущийПользователь);
	ОбщегоНазначенияВызовСервера.УстановитьПараметрСеанса("ТекущийПользователь", ТекущийПользователь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущегоКассира()
	
	// пользователь текущей смены
	ОткрыватьВводКодаДоступа = Ложь;
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяУчетПоКассирам() Тогда
		Возврат;
	КонецЕсли;
	
	КассирОткрытойСмены = Документы.КассоваяСмена.КассирОткрытойСмены();
	
	Если КассоваяСменаОткрыта Тогда
		
		Если ЗначениеЗаполнено(КассирОткрытойСмены) Тогда
			
			ВыбранныйПользователь = КассирОткрытойСмены;
			
			РеквизитыВыбранногоПользователя = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(
				ВыбранныйПользователь, "КодДоступа, Наименование"
			);
			
			Если ЗначениеЗаполнено(РеквизитыВыбранногоПользователя.КодДоступа) Тогда
				
				УстановленныйКодДоступа = РеквизитыВыбранногоПользователя.КодДоступа;
				ОткрыватьВводКодаДоступа = Истина;
				ФИОВыбранногоКассира = РеквизитыВыбранногоПользователя.Наименование;
				
			Иначе
				ОткрыватьВводКодаДоступа = Ложь;
				УстановитьАвторизациюВыбранногоПользователя();
			КонецЕсли;
			
		Иначе
			
			УстановитьАвторизациюВыбранногоПользователя();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.КодДоступа КАК КодДоступа
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.КодДоступа = """"
	|	И НЕ Пользователи.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.КодДоступа КАК КодДоступа
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	КоличествоКодовДоступа = РезультатЗапроса[0].Выбрать().Количество();
	ВыборкаКассиров = РезультатЗапроса[1].Выбрать();
	
	КоличествоКассиров = ВыборкаКассиров.Количество();
	
	Если КоличествоКассиров = 0 Тогда
		ОткрыватьВводКодаДоступа = Ложь;
		
		ТекущийПользователь =  Неопределено;
		ВыбранныйПользователь = ТекущийПользователь;
		Элементы.ГруппаАвторизация.Видимость = Ложь;
		
		УстановитьАвторизациюВыбранногоПользователя();
		
	ИначеЕсли КоличествоКассиров = 1 И КоличествоКодовДоступа = 1 Тогда
		
		ВыборкаКассиров.Следующий();
		ТекущийПользователь = ВыборкаКассиров.Ссылка;
		ОткрыватьВводКодаДоступа = Истина;
		
		УстановленныйКодДоступа = ВыборкаКассиров.КодДоступа;
		
	ИначеЕсли КоличествоКассиров >= 1 Тогда
		
		ТекущийПользователь = Неопределено;
		ОткрыватьВводКодаДоступа = Истина;
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			
			ВыбранныйПользователь = ТекущийПользователь;
			
			РеквизитыВыбранногоПользователя = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(
				ВыбранныйПользователь, "КодДоступа, Наименование"
			);
			
			Если ЗначениеЗаполнено(РеквизитыВыбранногоПользователя.КодДоступа) Тогда
				
				ТекущийПользователь = Неопределено;
				ВыбранныйПользователь = Неопределено;
				ОткрыватьВводКодаДоступа = Истина;
				
			Иначе
				
				ФИОВыбранногоКассира = РеквизитыВыбранногоПользователя.Наименование;
				
				ОткрыватьВводКодаДоступа = Ложь;
				УстановитьАвторизациюВыбранногоПользователя();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвторизациюВыбранногоПользователя()
	
	Авторизован = Истина;
	ТекущийПользователь = ВыбранныйПользователь;
	УстановитьЗаголовокКассир();
	
	ОткрыватьВводКодаДоступа = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборКассира(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") 
		И Результат = "ЗавершитьРаботуСистемы" Тогда
		
		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Если Не Авторизован Тогда
			Подключаемый_ОткрытьВводКодаДоступа();
		КонецЕсли;
		
	Иначе
		
		ОповещениеВыборКассираНаСервере(Результат);
		
		Если ЗначениеЗаполнено(УстановленныйКодДоступа) Тогда
			Подключаемый_ОткрытьВводКодаДоступа();
		Иначе
			
			ВыбранныйПользователь = Результат;
			УстановитьАвторизациюВыбранногоПользователя();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеВыборКассираНаСервере(Результат)
	
	ВыбранныйПользователь = Результат;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		РеквизитыПользователя = ОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(Результат, "Наименование, КодДоступа");
		
		УстановленныйКодДоступа = РеквизитыПользователя.КодДоступа;
		ФИОВыбранногоКассира = РеквизитыПользователя.Наименование;
		
	Иначе
		
		УстановленныйКодДоступа = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти


