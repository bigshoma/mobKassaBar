
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	Штрихкод = ПолученныйШтрихкод;
	ПоискПоШтрихкодуВручнуюФлаг = Истина;
	УстановитьВидимостьПоискПоШтрихкодуВручную();
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(СписокПрайсЛист, "ПоискШтрихкоду");
	ПоискПоШтрихкодуНаСервере();
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ОбновитьИндексПолнотекстовогоПоиска();
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект, "СписокПрайсЛистЦена");
	
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПрайсЛистОтборПоГруппеФлаг, ОтборПоГруппеФлаг);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПрайсЛистОтборПоГруппеЗначение, ОтборГруппа);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПрайсЛистПоискПоШтрихкодуВручнуюФлаг, ПоискПоШтрихкодуВручнуюФлаг);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПрайсЛистИзбранное, Избранное);
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПрайсЛистВариантСортировки, ВариантСортировки);
	
	Если Параметры.Свойство("ДобавлениеШтрихкодаВПрайсЛист") Тогда
		ШтрихкодДобавленияВПрайсЛист = Параметры.Штрихкод;
		ДобавлениеШтрихкодаВПрайсЛист = Истина;
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокПрайсЛист,
		"Группа",
		ОтборГруппа,
		ЗначениеЗаполнено(ОтборГруппа),
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокПрайсЛист,
		"Избранное",
		Избранное,
		Избранное,
		ВидСравненияКомпоновкиДанных.Равно);
	
	УстановитьВидимостьПоискПоШтрихкодуВручную();
	
	УстановитьПорядокПрайсЛиста();
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" ИЛИ ИмяСобытия = "ВыполненОбмен" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	ИначеЕсли ИмяСобытия = "ЗаписанТовар" Тогда
		
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Элементы.СписокПрайсЛист.ТекущаяСтрока = Параметр;
			ПоследнийИзмененныйТовар = Параметр;
			
			ИнтервалСек = 5;
			ПодключитьОбработчикОжидания("Подключаемый_ОчиститьПоследнийИзмененныйТовар", ИнтервалСек);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("ПрайсЛистОтборПоГруппеФлаг",     ОтборПоГруппеФлаг);
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("ПрайсЛистОтборПоГруппеЗначение", ОтборГруппа);
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("ПрайсЛистИзбранное",             Избранное);
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("ПрайсЛистВариантСортировки",     ВариантСортировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьОтображениеИзбранное();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ОтборГруппаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокПрайсЛист,
		"Группа",
		ОтборГруппа,
		ЗначениеЗаполнено(ОтборГруппа),
		ВидСравненияКомпоновкиДанных.ВИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодОчистка(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(СписокПрайсЛист, "ПоискШтрихкоду");
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(СписокПрайсЛист, "ПоискШтрихкоду");
	ПоискПоШтрихкодуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрайсЛистВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокПрайсЛист.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	Если ДобавлениеШтрихкодаВПрайсЛист Тогда
		
		ПараметрыФормы.Вставить("ДобавлениеШтрихкодаВПрайсЛист");
		ПараметрыФормы.Вставить("Штрихкод", ШтрихкодДобавленияВПрайсЛист);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеДобавлениеШтрихкодаВПрайсЛист", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		);
		
	Иначе
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента",
			ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрайсЛистПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ДобавлениеШтрихкодаВПрайсЛист Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДобавлениеШтрихкодаВПрайсЛист");
		ПараметрыФормы.Вставить("Штрихкод", ШтрихкодДобавленияВПрайсЛист);
		
		Если Копирование Тогда
			
			ТекущиеДанные = Элементы.СписокПрайсЛист.ТекущиеДанные;
			
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеДобавлениеШтрихкодаВПрайсЛист", ЭтотОбъект);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Родитель", ОтборГруппа);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Основание", СтруктураПараметры);
		ДанныеЗаполнения.Вставить("Штрихкод", Штрихкод);
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ДанныеЗаполнения, ЭтотОбъект);
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Создать(Команда)
	
	Если ДобавлениеШтрихкодаВПрайсЛист Тогда
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДобавлениеШтрихкодаВПрайсЛист");
		ПараметрыФормы.Вставить("Штрихкод", ШтрихкодДобавленияВПрайсЛист);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеДобавлениеШтрихкодаВПрайсЛист", ЭтотОбъект);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Родитель", ОтборГруппа);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Основание", СтруктураПараметры);
		ДанныеЗаполнения.Вставить("Штрихкод", Штрихкод);
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ДанныеЗаполнения, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоГруппеТоваров(Команда)
	
	ОтборПоГруппеФлаг = НЕ ОтборПоГруппеФлаг;
	УстановитьВидимостьОтборПоГруппе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВручную(Команда)
	
	ПоискПоШтрихкодуВручнуюФлаг = НЕ ПоискПоШтрихкодуВручнуюФлаг;
	УстановитьВидимостьПоискПоШтрихкодуВручную();
	
	Если ПоискПоШтрихкодуВручнуюФлаг Тогда
		
		ТекущийЭлемент = Элементы.Штрихкод;
		
		#Если МобильноеПриложениеКлиент Тогда
			НачатьРедактированиеЭлемента();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(СписокПрайсЛист, "ПоискШтрихкоду");
	ПоискПоШтрихкодуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуСканером(Команда)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	ОбработчикЗакрытияСканирования = Новый ОписаниеОповещения("ОбработкаЗакрытияСканирования", ЭтотОбъект, ДополнительныеПараметры);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировать(Команда)
	
	Список = Новый СписокЗначений;
	Список.Добавить("НаимВозр", "Наименование: А -> Я",, БиблиотекаКартинок.СортироватьСписокПоВозрастанию);
	Список.Добавить("НаимУбыв", "Наименование: Я -> А",, БиблиотекаКартинок.СортироватьСписокПоУбыванию);
	Список.Добавить("ЦенаВозр", "Цена: возрастание",,    БиблиотекаКартинок.СортироватьПоВозрастаниюБелый);
	Список.Добавить("ЦенаУбыв", "Цена: убывание",,       БиблиотекаКартинок.СортироватьПоУбываниюБелый);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМенюСортировать", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(Оповещение, Список, Элементы.Сортировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИзбранноеВсе(Команда)
	
	Избранное = Ложь;
	ИзбранноеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИзбранноеТолько(Команда)
	
	Избранное = Истина;
	ИзбранноеПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПорядокПрайсЛиста()
	
	Если ПустаяСтрока(ВариантСортировки) Тогда
		ВариантСортировки = "НаимВозр";
	КонецЕсли;
	
	Если ВариантСортировки = "НаимВозр" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(СписокПрайсЛист, "Наименование",
			НаправлениеСортировкиКомпоновкиДанных.Возр);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
		
	ИначеЕсли ВариантСортировки = "НаимУбыв" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(СписокПрайсЛист, "Наименование",
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
		
	ИначеЕсли ВариантСортировки = "ЦенаВозр" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(СписокПрайсЛист, "Цена",
			НаправлениеСортировкиКомпоновкиДанных.Возр);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьПоВозрастанию;
		
	ИначеЕсли ВариантСортировки = "ЦенаУбыв" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПорядокСписка(СписокПрайсЛист, "Цена",
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		Элементы.Сортировать.Картинка = БиблиотекаКартинок.СортироватьПоУбыванию;
		
	КонецЕсли;
	
	Элементы.СписокПрайсЛист.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМенюСортировать(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантСортировки = Результат.Значение;
	УстановитьПорядокПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеДобавлениеШтрихкодаВПрайсЛист(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПоискПоШтрихкодуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
		
	СписокНоменклатуры = ОбработкаТабличнойЧастиВызовСервера.НайтиПоШтрихКодуПодобно(Штрихкод);
	
	ПоискШтрихкоду = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокПрайсЛист.Отбор.Элементы,
		"ПоискШтрихкоду",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
		ПоискШтрихкоду,
		"Ссылка",
		СписокНоменклатуры,
		Истина,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтборПоГруппе()
	
	ОбщегоНазначения.УстановитьПометкуКнопки(ЭтотОбъект,
		"ОтборПоГруппеТоваров",
		ОтборПоГруппеФлаг
	);
	
	Элементы.ОтборПоГруппе.Видимость = ОтборПоГруппеФлаг;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоискПоШтрихкодуВручную()
	
	ОбщегоНазначения.УстановитьПометкуКнопки(ЭтотОбъект,
		"ПоискПоШтрихкодуВручную",
		ПоискПоШтрихкодуВручнуюФлаг
	);
	Элементы.ГруппаПоискПоШтрихкоду.Видимость = ПоискПоШтрихкодуВручнуюФлаг;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаИзбранное", "Видимость", ЗначениеНастроекПовтИсп.ИспользуютсяИзбранныеТовары());
	
	ИспользуютсяШтрихкоды = ЗначениеНастроекПовтИсп.ИспользуютсяШтрихкоды();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ПоискПоШтрихкоду", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() 
		И НЕ ИспользуетсяАсинхронныйСканер
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ПоискПоШтрихкодуВручную", "Видимость",
		ИспользуютсяШтрихкоды);
	
	ИспользуютсяГруппы = ЗначениеНастроекПовтИсп.ИспользуютсяГруппыНоменклатуры();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ОтборПоГруппеТоваров, ОтборПоГруппе",
		"Видимость", ИспользуютсяГруппы);
	
	УстановитьВидимостьОтборПоГруппе();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "СоздатьПлюс, МенюСкопировать, МенюПереместитьВГруппу", "Видимость", ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим());
	
	Если ДобавлениеШтрихкодаВПрайсЛист Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "МенюПереместитьВГруппу", "Видимость",
			Ложь);
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьВысотуПоляНаименованиеТовара(ЭтотОбъект, "СписокПрайсЛистНаименование");
	
	НастроитьЭлементыАсинхронногоСканера();
	
	Если ЗначениеНастроекВызовСервераПовтИсп.УстановленРежимСинхронизации()
		И НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим()
		И ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		
		ЗапросОбновленияПрайсЛиста = Истина;
		
	Иначе
		ЗапросОбновленияПрайсЛиста = Ложь;
	КонецЕсли;
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаСоздать", "СоздатьПлюс");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчиститьПоследнийИзмененныйТовар()
	
	ПоследнийИзмененныйТовар = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеИзбранное()
	
	Если Избранное Тогда
		
		Элементы.ОтобразитьИзбранноеТолько.Видимость = Ложь;
		Элементы.ОтобразитьИзбранноеВсе.Видимость = Истина;
	Иначе
		
		Элементы.ОтобразитьИзбранноеТолько.Видимость = Истина;
		Элементы.ОтобразитьИзбранноеВсе.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзбранноеПриИзменении()
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокПрайсЛист,
		"Избранное",
		Избранное,
		Избранное,
		ВидСравненияКомпоновкиДанных.Равно
	);
	
	НастроитьОтображениеИзбранное();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПрайсЛистОбработкаЗапросаОбновления()
	
	Если ЗапросОбновленияПрайсЛиста Тогда
		СинхронизацияКлиент.ЗапуститьЗагрузкуПрайсЛистаВФоне();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

