
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры) Экспорт
	
	ВводитьАкцизныеМарки = Ложь;
	ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(НоменклатураПоШтрихкоду, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
		
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(НоменклатураПоШтрихкоду);
		
		ПродажиКлиент.СоздатьЗаказКлиента(МассивНоменклатуры, ДополнительныеПараметры, Истина);
	Иначе
		
		ПулТоваров.Добавить(НоменклатураПоШтрихкоду);
		
		Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
			ДополнительныеПараметры.ВременноеЗакрытиеДиалога = Ложь;
			ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПотоковоеСканирование") И ПулТоваров.Количество() > 0 Тогда
		
		ПродажиКлиент.СоздатьЗаказКлиента(ПулТоваров.ВыгрузитьЗначения(), ДополнительныеПараметры, Истина);
		
		ПулТоваров.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтаФорма, "СписокЗаказовСуммаДокумента");
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтаФорма, "ИнфоНадписьПериод");
	
	Если Параметры.Свойство("ФильтрПериод") Тогда
		
		Фильтр = Параметры.ФильтрПериод;
	Иначе
		
		Фильтр = "ЗаказыНаСегодня";
		ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ФильтрСпискаЗаказов, Фильтр);
	КонецЕсли;
	
	
	УстановитьФильтр();
	
	НастроитьФормуПоЗначениямНастроек();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	ИначеЕсли ИмяСобытия = "ЗаписанЗаказ" Тогда
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			УстановитьФильтрПоДатеДокумента(Параметр);
			
			Элементы.СписокЗаказов.Обновить();
			Элементы.СписокЗаказов.ТекущаяСтрока = Параметр;
			ПоследнийИзмененныйДокумент = Параметр;
			
			ИнтервалСек = 5;
			ПодключитьОбработчикОжидания("Подключаемый_ОчиститьПоследнийИзмененныйДокумент", ИнтервалСек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("ФильтрСпискаЗаказов", Фильтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента",
		ПараметрыФормы, ЭтотОбъект
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	Если ПродажиВызовСервера.ПроверитьВозможностьВводаЧека() Тогда
		ОчиститьСообщения();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
		
		ОбработчикЗакрытияСканирования = Новый ОписаниеОповещения("ОбработкаЗакрытияСканирования", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
		
		ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваров(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПодборТоваров", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ПодборВЗаказКлиента");
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоиск(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПоискЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска", ПолучитьСтруктураПоиска());
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Поиск заказа'"));
	ОткрытьФорму("ОбщаяФорма.ФормаПоиска", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
	
	УстановитьФильтр();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Поиск

&НаКлиенте
Функция ПолучитьСтруктураПоиска()
	
	Если НЕ СтруктураПоиска = Неопределено Тогда
		Возврат СтруктураПоиска;
	КонецЕсли;
	
	ВремСтруктураПоиска = Новый Структура;
	ВремСтруктураПоиска.Вставить("Номенклатура");
	ВремСтруктураПоиска.Вставить("ФИО");
	ВремСтруктураПоиска.Вставить("Телефон");
	ВремСтруктураПоиска.Вставить("НомерЗаказаКлиента");
	ВремСтруктураПоиска.Вставить("АдресЭлектроннойПочты");
	
	Возврат ВремСтруктураПоиска;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановленПоиск = Ложь;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтруктураПоиска = Результат;
		
		Если Результат.Свойство("НомерЗаказаКлиента") Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЗаказов,
				"НомерЗаказа",
				Результат.НомерЗаказаКлиента,
				ЗначениеЗаполнено(Результат.НомерЗаказаКлиента),
				ВидСравненияКомпоновкиДанных.Содержит
			);
			
			Если ЗначениеЗаполнено(Результат.НомерЗаказаКлиента) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("ФИО") Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЗаказов,
				"ФИО",
				Результат.ФИО,
				ЗначениеЗаполнено(Результат.ФИО),
				ВидСравненияКомпоновкиДанных.Содержит
			);
			
			Если ЗначениеЗаполнено(Результат.ФИО) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("Телефон") Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЗаказов,
				"Телефон",
				Результат.Телефон,
				ЗначениеЗаполнено(Результат.Телефон),
				ВидСравненияКомпоновкиДанных.Содержит
			);
			
			Если ЗначениеЗаполнено(Результат.Телефон) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("АдресЭлектроннойПочты") Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЗаказов,
				"АдресЭлектроннойПочты",
				Результат.АдресЭлектроннойПочты,
				ЗначениеЗаполнено(Результат.АдресЭлектроннойПочты),
				ВидСравненияКомпоновкиДанных.Содержит
			);
			
			Если ЗначениеЗаполнено(Результат.АдресЭлектроннойПочты) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("Номенклатура") Тогда
			
			ДокументыПоНоменклатуре = СписокДокументовСодержащихНоменклатуру(Результат.Номенклатура);
			
			ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				СписокЗаказов.Отбор.Элементы,
				"ОтборПоНоменклатуре",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
				ОтборПоНоменклатуре,
				"Ссылка",
				ДокументыПоНоменклатуре,
				ЗначениеЗаполнено(Результат.Номенклатура),
				ВидСравненияКомпоновкиДанных.ВСписке);
			
			Если ЗначениеЗаполнено(Результат.Номенклатура) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Результат = "ОчиститьПоиск" Тогда
		
		СтруктураПоиска = Неопределено;
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокЗаказов,
			"НомерЗаказа",
			Неопределено,
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно
		);
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокЗаказов,
			"ФИО",
			Неопределено,
			Ложь,
			ВидСравненияКомпоновкиДанных.Содержит
		);
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокЗаказов,
			"Телефон",
			Неопределено,
			Ложь,
			ВидСравненияКомпоновкиДанных.Содержит
		);
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЗаказов,
				"АдресЭлектроннойПочты",
				Неопределено,
				Ложь,
				ВидСравненияКомпоновкиДанных.Содержит
			);
		
		ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(СписокЗаказов, "ОтборПоНоменклатуре");
		
		УстановленПоиск = Ложь;
		
	КонецЕсли;
	
	УстановитьКартинкуПоиска(УстановленПоиск);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуПоиска(Флаг)
	
	Если Флаг Тогда
		Элементы.ОткрытьПоиск.Картинка = БиблиотекаКартинок.ОтменитьПоиск;
		Элементы.ОткрытьПоиск.ЦветТекста = WebЦвета.Кирпичный;
	Иначе
		Элементы.ОткрытьПоиск.Картинка = БиблиотекаКартинок.Найти;
		Элементы.ОткрытьПоиск.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокДокументовСодержащихНоменклатуру(Номенклатура)
	
	Возврат Документы.ЗаказКлиента.СписокДокументовСодержащихНоменклатуру(Номенклатура);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьФильтрПоДатеДокумента(СсылкаНаЗаказ)
	
	ТекущяяДата = НачалоДня(ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату());
	ОдинДень = 86400;
	
	Если СсылкаНаЗаказ.ЖелаемаяДатаПокупки = ТекущяяДата
		ИЛИ (СсылкаНаЗаказ.ЖелаемаяДатаПокупки < ТекущяяДата
			И (СсылкаНаЗаказ.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.НеСогласован ИЛИ 
				СсылкаНаЗаказ.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Согласован))
		Тогда
		
		Если НЕ Фильтр = "ЗаказыНаСегодня" Тогда
			Фильтр = "ЗаказыНаСегодня";
			УстановитьФильтр();
		КонецЕсли;
		
	ИначеЕсли СсылкаНаЗаказ.ЖелаемаяДатаПокупки = ТекущяяДата + ОдинДень Тогда
		
		Если НЕ Фильтр = "ЗаказыНаЗавтра" Тогда
			Фильтр = "ЗаказыНаЗавтра";
			УстановитьФильтр();
		КонецЕсли;
		
	Иначе
		
		Если НЕ Фильтр = "ВсеЗаказы" Тогда
			Фильтр = "ВсеЗаказы";
			УстановитьФильтр();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтр()
	
	Если Фильтр = "ЗаказыНаСегодня" Тогда
		
		СписокЗаказов.Порядок.Элементы.Очистить();
		
		ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("СортировкаПоСтатусу");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.Использование = Истина;
		
		ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ЖелаемаяДатаПокупки");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.Использование = Истина;
		
		СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ФильтрНаСегодня", Истина);
		СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ФильтрНаЗавтра",  Ложь);
		
	ИначеЕсли Фильтр = "ЗаказыНаЗавтра" Тогда
		
		СписокЗаказов.Порядок.Элементы.Очистить();
		
		ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ЖелаемаяДатаПокупки");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ЭлементПорядка.Использование = Истина;
		
		ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("СортировкаПоСтатусу");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.Использование = Истина;
		
		СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ФильтрНаСегодня", Ложь);
		СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ФильтрНаЗавтра",  Истина);
		
	Иначе // ВсеЗаказы
		
		СписокЗаказов.Порядок.Элементы.Очистить();
		
		ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ЖелаемаяДатаПокупки");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ЭлементПорядка.Использование = Истина;
		
		ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("СортировкаПоСтатусу");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ЭлементПорядка.Использование = Истина;
		
		СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ФильтрНаСегодня", Ложь);
		СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ФильтрНаЗавтра",  Ложь);
		
	КонецЕсли;
	
	ЭлементПорядка = СписокЗаказов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	ЭлементПорядка.Использование = Истина;
	
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату()));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры)
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СозданиеИзПодбора", Истина);
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", Результат.АдресВоВременномХранилище);
		
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	УстановитьУсловноеОформление();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "СканированиеШтрихкода", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров()
		И НЕ ИспользуетсяАсинхронныйСканер);
		
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаСоздать", "СоздатьПлюс");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчиститьПоследнийИзмененныйДокумент()
	
	ПоследнийИзмененныйДокумент = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Последний измененный документ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСуммаДокумента.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСсылка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовЖелаемаяДатаПокупки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСтатусЗаказа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПоследнийИзмененныйДокумент");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЗеленый);
	
	// Не согласован
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСтатусЗаказа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Малиновый);

	
	// Согласован
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСтатусЗаказа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовКлиентов.Согласован;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Коралловый);

	
	// Текущая дата = дата покупки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовЖелаемаяДатаПокупки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.ЖелаемаяДатаПокупки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗначениеНастроекПовтИсп.ЖирныйШрифтПриложения());
	
	// Просрочена дата покупки
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовЖелаемаяДатаПокупки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.ЖелаемаяДатаПокупки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.НеСогласован);

	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	
	// Выполнен
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСтатусЗаказа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовКлиентов.Выполнен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСуммаДокумента.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСсылка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовЖелаемаяДатаПокупки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовКлиентов.Выполнен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	
	// Отменен
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСуммаДокумента.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСсылка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовЖелаемаяДатаПокупки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовКлиентов.Отменен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗначениеНастроекПовтИсп.ЗачеркнутыйШрифтПриложения());
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовСтатусЗаказа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.СтатусЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовКлиентов.Отменен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	//
КонецПроцедуры

#КонецОбласти

