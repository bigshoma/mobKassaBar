
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЦветПолейОшибок(ЭтаФорма, "СообщениеПараметрыСинхронизации");
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтаФорма, "ПодсказкаСообщениеПараметрыСинхронизации");
	
	НаборКонстант = Константы.СоздатьНабор("ИспользоватьЛог");
	НаборКонстант.Прочитать();
	ИспользоватьЛог = НаборКонстант.ИспользоватьЛог;
	
	НастроитьФормуПоЗначениямНастроек();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
	ОбновитьИнформациюОВыгрузке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		ОбновитьИнформациюОВыгрузке();
		
	ИначеЕсли ИмяСобытия = "ИзмененОтчетОПродажах" Тогда
		
		ОбновитьИнформациюОВыгрузке();
		
	ИначеЕсли ИмяСобытия = "ВыполненОбмен" Тогда
		
		ОбновитьИнформациюОВыгрузке();
		
	ИначеЕсли НЕ СтрНайти(ИмяСобытия,"СинхронизацияВФоне") = 0 Тогда
		
		ОбработатьДанныеСинхронизацииВФоне();
		
		ОбновитьИнформациюОВыгрузке();
		
	ИначеЕсли ИмяСобытия = "ОткрытьОшибкуСинхронизацииВФормеСервис" Тогда
		
		ОткрытьОшибкуСинхронизации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбработатьДанныеСинхронизацииВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьДанныеСинхронизацииВФоне();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРезервнуюКопию(Команда)
	
	РезервноеКопированиеКлиент.СоздатьРезервнуюКопию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьИзРезервнойКопии(Команда)
	
	РезервноеКопированиеКлиент.ВосстановитьИзРезервнойКопии();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Загрузка");
	ОткрытьФорму("Обработка.Сервис.Форма.Синхронизация", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Выгрузка");
	ОткрытьФорму("Обработка.Сервис.Форма.Синхронизация", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПрайсЛист(Команда)
	
	ОткрытьФорму("Обработка.Сервис.Форма.ИмпортПрайсЛиста",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокУдаленныхОбъектов(Команда)
	
	ОткрытьФорму("Обработка.Сервис.Форма.МусорнаяКорзина",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокЦенников(Команда)
	
	ОткрытьФорму("Обработка.Сервис.Форма.ПечатьЭтикетокЦенников",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДанных(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОчисткиДанных", ЭтотОбъект);
	ОткрытьФорму("Обработка.Сервис.Форма.УдалениеДанных",, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДатуСинхронизации(Команда)
	
	Если ЗначениеЗаполнено(ДатаПоследнейСинхронизации) Тогда
		ТекстСообщения = НСтр("ru = 'Последняя успешная синхронизация:'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + Формат(ДатаПоследнейСинхронизации, "ДЛФ=DDT");
	Иначе
		ТекстСообщения = НСтр("ru = 'Синхронизация не выполнялась'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСинхронизацию(Команда)
	
	СинхронизацияКлиент.ЗапуститьОбменВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОшибкуСинхронизации(Команда)
	
	ОчиститьСообщения();
	
	ПомощникUIКлиент.СкрытьПроцессСинхронизации();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиСинхронизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛог(Команда)
	
	Файл = Новый Файл(ЗначениеНастроекВызовСервераПовтИсп.ПутьКФайлуЛога());
	
	Если НЕ Файл.Существует() Тогда
		
		ПомощникUIКлиент.ПоказатьСообщение(НСтр("ru = 'Журнал приложения пуст'"));
		
		Возврат;
	КонецЕсли;
	
	КомандыВыбора = Новый СписокЗначений;
	КомандыВыбора.Добавить("ОтправитьПоEmail", НСтр("ru = 'Отправить разработчикам'"),, БиблиотекаКартинок.ПисьмоПодменю);
	КомандыВыбора.Добавить("Просмотреть", НСтр("ru = 'Просмотреть'"),, БиблиотекаКартинок.ПоказатьДанные);
	КомандыВыбора.Добавить("ОчиститьЖурнал", НСтр("ru = 'Очистить'"),, БиблиотекаКартинок.Удалить);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьЛогЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, КомандыВыбора, Элементы.ОткрытьЛог);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛогЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ОтправитьПоEmail" Тогда
		
		ОтправитьПоEmailЛог();
		
	ИначеЕсли Результат.Значение = "Просмотреть" Тогда
		
		ЗапуститьПриложение(ЗначениеНастроекВызовСервераПовтИсп.ПутьКФайлуЛога());
		
	ИначеЕсли Результат.Значение = "ОчиститьЖурнал" Тогда
		
		ЛогированиеКлиент.УдалитьФайлЛога();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоEmailЛог()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		СтруктураПисьма = ПолучитьСтруктуруПисьма();
		
		Получатели = Новый Массив;
		Получатели.Добавить(РаботаСПочтойВызовСервера.EmailТехническойПоддержки());
		
		РаботаСПочтойКлиент.ОтправитьЭлектронноеПисьмо(СтруктураПисьма,
			Получатели
		);
		
	#Иначе
		
		ТекстИсключения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ВызватьИсключение ТекстИсключения;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПисьма()
	
	СтруктураПисьма = РаботаСПочтойКлиент.СтруктураПисьмаОтчета();
	
	ТемаПисьма = НСтр("ru = 'Журнал приложения 1С:Мобильная касса от %Дата%'");
	ТемаПисьма = СтрЗаменить(ТемаПисьма, "%Дата%", ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату());
	
	СтруктураПисьма.ТемаПисьма = ТемаПисьма;
	
	СтруктураПисьма.ТекстПисьма = РаботаСПочтойВызовСервера.СформироватьСлужебноеСообщение();
	
	СтруктураПисьма.АдресаФайловВложения.Добавить(ЗначениеНастроекВызовСервераПовтИсп.ПутьКФайлуЛога(), ЛогированиеКлиент.ИмяФайлаЛога());
	
	Возврат СтруктураПисьма;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СообщениеПараметрыСинхронизацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПараметрыСинхронизации", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОВыгрузкеДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.Сервис.Форма.ИнформацияОВыгрузке", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛогПриИзменении(Элемент)
	
	ИспользоватьЛогПриИзмененииСервер();
	
КонецПроцедуры

Процедура ИспользоватьЛогПриИзмененииСервер()
	
	Отказ = Ложь;
	ОбщегоНазначения.СохранитьКонстантыФормы(ЭтотОбъект, "ИспользоватьЛог", Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеОчисткиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	УдаленыНастройки = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("УдаленыНастройки") Тогда
		УдаленыНастройки = Результат.УдаленыНастройки;
		ОбновитьПовторноИспользуемыеЗначения();
		Оповестить("ИзмененыЗначенияНастроек");
	КонецЕсли;
	
	Если УдаленыНастройки Тогда
		ОбщегоНазначенияКлиент.ПередНачаломРаботыСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКомандРезервногоКопирования()
	
	РезервныеКопииНаУстройстве = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РезервныеКопииНаУстройстве");
	РезервныеКопииНаЯндексДиске = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РезервныеКопииНаЯндексДиске");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "СоздатьРезервнуюКопию,ВосстановитьИзРезервнойКопии" , "Доступность",
																РезервныеКопииНаУстройстве ИЛИ РезервныеКопииНаЯндексДиске);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	НастроитьОтображениеКомандРезервногоКопирования();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаСообщениеПараметрыСинхронизации", "Видимость",
		НЕ ЗначениеНастроекВызовСервераПовтИсп.ЗаполненыПараметрыСинхронизации()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаСинхронизация", "Видимость",
		ЗначениеЗаполнено(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РежимСинхронизацииДанных")) 
		И НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ЗагрузитьДанные, ВыгрузитьДанные, ГруппаИнфоОВыгрузке", "Видимость", 
		ЗначениеНастроекВызовСервераПовтИсп.ЗаполненыПараметрыСинхронизации()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ГруппаИмпорт", "Видимость",
		ЗначениеЗаполнено(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РежимСинхронизацииДанных"))
		И ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим()
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ГруппаПечатьЭтикетокЦенников", "Видимость",
		ЗначениеНастроекВызовСервераПовтИсп.ПечататьЭтикеткиЦенники()
	);
	
	Если ЗначениеНастроекПовтИсп.ИспользуетсяОбменВФоне() Тогда
		
		Элементы.ГруппаСинхронизацияВФоне.Видимость = Истина;
		Элементы.ГруппаСинхронизацияФайл.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаСинхронизацияВФоне.Видимость = Ложь;
		Элементы.ГруппаСинхронизацияФайл.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВыгрузке()
	
	Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() Тогда
		
		ОтчетыКВыгрузке = Документы.ОтчетОРозничныхПродажах.ОтчетыОПродажахКВыгрузке();
		
		Шаблон = НСтр("ru = 'Отчеты о продажах: %КоличествоОтчетов%'");
		ТекстИнформации = СтрЗаменить(Шаблон, "%КоличествоОтчетов%", ОтчетыКВыгрузке.Количество());
		
		ИнформацияОВыгрузкеДанных = ТекстИнформации;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСинхронизацииВФоне()
	
	Если НЕ ПараметрыСинхронизацииВФоне.ОбменИнициализирован ИЛИ ПараметрыСинхронизацииВФоне.Успешно Тогда
		
		Элементы.СтраницыСинхронизацияВФоне.ТекущаяСтраница = Элементы.СинхронизацияВФонеНачало;
		
		УстановитьДатуПоследнейСинхронизации();
		
		Возврат;
		
	ИначеЕсли ПараметрыСинхронизацииВФоне.Выполняется Тогда
		
		Элементы.СтраницыСинхронизацияВФоне.ТекущаяСтраница = Элементы.СинхронизацияВФонеСтарт;
		
	ИначеЕсли НЕ ПараметрыСинхронизацииВФоне.Успешно Тогда
		
		Элементы.СтраницыСинхронизацияВФоне.ТекущаяСтраница = Элементы.СинхронизацияВФонеОшибка;
		ТекстОшибкиСинхронизации = ПараметрыСинхронизацииВФоне.ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуПоследнейСинхронизации()
	
	Если ЗначениеНастроекПовтИсп.ИспользуетсяОбменВФоне() Тогда
		
		ДатаПоследнейСинхронизации = Синхронизация.ПолучитьДатуПоследнейСинхронизации();
		
		Элементы.ОткрытьДатуСинхронизации.Заголовок =
			Синхронизация.ОтносительнаяДатаСинхронизации(ДатаПоследнейСинхронизации);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

