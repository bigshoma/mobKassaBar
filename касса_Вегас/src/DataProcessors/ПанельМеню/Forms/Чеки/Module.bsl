
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, ДополнительныеПараметры) Экспорт
	
	ВводитьАкцизныеМарки = ИспользуетсяЕГАИС;
	ПродажиКлиент.ПолучитьНоменклатуруПоШтрихкоду(ПолученныйШтрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученнуюПоШтрихкодуНоменклатуру(НоменклатураПоШтрихкоду, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВнешнимСканером() Тогда
		
		МассивНоменклатуры = Новый Массив;
		МассивНоменклатуры.Добавить(НоменклатураПоШтрихкоду);
		
		ПродажиКлиент.СоздатьЧек(МассивНоменклатуры, ДополнительныеПараметры, Истина);
		
		АкцизныеМарки.Очистить();
		
	Иначе
		
		ПулТоваров.Добавить(НоменклатураПоШтрихкоду);
		
		Если ЗначениеЗаполнено(НоменклатураПоШтрихкоду.Марки) Тогда
			
			ВведенныеАкцизныеМарки = НоменклатураПоШтрихкоду.Марки;
			
			Для Каждого ВведеннаяМарка Из ВведенныеАкцизныеМарки Цикл	
				АкцизныеМарки.Добавить(ВведеннаяМарка, ВведеннаяМарка);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
			ДополнительныеПараметры.ВременноеЗакрытиеДиалога = Ложь;
			ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ВременноеЗакрытиеДиалога") И ДополнительныеПараметры.ВременноеЗакрытиеДиалога Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПотоковоеСканирование") И ПулТоваров.Количество() > 0 Тогда
		
		ПродажиКлиент.СоздатьЧек(ПулТоваров.ВыгрузитьЗначения(), ДополнительныеПараметры, Истина);
		
		ПулТоваров.Очистить();
		АкцизныеМарки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АдресМарокЧекаВХранилище() Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(АкцизныеМарки.ВыгрузитьЗначения(), УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяЕГАИС = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяЕГАИСПриПродаже();
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект, "СписокЧековСуммаДокумента");
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект, "ИнфоНадписьПериод");
	
	ОбновитьИнформациюПоКассовойСмене();
	ОбщегоНазначения.ВосстановитьНастройкуПользователя(Перечисления.НастройкиПользователя.ПериодСпискаЧеков, Период);
	
	НастроитьФормуПоЗначениямНастроек();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" ИЛИ ИмяСобытия = "ВыполненОбмен" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	ИначеЕсли ИмяСобытия = "ИзмененаКассоваяСмена" Тогда
		
		ОбновитьИнформациюПоКассовойСмене();
		
	ИначеЕсли ИмяСобытия = "ЗаписанЧек" Тогда
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.Чек") Тогда
			
			Элементы.СписокЧеков.ТекущаяСтрока = Параметр;
			
			ПоследнийИзмененныйЧек = Параметр;
			
			ИнтервалСек = 5;
			ПодключитьОбработчикОжидания("Подключаемый_ОчиститьПоследнийИзмененныйЧек", ИнтервалСек);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "КассоваяОперация" Тогда
		
		Если ОткрыватьПодборПослеПробитияЧека И ТипЗнч(Параметр) = Тип("ДокументСсылка.Чек") Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьПодборПослеПробитияЧека", 1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ОбработатьПолученныйШтрихкод(Параметр, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкуПользователя("ПериодСпискаЧеков", Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СканированиеШтрихкода(Команда)
	
	Если ПродажиВызовСервера.ПроверитьВозможностьВводаЧека() Тогда
		ОчиститьСообщения();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
		
		ОбработчикЗакрытияСканирования = Новый ОписаниеОповещения("ОбработкаЗакрытияСканирования", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
		
		ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеУстановитьПериод", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Период);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПериода", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваров(Команда)
	
	ОткрытьПодборТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискЧека(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПоискЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска", ПолучитьСтруктураПоиска());
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Поиск чека'"));
	ОткрытьФорму("ОбщаяФорма.ФормаПоиска", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСменеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ПанельМеню.Форма.Касса");
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекКоррекции(Команда)
	
	ОткрытьФорму("Обработка.СозданиеЧекаКоррекции.Форма.СозданиеЧекаКоррекции",
		,
		ЭтотОбъект
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СписокЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокЧеков.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("Документ.Чек.Форма.ФормаДокумента",
		ПараметрыФормы, ЭтотОбъект,,,,,
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьПодборТоваров()
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеПодборТоваров", ЭтотОбъект);
	ПродажиКлиент.ОткрытьПодборТоваров(ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПослеПробитияЧека()
	
	Если ВводДоступен() Тогда
		
		ОткрытьПодборТоваров();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктураПоиска()
	
	Если НЕ СтруктураПоиска = Неопределено Тогда
		Возврат СтруктураПоиска;
	КонецЕсли;
	
	ВремСтруктураПоиска = Новый Структура;
	ВремСтруктураПоиска.Вставить("Номенклатура");
	ВремСтруктураПоиска.Вставить("НомерЧекаККМ");
	ВремСтруктураПоиска.Вставить("ШтрихкодЧека");
	
	Возврат ВремСтруктураПоиска;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДиалогВводаШтрихкода(ДополнительныеПараметры)
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановленПоиск = Ложь;
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтруктураПоиска = Результат;
		
		Если Результат.Свойство("НомерЧекаККМ") Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЧеков,
				"ФискальныйНомер",
				Результат.НомерЧекаККМ,
				ЗначениеЗаполнено(Результат.НомерЧекаККМ),
				ВидСравненияКомпоновкиДанных.Равно);
			
			Если ЗначениеЗаполнено(Результат.НомерЧекаККМ) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("ШтрихкодЧека") Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЧеков,
				"ШтрихкодЧека",
				Результат.ШтрихкодЧека,
				ЗначениеЗаполнено(Результат.ШтрихкодЧека),
				ВидСравненияКомпоновкиДанных.Содержит);
			
			Если ЗначениеЗаполнено(Результат.ШтрихкодЧека) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("Номенклатура") Тогда
			
			ЧекиПоНоменклатуре = СписокЧековСодержащихНоменклатуру(Результат.Номенклатура);
			
			ОтборПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				СписокЧеков.Отбор.Элементы,
				"ОтборПоНоменклатуре",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
				ОтборПоНоменклатуре,
				"Ссылка",
				ЧекиПоНоменклатуре,
				ЗначениеЗаполнено(Результат.Номенклатура),
				ВидСравненияКомпоновкиДанных.ВСписке);
			
			Если ЗначениеЗаполнено(Результат.Номенклатура) Тогда
				УстановленПоиск = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Результат = "ОчиститьПоиск" Тогда
		
		СтруктураПоиска = Неопределено;
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЧеков,
				"ШтрихкодЧека",
				"",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
				СписокЧеков,
				"ФискальныйНомер",
				0,
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			
		ОбщегоНазначенияКлиентСервер.УдалитьГруппуОтбораСписка(СписокЧеков, "ОтборПоНоменклатуре");
		
		УстановленПоиск = Ложь;
		
	КонецЕсли;
	
	УстановитьКартинкуПоиска(УстановленПоиск);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуПоиска(Флаг)
	
	Если Флаг Тогда
		Элементы.ПоискЧека.Картинка = БиблиотекаКартинок.ОтменитьПоиск;
		Элементы.ПоискЧека.ЦветТекста = WebЦвета.Кирпичный;
	Иначе
		Элементы.ПоискЧека.Картинка = БиблиотекаКартинок.Найти;
		Элементы.ПоискЧека.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		ПараметрыЧека.ФормаВладелец = ЭтотОбъект;
		ПараметрыЧека.ПараметрыФормы.СозданиеИзПодбора = Истина;
		ПараметрыЧека.ПараметрыФормы.АдресВоВременномХранилище = Результат.АдресВоВременномХранилище;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПериоду()
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокЧеков,
		"Дата",
		Период.ДатаНачала,
		ЗначениеЗаполнено(Период.ДатаНачала),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокЧеков,
		"Дата",
		Период.ДатаОкончания,
		ЗначениеЗаполнено(Период.ДатаОкончания),
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Ложь);
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ФорматДаты = "ДФ=dd.MM.yy";
		ИнфоНадпись = НСтр("ru = '%ДатаНачала% - %ДатаОкончания%'");
		ИнфоНадпись = СтрЗаменить(ИнфоНадпись, "%ДатаНачала%", Формат(Период.ДатаНачала, ФорматДаты));
		ИнфоНадпись = СтрЗаменить(ИнфоНадпись, "%ДатаОкончания%", Формат(Период.ДатаОкончания, ФорматДаты));
		
	Иначе
		
		ИнфоНадпись = "";
		
	КонецЕсли;
	
	ИнфоНадписьПериод = ИнфоНадпись;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьПериод(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементОтбораСписка(СписокЧеков, "Дата");
	
	Если Результат = "ОчиститьПериод" Тогда
		Период = Неопределено;
	Иначе
		Период = Результат;
	КонецЕсли;
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОткрыватьПодборПослеПробитияЧека = ЗначениеНастроекВызовСервераПовтИсп.ОткрыватьПодборПослеПробитияЧека();
	ИспользуетсяАсинхронныйСканер = ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов();
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	Если ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() 
		И НЕ ИспользуетсяАсинхронныйСканер Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"КомандаПодборТоваров, КомандаСканированиеШтрихкода", "Видимость",
			Истина
		);
		
		Элементы.КомандаПодборТоваров.ЦветФона = ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово();
		Элементы.КомандаСканированиеШтрихкода.ЦветФона = ЗначениеНастроекКлиентСерверПовтИсп.ЦветФонаКнопкиГотово();
		
		Элементы.ГруппаПодборТоваров1.Видимость = Ложь;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"КомандаПодборТоваров, КомандаСканированиеШтрихкода", "Видимость",
			Ложь
		);
		
		Элементы.ГруппаПодборТоваров1.Видимость = Истина;
		
		ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаПодборТоваров1", "ПодборТоваров1", 2);
		
	КонецЕсли;
	
	НастроитьЭлементыАсинхронногоСканера();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость", 
		ИспользуетсяАсинхронныйСканер
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоКассовойСмене()
	
	Продажи.ОбновитьИнформациюПоКассовойСмене(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ИнформацияОСмене", "Видимость", КассоваяСменаПросрочена
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"КомандаПодборТоваров, КомандаСканированиеШтрихкода",
		"Доступность",
		НЕ КассоваяСменаПросрочена
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчиститьПоследнийИзмененныйЧек()
	
	ПоследнийИзмененныйЧек = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокЧековСодержащихНоменклатуру(Номенклатура)
	
	Возврат Документы.Чек.СписокЧековСодержащихНоменклатуру(Номенклатура);
	
КонецФункции

#КонецОбласти

#Область ОриентацияЭкрана

&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	//
КонецПроцедуры

#КонецОбласти


