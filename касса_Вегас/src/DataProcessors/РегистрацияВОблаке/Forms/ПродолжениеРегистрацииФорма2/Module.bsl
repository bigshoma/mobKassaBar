
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоЗначениямНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыЗначенияНастроек" Тогда
		
		НастроитьФормуПоЗначениямНастроек();
		
	ИначеЕсли ИмяСобытия = "ЗакрытьМастер" Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьСинхронизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВыполняетсяСинхронизация Тогда
		
		ПомощникUIКлиент.ПоказатьСообщение(
			НСтр("ru = 'Выполняется синхронизация
			|Подождите..'")
		);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура СсылкаНаФрешНажатие(Элемент)
	
	РегистрацияВОблакеКлиент.ОткрытьСсылкуНаСайт(ЭтотОбъект, Элементы.СсылкаНаФреш, СсылкаНаФреш);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЕщеРаз(Команда)
	
	НачатьСинхронизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	РегистрацияВОблакеКлиент.ЗакрытьМастер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер(Команда)
	
	Если ВыполняетсяСинхронизация Тогда
		
		ПомощникUIКлиент.ПоказатьСообщение(
			НСтр("ru = 'Выполняется синхронизация
			|Подождите..'")
		);
		
		Возврат;
	КонецЕсли;
	
	РегистрацияВОблакеКлиент.ЗакрытьМастер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСсылкуНаФреш()
	
	СсылкаНаФреш = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("АдресWS");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПоСостояниюСинхронизации(СостояниеСинхронизации)
	
	Если ВыполняетсяСинхронизация Тогда
		
		Элементы.СтраницыКоманды.ТекущаяСтраница = Элементы.СтраницаЗавершитьНедоступно;
	Иначе
		
		Элементы.СтраницыКоманды.ТекущаяСтраница = Элементы.СтраницаЗавершить;
	КонецЕсли;
	
	Если СостояниеСинхронизации = "Старт" Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСинхронизация;
		
	ИначеЕсли СостояниеСинхронизации = "Финиш" Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСинхронизацияУспешно;
		
	ИначеЕсли СостояниеСинхронизации = "Ошибка" Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСинхронизацияОшибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСинхронизацию()
	
	ВыполняетсяСинхронизация = Истина;
	НастроитьФормуПоСостояниюСинхронизации("Старт");
	
	МобильныеУтилитыКлиент.Инициализировать();
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьСинхронизацию", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьСинхронизацию()
	
	ПодготовитьПрайсЛист();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСинхронизациюЗавершение", ЭтотОбъект);
	
	РегистрацияВОблакеКлиент.ВыполнитьСинхронизацию(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСинхронизациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняетсяСинхронизация = Ложь;
	
	Если НЕ Результат.Успешно Тогда
		
		НастроитьФормуПоСостояниюСинхронизации("Ошибка");
		
		Сообщить(Результат.ТекстОшибки);
		Возврат;
		
	Иначе
		
		РезультатВыгрузки = ВыполнитьСинхронизациюСервер();
		
		Если РезультатВыгрузки.Успешно Тогда
			
			ОбновитьСсылкуНаФреш();
			НастроитьФормуПоСостояниюСинхронизации("Финиш");
			
		Иначе
			
			НастроитьФормуПоСостояниюСинхронизации("Ошибка");
			
			Сообщить(РезультатВыгрузки.ТекстОшибки);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Оповестить("ВыполненОбмен");
	Оповестить("ИзмененыЗначенияНастроек");
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСинхронизациюСервер() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	НачатьТранзакцию();
	
	РегистрацияВОблакеВызовСервера.УстановитьПараметрыСинхронизации();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Отказ = Ложь;
	СообщениеПриОшибке = "";
	
	Синхронизация.ПроверитьУстановитьПодключение(Отказ, СообщениеПриОшибке, Истина);
	
	ОтчетыДляВыгрузки = Документы.ОтчетОРозничныхПродажах.ОтчетыОПродажахКВыгрузке();
	
	Если НЕ Отказ И ОтчетыДляВыгрузки.Количество() > 0 Тогда
		Синхронизация.ВыгрузитьОтчетыОПродажах(Отказ, СообщениеПриОшибке);
	КонецЕсли;
	
	Если Отказ Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = СообщениеПриОшибке;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	ОбщегоНазначения.УстановитьЖирныйШрифтПолей(ЭтотОбъект, "Завершить, ЗавершитьНедоступно");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПрайсЛист()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Код КАК Код
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.КодПоиска = &КодПоиска";
	
	Запрос.УстановитьПараметр("КодПоиска", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектТовар = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектТовар.КодПоиска = Выборка.Код;
		ОбъектТовар.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


