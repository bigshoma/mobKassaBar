
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Внимание.Видимость = Ложь;
	
	НастроитьФормуПоЗначениямНастроек();
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтаФорма, "Демоверсия");
	
	Если Параметры.Свойство("ПервыйЗапуск") Тогда
		ПервыйЗапуск = Истина;
		Элементы.Готово.Заголовок = НСтр("ru = 'Продолжить'");
		
		ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект,,,,, Ложь);

	Иначе
		Элементы.Готово.Заголовок = НСтр("ru = 'Готово'");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтаФорма, "Пропустить", "Видимость", Ложь);
		ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект);

	КонецЕсли;
	
	НаборКонстант = Константы.СоздатьНабор(СписокКонстант());
	НаборКонстант.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НаборКонстант, СписокКонстант());
	
	// АдминистративныйРежим
	ОбщегоНазначения.НастроитьФормуПоАдминистративномуРежиму(ЭтаФорма);
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
	// Демоверсия
	НастроитьФормуДляДемоверсии();
	
	Если ЗначениеНастроекПовтИсп.ЭтоДемоверсия() И ПервыйЗапуск Тогда
		ОповеститьОбИзмененииЗначенийНастроек = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// АдминистративныйРежим
	НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененАдминистративныйРежим" Тогда
		// АдминистративныйРежим
		НастроитьФормуПоАдминистративномуРежиму();
		НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Если ПервыйЗапуск Тогда
		
		Если ОповеститьОбИзмененииЗначенийНастроек Тогда
			Если РежимСинхронизацииДанных = ПредопределенноеЗначение("Перечисление.РежимСинхронизацииДанных.Автономный") Тогда
				ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПараметрыУчета");
			ИначеЕсли РежимСинхронизацииДанных = ПредопределенноеЗначение("Перечисление.РежимСинхронизацииДанных.ККМOffline") Тогда
				ОткрытьФорму("Обработка.НастройкиПриложения.Форма.ПараметрыСинхронизации");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиент.ПередЗакрытиемФормыНастроек(ЭтаФорма, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура РежимСинхронизацииДанныхПриИзменении(Элемент)
	
	УстановленныйРежим = УстановленныйРежим();
	
	Если ЗначениеЗаполнено(УстановленныйРежим)
		И УстановленныйРежим = ПредопределенноеЗначение("Перечисление.РежимСинхронизацииДанных.Автономный")
		И РежимСинхронизацииДанных = ПредопределенноеЗначение("Перечисление.РежимСинхронизацииДанных.ККМOffline") Тогда
		
		Элементы.Внимание.Видимость = Истина;
	Иначе
		
		Элементы.Внимание.Видимость = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАдминистративныйРежим(Команда)
	
	Если НЕ АдминистративныйРежим
		И ОбщегоНазначенияВызовСервера.УстановленПарольАдминистративногоРежима() Тогда
		
		ОбщегоНазначенияКлиент.ОткрытьФормуПереключенияАдминистративногоРежима(ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	
	АдминистративныйРежим = НЕ АдминистративныйРежим;
	
	ИзменитьАдминистративныйРежим();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыАдминистративныйРежим

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПоАдминистративномуРежиму()
	
	СписокТолькоПросмотр = "РежимСинхронизацииДанных";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		СписокТолькоПросмотр, "ТолькоПросмотр", НЕ АдминистративныйРежим
	);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПоАдминистративномуРежимуКлиент()
	
	// АдминистративныйРежим
	НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
	
	НастроитьФормуПоАдминистративномуРежиму(Истина);
	Оповестить("ИзмененАдминистративныйРежим");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоАдминистративномуРежиму(УстановитьРежим = Ложь)
	
	ОбщегоНазначения.НастроитьФормуПоАдминистративномуРежиму(ЭтаФорма, УстановитьРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдминистративныйРежим()
	
	НастроитьОтображениеПереключенияРежима();
	
	ПодключитьОбработчикОжидания("НастроитьФормуПоАдминистративномуРежимуКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеПереключенияРежима()
	
	Если АдминистративныйРежим Тогда
		
		Элементы.СтраницыАдминистративныйРежим.ТекущаяСтраница = Элементы.СтраницаРазблокированоПроцесс;
	Иначе
		
		Элементы.СтраницыАдминистративныйРежим.ТекущаяСтраница = Элементы.СтраницаРазблокировать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СписокКонстант()
	
	Возврат "РежимСинхронизацииДанных";
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановленныйРежим()

	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РежимСинхронизацииДанных");

КонецФункции

&НаКлиенте
Процедура СохранитьПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Отказ = Ложь;
	СохранитьНаСервере(Отказ);
	
	Если НЕ Отказ Тогда
		Если ОповеститьОбИзмененииЗначенийНастроек Тогда
			Оповестить("ИзмененыЗначенияНастроек");
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтаФорма);
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, "ГруппаРазблокировать", "АдминистративныйРежимРазблокировать",, Ложь);
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект, 
		"ГруппаРазблокированоПроцесс", "АдминистративныйРежимРазблокированоПроцесс",, Ложь
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте() Экспорт
	
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если НЕ ПроверитьЗаполнениеФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если ПервыйЗапуск Тогда
			СохранитьНаСервере(Отказ);
		Иначе
			
			УстановленныйРежим = УстановленныйРежим();
			Если ЗначениеЗаполнено(УстановленныйРежим) И НЕ РежимСинхронизацииДанных = УстановленныйРежим 
				И УстановленныйРежим = ПредопределенноеЗначение("Перечисление.РежимСинхронизацииДанных.Автономный")
				И РежимСинхронизацииДанных = ПредопределенноеЗначение("Перечисление.РежимСинхронизацииДанных.ККМOffline")
				Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьПослеПодтверждения", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'Будут очищены прайс-лист, данные о продажах и кассовых операциях. Продолжить?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
				Возврат;
				
				
			Иначе
				СохранитьНаСервере(Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если ОповеститьОбИзмененииЗначенийНастроек Тогда
			Оповестить("ИзмененыЗначенияНастроек");
			
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере(Отказ)
	
	Если НЕ РежимСинхронизацииДанных = УстановленныйРежим() Тогда
		
		Если РежимСинхронизацииДанных = Перечисления.РежимСинхронизацииДанных.ККМOffline Тогда
			ОбщегоНазначения.ОчиститьБД();
		КонецЕсли;
		
		ОбщегоНазначения.СохранитьКонстантыФормы(ЭтаФорма, СписокКонстант(), Отказ);
		
		Если РежимСинхронизацииДанных = Перечисления.РежимСинхронизацииДанных.Автономный Тогда
			Справочники.ЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияПоУмолчанию();
		КонецЕсли;
		
		РегистрацияВОблакеВызовСервера.СохранитьСтатусРегистрации(Неопределено);
		
	Иначе
		
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляДемоверсии()
	
	Если ЗначениеНастроекПовтИсп.ЭтоДемоверсия() Тогда
		
		Если НЕ ЗначениеЗаполнено(РежимСинхронизацииДанных) Тогда 
			РежимСинхронизацииДанных = Перечисления.РежимСинхронизацииДанных.Автономный;
		КонецЕсли;
		
		Элементы.Внимание.Видимость = Ложь;
		Элементы.РежимСинхронизацииДанных.Доступность = Ложь;
	Иначе
		Элементы.Демоверсия.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеФормы()
	
	Если НЕ ЗначениеЗаполнено(РежимСинхронизацииДанных) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.РежимСинхронизацииДанных, НСтр("ru = 'Режим синхронизации данных'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

