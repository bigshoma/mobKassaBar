
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьПолученныйШтрихкод(ПолученныйШтрихкод, Параметры) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПолученныйШтрихкод);
	
КонецПроцедуры

// Возникает при сканировании внутренней камерой устройства
//
&НаКлиенте
Процедура ОбработкаЗакрытияСканирования(ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЦветИнформационныхНадписей(ЭтотОбъект, "ПояснениеОНедоступностиКамеры, ПояснениеТест");
	ОбщегоНазначения.УстановитьЦветПредупреждающихПолей(ЭтотОбъект, "ПояснениеСканерНеАктивирован");
	
	НаборКонстант = Константы.СоздатьНабор(СписокКонстант());
	НаборКонстант.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НаборКонстант, СписокКонстант());
	
	ИспользуетсяАсинхронныйСканер = ПодключаемоеОборудованиеВызовСервера.ЭтоАсинхронныйСканерШтрихкодов(ОборудованиеСканирования);
	
	НастроитьФормуПоЗначениямНастроек();
	
	// АдминистративныйРежим
	ОбщегоНазначения.НастроитьФормуПоАдминистративномуРежиму(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ОборудованиеСканирования) Тогда
		ДрайверСканера = ОборудованиеСканирования.ДрайверОборудования;
	КонецЕсли;
	
	НастроитьВидимостьПараметровСканера();
	
	ОпределитьПараметрыДрайвера();
	
	// ОриентацияЭкрана
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// АдминистративныйРежим
	НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
	
	ОпределитьВерсиюДрайверов();
	ОпределитьДоступностьКоманд();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ПояснениеОНедоступностиКамеры", "Видимость", Ложь);
	
	#Если МобильноеПриложениеКлиент Тогда
		Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
			Элементы.ТипУстройстваСканирования.СписокВыбора.Удалить(0);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ПояснениеОНедоступностиКамеры", "Видимость", Истина);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененАдминистративныйРежим" Тогда
		// АдминистративныйРежим
		НастроитьФормуПоАдминистративномуРежиму();
		НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
		ОпределитьДоступностьКоманд();
		
	ИначеЕсли ИмяСобытия = "ИнициализированАсинхронныйСканер" Тогда
		
		НастроитьЭлементыАсинхронногоСканера();
		
	КонецЕсли;
	
	Если ПодключаемоеОборудованиеКлиент.ЭтоОповещениеСканераШтрихкода(ИмяСобытия) И ВводДоступен() Тогда
		ОбработатьПолученныйШтрихкод(Параметр, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	ОбщегоНазначенияКлиент.ПередЗакрытиемФормыНастроек(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайверСканера(Команда)
	
	ОчиститьСообщения();
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если НЕ ЗначениеЗаполнено(ДрайверСканера) Тогда
			Возврат;
		КонецЕсли;
		
		МенеджерОборудованияКлиент.УстановитьДрайверИзМакета(ДрайверСканера);
		ОпределитьВерсиюДрайверов();
		ОпределитьДоступностьКоманд();
		
	#Иначе
		ТекстОшибки = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	
	СохранитьНаКлиенте(Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
	
	ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОчиститьСообщения();
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если НЕ ПодключаемоеОборудованиеКлиент.ОтключитьОборудование(ОборудованиеСканирования) Тогда
			Возврат;
		КонецЕсли;
		
		МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(ОборудованиеСканирования);
		
	#Иначе
		ТекстОшибки = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСканер(Команда)
	
	СохранитьНаКлиенте(Ложь);
	
	ПодключаемоеОборудованиеКлиент.ИнициализироватьАсинхронныйСканер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАдминистративныйРежим(Команда)
	
	Если НЕ АдминистративныйРежим
		И ОбщегоНазначенияВызовСервера.УстановленПарольАдминистративногоРежима() Тогда
		
		ОбщегоНазначенияКлиент.ОткрытьФормуПереключенияАдминистративногоРежима(ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	
	АдминистративныйРежим = НЕ АдминистративныйРежим;
	
	ИзменитьАдминистративныйРежим();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ТипУстройстваСканированияПриИзменении(Элемент)
	
	ТипУстройстваСканированияПриИзмененииНаСервере();
	ОпределитьВерсиюДрайверов();
	ОпределитьДоступностьКоманд();
	
	НастроитьЭлементыАсинхронногоСканера();
	
КонецПроцедуры

&НаКлиенте
Процедура ДрайверСканераПриИзменении(Элемент)
	
	ДрайверСканераПриИзмененииНаСервере();
	ОпределитьВерсиюДрайверов();
	ОпределитьДоступностьКоманд();
	
	НастроитьЭлементыАсинхронногоСканера();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыАдминистративныйРежим

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПоАдминистративномуРежиму()
	
	СписокТолькоПросмотр = "ТипУстройстваСканирования, ДрайверСканера";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, СписокТолькоПросмотр, "ТолькоПросмотр", НЕ АдминистративныйРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПоАдминистративномуРежимуКлиент()
	
	// АдминистративныйРежим
	НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
	
	НастроитьФормуПоАдминистративномуРежиму(Истина);
	Оповестить("ИзмененАдминистративныйРежим");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоАдминистративномуРежиму(УстановитьРежим = Ложь)
	
	ОбщегоНазначения.НастроитьФормуПоАдминистративномуРежиму(ЭтотОбъект, УстановитьРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдминистративныйРежим()
	
	НастроитьОтображениеПереключенияРежима();
	
	ПодключитьОбработчикОжидания("НастроитьФормуПоАдминистративномуРежимуКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеПереключенияРежима()
	
	Если АдминистративныйРежим Тогда
		
		Элементы.СтраницыАдминистративныйРежим.ТекущаяСтраница = Элементы.СтраницаРазблокированоПроцесс;
	Иначе
		
		Элементы.СтраницыАдминистративныйРежим.ТекущаяСтраница = Элементы.СтраницаРазблокировать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьЗаполнениеФормы()
	
	#Если МобильноеПриложениеКлиент Тогда
		
		Если ЗначениеЗаполнено(ТипУстройстваСканирования)
			И НЕ ТипУстройстваСканирования = ПредопределенноеЗначение("Перечисление.ТипыУстройствСканирования.ВстроеннаяКамера")
			И НЕ ЗначениеЗаполнено(ДрайверСканера) Тогда
			
			ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.ДрайверСканера, НСтр("ru = 'Драйвер сканера'"));
			
			Возврат Ложь;
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДрайверСканераПриИзмененииНаСервере()
	
	ПодключаемоеОборудование.ОпределитьПодключаемоеОборудование(ДрайверСканера, ОборудованиеСканирования);
	
	ОпределитьПараметрыДрайвера();
	
КонецПроцедуры

&НаСервере
Функция СписокКонстант()
	
	Возврат "ТипУстройстваСканирования, ОборудованиеСканирования";
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(ЗакрытьФорму = Истина) Экспорт
	
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если НЕ ПроверитьЗаполнениеФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаСервере(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если ОповеститьОбИзмененииЗначенийНастроек Тогда
			Оповестить("ИзмененыЗначенияНастроек");
		КонецЕсли;
		
		Если ЗакрытьФорму Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере(Отказ)
	
	ОбщегоНазначения.СохранитьКонстантыФормы(ЭтотОбъект, СписокКонстант(), Отказ);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	НастроитьЭлементыАсинхронногоСканера();
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект);
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект,
		"ГруппаРазблокировать", "АдминистративныйРежимРазблокировать",, Ложь
	);
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект,
		"ГруппаРазблокированоПроцесс", "АдминистративныйРежимРазблокированоПроцесс",, Ложь
	);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАсинхронногоСканера()
	
	ИспользуетсяАсинхронныйСканер = ПодключаемоеОборудованиеВызовСервера.ЭтоАсинхронныйСканерШтрихкодов(ОборудованиеСканирования);
	
	АсинхронныйСканерИнициализирован = ПодключаемоеОборудованиеВызовСервера.СканерШтрихкодовИнициализирован();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "АктивироватьСканер", "Видимость",
		ИспользуетсяАсинхронныйСканер
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Тест", "Видимость", 
		НЕ ИспользуетсяАсинхронныйСканер
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ПояснениеСканерНеАктивирован", "Видимость",
		ИспользуетсяАсинхронныйСканер И НЕ АсинхронныйСканерИнициализирован
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "ПояснениеТест", "Видимость",
		ИспользуетсяАсинхронныйСканер И АсинхронныйСканерИнициализирован
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВерсиюДрайверов()
	
	ВерсияДрайвераСканераВМакете = "";
	
	ПодключаемоеОборудованиеКлиент.ПолучитьВерсиюДрайвераОборудования(ЭтотОбъект,
		ОборудованиеСканирования,
		ВерсияДрайвераСканера,
		ВерсияДрайвераСканераВМакете,
		ДрайверСканераУстановлен);
	
	Если НЕ ДрайверСканераУстановлен Тогда
		Элементы.ВерсияДрайвераСканера.ЦветТекста = WebЦвета.Кирпичный;
	Иначе
		Элементы.ВерсияДрайвераСканера.ЦветТекста = Новый Цвет;
	КонецЕсли;
	
	ЗаголовокКнопки = НСтр("ru = 'Установить драйвер'");
	
	Если ЗначениеЗаполнено(ВерсияДрайвераСканераВМакете) Тогда
		ЗаголовокКнопки = ЗаголовокКнопки + " (" + ВерсияДрайвераСканераВМакете + ")";
	КонецЕсли;
	
	УстановитьЗаголовокКнопкиУстановитьДрайвер(ЗаголовокКнопки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиУстановитьДрайвер(ЗаголовокКнопки)
	
	Элементы.УстановитьДрайверСканераШтрихкодов.Заголовок = ЗаголовокКнопки;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьКоманд()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"ДрайверСканера, ВерсияДрайвераСканера, УстановитьДрайверСканераШтрихкодов",
		"Видимость",
		ЗначениеЗаполнено(ТипУстройстваСканирования) 
		И ТипУстройстваСканирования = ПредопределенноеЗначение("Перечисление.ТипыУстройствСканирования.ВнешнийСканерШтрихкодов")
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "УстановитьДрайверСканераШтрихкодов, Настроить", "Доступность",
		АдминистративныйРежим И ЗначениеЗаполнено(ОборудованиеСканирования));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Настроить", "Видимость",
			НЕ ТипУстройстваСканирования = ПредопределенноеЗначение("Перечисление.ТипыУстройствСканирования.ВстроеннаяКамера"));
			
			
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		"УстановитьДрайверСканераШтрихкодов",
		"Видимость",
		НЕ ЭтоДрайверВнешняяКомпонента
	);
	
	#Если МобильноеПриложениеСервер Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Тест", "Доступность",
			ДрайверСканераУстановлен ИЛИ ТипУстройстваСканирования = ПредопределенноеЗначение("Перечисление.ТипыУстройствСканирования.ВстроеннаяКамера"));
			
	#Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "Тест", "Доступность", Ложь);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПараметровСканера()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект, "НастройкиСканера", "Видимость",
		ЗначениеЗаполнено(ТипУстройстваСканирования));
	
КонецПроцедуры

&НаСервере
Процедура ТипУстройстваСканированияПриИзмененииНаСервере()
	
	НастроитьВидимостьПараметровСканера();
	
	Если ЗначениеЗаполнено(ТипУстройстваСканирования)
		И ТипУстройстваСканирования = ПредопределенноеЗначение("Перечисление.ТипыУстройствСканирования.ВнешнийСканерШтрихкодов") Тогда
		
		#Если МобильноеПриложениеСервер Тогда
			ДрайверСканера = ПредопределенноеЗначение("Справочник.ДрайверыОборудования.Драйвер1ССканерШтрихкода");
		#КонецЕсли
		
	Иначе
		ДрайверСканера = ПредопределенноеЗначение("Справочник.ДрайверыОборудования.ПустаяСсылка");
	КонецЕсли;
	
	ДрайверСканераПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыДрайвера()
	
	Если ЗначениеЗаполнено(ДрайверСканера) Тогда
		
		ЭтоДрайверВнешняяКомпонента = НЕ ДрайверСканера.ИнтеграционноеПриложение;
	Иначе
		ЭтоДрайверВнешняяКомпонента = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
КонецПроцедуры

#КонецОбласти

