
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ОформитьСуммовыеПоля(ЭтотОбъект, "СуммаОстаткаВКассе");
	
	НастроитьФормуПоЗначениямНастроек();
	
	НаборКонстант = Константы.СоздатьНабор(СписокКонстант());
	НаборКонстант.Прочитать();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НаборКонстант, СписокКонстант());
	ИспользоватьЗаказыКлиентовФО = ИспользоватьЗаказыКлиентов;
	
	ПрочитатьКоличествоВидовОплаты();
	ПрочитатьКоличествоКассиров();
	
	УстановитьВидимостьСуммыВыемки();
	
	// АдминистративныйРежим
	ОбщегоНазначения.НастроитьФормуПоАдминистративномуРежиму(ЭтотОбъект);
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСпискаВидовОплаты();
	УстановитьДоступностьСпискаКассиров();
	УстановитьДоступностьРасчетовСКлиентами();
	
	// АдминистративныйРежим
	НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ДлинаИНН = СтрДлина(СокрЛП(ИНН));
	
	Если НЕ ДлинаИНН = 0 Тогда
		Если НЕ (ДлинаИНН = 10 ИЛИ ДлинаИНН = 12) Тогда
			ТекстСообщения = НСтр("ru = 'ИНН может состоять из 10 или 12 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			ИННЧислом = Число(ИНН);
		Исключение
			ТекстСообщения = НСтр("ru = 'ИНН может состоять только из цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ДлинаКПП = СтрДлина(СокрЛП(КПП));
	
	Если НЕ ДлинаКПП = 0 Тогда
		Если НЕ ДлинаКПП = 9 Тогда
			ТекстСообщения = НСтр("ru = 'КПП может состоять из 9 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			КППЧислом = Число(КПП);
		Исключение
			ТекстСообщения = НСтр("ru = 'КПП может состоять только из цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ИспользоватьОплатуНаличными И НЕ ИспользоватьОплатуПлатежнымиКартами Тогда
		
		ТекстСообщения = НСтр("ru = 'Не установлена оплата наличными или платежными картами'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененАдминистративныйРежим" Тогда
		// АдминистративныйРежим
		НастроитьФормуПоАдминистративномуРежиму();
		НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	// ОриентацияЭкрана
	ПриИзмененииПараметровЭкранаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	ОбщегоНазначенияКлиент.ПередЗакрытиемФормыНастроек(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ТипВыемкиПриИзменении(Элемент)
	УстановитьВидимостьСуммыВыемки();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	
	УстановитьДоступностьСпискаВидовОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПоКассирамПриИзменении(Элемент)
	
	УстановитьДоступностьСпискаКассиров();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаказыКлиентовПриИзменении(Элемент)
	
	Если НЕ ИспользоватьЗаказыКлиентов Тогда
		ИспользоватьРасчетыСКлиентами = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьРасчетовСКлиентами();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовОплаты(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеВидыОплаты", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыОплаты.ФормаСписка",,ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокКассиров(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеКассиры", ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка",,ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьАдминистративныйРежим(Команда)
	
	Если НЕ АдминистративныйРежим
		И ОбщегоНазначенияВызовСервера.УстановленПарольАдминистративногоРежима() Тогда
		
		ОбщегоНазначенияКлиент.ОткрытьФормуПереключенияАдминистративногоРежима(ЭтотОбъект);
		
		Возврат;
	КонецЕсли;
	
	АдминистративныйРежим = НЕ АдминистративныйРежим;
	
	ИзменитьАдминистративныйРежим();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьЗаполнениеФормы()
	
	Если НЕ ТипВыемки = ПредопределенноеЗначение("Перечисление.ТипыВыемки.НеполнаяВыемка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СуммаОстаткаВКассе) Тогда
		
		ПомощникUIКлиент.СообщитьПолеНеЗаполнено(ЭтотОбъект, Элементы.СуммаОстаткаВКассе, НСтр("ru = 'Сумма остатка в кассе'"));
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте() Экспорт
	
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если НЕ ПроверитьЗаполнение() ИЛИ НЕ ПроверитьЗаполнениеФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаСервере(Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если ОповеститьОбИзмененииЗначенийНастроек Тогда
			Оповестить("ИзмененыЗначенияНастроек");
		КонецЕсли;
		
		Если ИзмененаФО Тогда
			ОбновитьИнтерфейс();
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере(Отказ)
	
	Если НЕ ИспользоватьАлкогольнуюПродукцию Тогда
		
		Если ЗагружатьТТНЕГАИС Тогда
			ИзмененаФО = Истина;
		КонецЕсли;
		
		ЗагружатьТТНЕГАИС = Ложь;
		ВыгружатьЧекиЕГАИС = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьЗаказыКлиентов = ИспользоватьЗаказыКлиентовФО Тогда
		ИзмененаФО = Истина;
	КонецЕсли;
	
	ОбщегоНазначения.СохранитьКонстантыФормы(ЭтотОбъект, СписокКонстант(), Отказ);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоЗначениямНастроек()
	
	ОбщегоНазначения.УстановитьШрифт(ЭтотОбъект);
	
	ВыгружатьЧекиЕГАИС = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьЧекиЕГАИС");
	
	Если ВыгружатьЧекиЕГАИС Тогда
		ТекстПодсказки = НСтр("ru = 'Обязательное поле при продаже алкогольной продукции (ЕГАИС)'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НаименованиеМагазина, АдресМагазина, КПП", "Подсказка",
			ТекстПодсказки);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НаименованиеМагазина, АдресМагазина, КПП", "ОтображениеПодсказки",
			ОтображениеПодсказки.Кнопка);
			
	Иначе
		
		ТекстПодсказки = "";
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НаименованиеМагазина, АдресМагазина, КПП", "Подсказка",
			ТекстПодсказки);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
			"НаименованиеМагазина, АдресМагазина, КПП", "ОтображениеПодсказки",
			ОтображениеПодсказки.Авто);
		
	КонецЕсли;
	
	//"
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект);
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект,
		"ГруппаРазблокировать", "АдминистративныйРежимРазблокировать",, Ложь
	);
	
	ОбщегоНазначения.НастроитьКомандуГотово(ЭтотОбъект,
		"ГруппаРазблокированоПроцесс", "АдминистративныйРежимРазблокированоПроцесс",, Ложь
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСуммыВыемки()
	
	Элементы.СуммаОстаткаВКассе.Видимость = ТипВыемки = Перечисления.ТипыВыемки.НеполнаяВыемка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСпискаВидовОплаты()
	
	Элементы.ОткрытьСписокВидовОплаты.Доступность = ИспользоватьОплатуПлатежнымиКартами;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСпискаКассиров()
	
	Элементы.ОткрытьСписокКассиров.Доступность = ИспользоватьУчетПоКассирам;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасчетовСКлиентами()
	
	Элементы.ИспользоватьРасчетыСКлиентами.Доступность = ИспользоватьЗаказыКлиентов;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКоличествоВидовОплаты()
	
	КоличествоВидов = Справочники.ВидыОплаты.КоличествоВидовОплаты();
	ЗаголовокВидыОплаты = НСтр("ru = 'Виды оплаты (%Количество%)'");
	ЗаголовокВидыОплаты = СтрЗаменить(ЗаголовокВидыОплаты, "%Количество%", КоличествоВидов);
	
	Элементы.ОткрытьСписокВидовОплаты.Заголовок = ЗаголовокВидыОплаты;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКоличествоКассиров()
	
	КоличествоКассиров = Справочники.Пользователи.КоличествоПользователей();
	ЗаголовокКассиры = НСтр("ru = 'Кассиры (%Количество%)'");
	ЗаголовокКассиры = СтрЗаменить(ЗаголовокКассиры, "%Количество%", КоличествоКассиров);
	
	Элементы.ОткрытьСписокКассиров.Заголовок = ЗаголовокКассиры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВидыОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	ПрочитатьКоличествоВидовОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеКассиры(Результат, ДополнительныеПараметры) Экспорт
	
	ПрочитатьКоличествоКассиров();
	
КонецПроцедуры

&НаСервере
Функция СписокКонстант()
	
	Возврат
	"НаименованиеОрганизации,
	|ИНН,
	|СистемаНалогообложения,
	|ИспользоватьСкидкиНаценки,
	|ИспользоватьОплатуНаличными,
	|ИспользоватьОплатуПлатежнымиКартами,
	|ИспользоватьУчетПоКассирам,
	|ИспользоватьАлкогольнуюПродукцию,
	|ТипВыемки,
	|СуммаОстаткаВКассе,
	|КПП,
	|НаименованиеМагазина,
	|АдресМагазина,
	|ЗагружатьТТНЕГАИС,
	|ВыгружатьЧекиЕГАИС,
	|ИспользоватьЗаказыКлиентов,
	|ИспользоватьРасчетыСКлиентами";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыАдминистративныйРежим

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПоАдминистративномуРежиму()
	
	СписокТолькоПросмотр = 
	"НаименованиеОрганизации,
	|ИНН,
	|СистемаНалогообложения,
	|ИспользоватьСкидкиНаценки,
	|ИспользоватьОплатуНаличными,
	|ИспользоватьОплатуПлатежнымиКартами,
	|ИспользоватьУчетПоКассирам,
	|ИспользоватьЗаказыКлиентов,
	|ИспользоватьАлкогольнуюПродукцию,
	|ТипВыемки,
	|СуммаОстаткаВКассе,
	|КПП,
	|НаименованиеМагазина,
	|АдресМагазина,
	|ИспользоватьРасчетыСКлиентами";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(ЭтотОбъект,
		СписокТолькоПросмотр, "ТолькоПросмотр", НЕ АдминистративныйРежим);
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПоАдминистративномуРежимуКлиент()
	
	// АдминистративныйРежим
	НастроитьДоступностьЭлементовПоАдминистративномуРежиму();
	
	НастроитьФормуПоАдминистративномуРежиму(Истина);
	Оповестить("ИзмененАдминистративныйРежим");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоАдминистративномуРежиму(УстановитьРежим = Ложь)
	
	ОбщегоНазначения.НастроитьФормуПоАдминистративномуРежиму(ЭтотОбъект, УстановитьРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьАдминистративныйРежим()
	
	НастроитьОтображениеПереключенияРежима();
	
	ПодключитьОбработчикОжидания("НастроитьФормуПоАдминистративномуРежимуКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеПереключенияРежима()
	
	//"
	Если АдминистративныйРежим Тогда
		
		Элементы.СтраницыАдминистративныйРежим.ТекущаяСтраница = Элементы.СтраницаРазблокированоПроцесс;
	Иначе
		
		Элементы.СтраницыАдминистративныйРежим.ТекущаяСтраница = Элементы.СтраницаРазблокировать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОриентацияЭкрана

// ОриентацияЭкрана
&НаСервере
Процедура ПриИзмененииПараметровЭкранаСервер()
	
	ОбщегоНазначения.УстановитьОриентациюЭкрана();
	НастроитьФормуПоОриентацииЭкрана();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОриентацииЭкрана()
	
	Если ПараметрыСеанса.ГоризонтальнаяОриентацияЭкрана Тогда
		
		Элементы.ГруппаБезналичнаяОплата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Элементы.ГруппаКассиры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		Элементы.ОтступБезналичнаяОплата.Видимость = Истина;
		Элементы.ОтступБезналичнаяОплата.РастягиватьПоГоризонтали = Истина;
		
		Элементы.ОтступКассиры.Видимость = Истина;
		Элементы.ОтступКассиры.РастягиватьПоГоризонтали = Истина;
		
		Элементы.КоннекторВидыОплаты.Видимость = Ложь;
		Элементы.КоннекторКассиры.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаБезналичнаяОплата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаКассиры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		Элементы.ОтступБезналичнаяОплата.Видимость = Ложь;
		Элементы.ОтступКассиры.Видимость = Ложь;
		
		Элементы.КоннекторВидыОплаты.Видимость = Истина;
		Элементы.КоннекторКассиры.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

