
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	СписокОборудования = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(,,РабочееМесто); 
	Для Каждого ЭкземплярОборудование Из СписокОборудования Цикл
		Элементы.Оборудование.СписокВыбора.Добавить(ЭкземплярОборудование.Ссылка);
	КонецЦикла;
	
	КассирДолжность = "Сидоров И.П.";
	КассирФИО = "АДМИНИСТРАТОР";
	СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	
	Сумма = 100;
	ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;

	ВремТовар = Товары.Добавить();
	СтрокаТаблицыТоваров = Новый Структура();
	ВремТовар.Наименование = "Мука пшеничная (Продукт первой необходимости)";   
	ВремТовар.Количество   = 0.992;  
	ВремТовар.Цена         = 15;
	ВремТовар.Сумма        = 13.84;  
	ВремТовар.НомерСекции  = 1;   
	ВремТовар.СтавкаНДС    = "НДС10%";   
	ВремТовар.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	ВремТовар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	ВремТовар = Товары.Добавить();
	СтрокаТаблицыТоваров = Новый Структура();
	ВремТовар.Наименование = "Томатный сок в бутылке 0.5 л";   
	ВремТовар.Количество   = 2;  
	ВремТовар.Цена         = 150;
	ВремТовар.Сумма        = 320;  
	ВремТовар.НомерСекции  = 2;   
	ВремТовар.СтавкаНДС    = "НДС20%";  
	ВремТовар.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	ВремТовар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	ВремТовар = Товары.Добавить();
	СтрокаТаблицыТоваров = Новый Структура();
	ВремТовар.Наименование = "Пакет";   
	ВремТовар.Количество   = 1;  
	ВремТовар.Цена         = 10;
	ВремТовар.Сумма        = 10;  
	ВремТовар.НомерСекции  = 3;   
	ВремТовар.СтавкаНДС    = "БезНДС%";  
	ВремТовар.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	ВремТовар.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
	ВремОплата.Сумма = 150;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	ВремОплата.Сумма = 200;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
	ВремОплата.Сумма = 0;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
	ВремОплата.Сумма = 0;
	ВремОплата = Оплата.Добавить();
	ВремОплата.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
	ВремОплата.Сумма = 0;
	
	СтрокиТекста = "Мой дядя самых честных правил,
		|Когда не в шутку занемог,
		|Он уважать себя заставил,
		|И лучше выдумать не мог;
		|Его пример другим наука:
		|Но, боже мой, какая скука
		|С больным сидеть и день, и ночь,
		|Не отходя ни шагу прочь!
		|Какое низкое коварство
		|Полуживого забавлять,
		|Ему подушки поправлять,
		|Печально подносить лекарство,
		|Вздыхать и думать про себя:
		|Когда же черт возьмет тебя!";
		
	ТипШтрихкода = "EAN13";
	ШтрихКод     = "2900001462105";
	
	ЭТСумма = 100;
	
	ОписаниеКоррекции  = "Ошибка применения ККТ";
	ДокументОснованиеФП = "4208773893";
	НомерПредписания = 100;
	ДатаКоррекции = ТекущаяДата();
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.Оборудование);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ОборудованиеУстройствоВвода);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ОборудованиеПлатежнаяСистема);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ОборудованиеПериферия);
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ТипРасчета);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.КассирФИО);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.КассирИНН);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.КассирДолжность);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.СистемаНалогообложения);
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.НомерЧека);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.Сумма);
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ТипШтрихкода);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.Штрихкод);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.СтрокиТекста);
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ЭТСумма);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ЭТНомерЧека);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ЭТНомерКарты);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ЭТНомерСсылкиОперации);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ЭТКодАвторизации);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ЭТСлипЧек);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ДП_Текст);
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.НеприменениеККТ);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ОписаниеКоррекции);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ТипКоррекции);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ДополнительныйРеквизит);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.ДатаКоррекции);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.НомерПредписания);
	
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаИспользовать);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаКодПроверки);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаТипМаркировки);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаGTIN);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаКИЗ);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаСерийныйНомер);
	МенеджерОборудованияВызовСервера.ПодготовитьЭлементУправления(Элементы.МаркировкаКодПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвераУстройстваПечати(Команда)
	
	ПолучитьВерсиюДрайвера(ОборудованиеУстройстваПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвераУстройстваВвода(Команда)
	
	ПолучитьВерсиюДрайвера(ОборудованиеУстройствоВвода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвераПлатежнаяСистема(Команда)
	
	ПолучитьВерсиюДрайвера(ОборудованиеПлатежнаяСистема);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсиюДрайвера(ПодключаемоеОборудование)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьВерсиюДрайвера(УникальныйИдентификатор, ПодключаемоеОборудование, Неопределено, ВыходныеПараметры) Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ПустаяСтрока(ВыходныеПараметры.ВерсияДрайвера) Тогда
			ТекстСообщения = "Версия драйвера установленная:" + ВыходныеПараметры.ВерсияДрайвера + Символы.ПС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыходныеПараметры.РевизияИнтерфейса) Тогда
			ТекстСообщения = ТекстСообщения + "Ревизия интерфейса драйвера:" + ВыходныеПараметры.РевизияИнтерфейса + Символы.ПС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ВыходныеПараметры.ВерсияДрайвераВМакете) Тогда
			ТекстСообщения = ТекстСообщения + "Версия драйвера в макете:" + ВыходныеПараметры.ВерсияДрайвераВМакете + Символы.ПС;
		КонецЕсли;
		
		Сообщить(ТекстСообщения);
		
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуГотовностиУстройства(Команда)
	
	ВыходныеПараметры = Неопределено;
	ОчиститьСообщения();
	
	Если МенеджерОборудованияКлиент.ВыполнитьПроверкуГотовностиУстройства(ОборудованиеУстройстваПечати, ВыходныеПараметры) Тогда
		Сообщить("Устройство доступно.");
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуГотовностиЭквайринга(Команда)
	
	ВыходныеПараметры = Неопределено;
	ОчиститьСообщения();
	
	Если МенеджерОборудованияКлиент.ВыполнитьПроверкуГотовностиУстройства(ОборудованиеПлатежнаяСистема, ВыходныеПараметры) Тогда
		Сообщить("Устройство доступно.");
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтавкуНДС(СтавкаНДС)
	
	Если СтавкаНДС = "НДС10%" Тогда
		Результат = 10
	ИначеЕсли СтавкаНДС = "НДС20%" Тогда
		Результат = 20
	ИначеЕсли СтавкаНДС = "НДС18%" Тогда
		Результат = 18
	ИначеЕсли СтавкаНДС = "НДС0%" Тогда
		Результат = 0
	ИначеЕсли СтавкаНДС = "НДС10/110" Тогда
		Результат = 110
	ИначеЕсли СтавкаНДС = "НДС18/118" Тогда
		Результат = 118
	ИначеЕсли СтавкаНДС = "НДС20/120" Тогда
		Результат = 120
	Иначе
		Результат = Неопределено; // Без НДС
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьШаблонЧека(ОбщиеПараметры, ШтрихкодВЧеке = Ложь)
	
	НесколькоВидовОплат = Истина;
	
	// Параметры установлены по умолчанию.   
	ОбщиеПараметры.ТипРасчета = ТипРасчета;
	ОбщиеПараметры.СистемаНалогообложения = СистемаНалогообложения;
	ОбщиеПараметры.Электронно = Ложь;
	
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.КассирФИО       = КассирФИО;
	ОбщиеПараметры.КассирИНН       = КассирИНН;
	ОбщиеПараметры.КассирДолжность = КассирДолжность;
	// ОбщиеПараметры.КодСистемыНалогообложения = КодСистемыНалогообложения;
	ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	ОбщиеПараметры.ОрганизацияКПП = "770901001";
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	ОбщиеПараметры.АдресРасчетов  = "г.Москва, Дмитровкое ш. д.9";
	ОбщиеПараметры.МестоРасчетов  = "Учебный центр 1С";
	
	НомерСтрокиТовара = 1;
	Для Каждого ВремТовар Из Товары Цикл
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Наименование = ВремТовар.Наименование;   
		СтрокаПозицииЧека.Количество   = ВремТовар.Количество;   
		СтрокаПозицииЧека.Цена         = ВремТовар.Цена;   
		СтрокаПозицииЧека.Сумма        = ВремТовар.Сумма;   
		СтрокаПозицииЧека.НомерСекции  = ВремТовар.НомерСекции; 
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ВремТовар.ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = ВремТовар.ПризнакПредметаРасчета;
		СтрокаПозицииЧека.СтавкаНДС    = ПолучитьСтавкуНДС(ВремТовар.СтавкаНДС);   
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтрокиТовара; // Дополнительный параметр для обработки строк чека для форматно-логического контроля.
		НомерСтрокиТовара = НомерСтрокиТовара + 1;
		
		Если МаркировкаИспользовать Тогда
			// Тип маркировки. 
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = МаркировкаТипМаркировки;
			// Строка,Необязательно - Глобальный идентификатор торговой единицы (GTIN)	
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = МаркировкаGTIN;
			// Строка,Необязательно - Серийный номер.
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = МаркировкаСерийныйНомер;
			// Строка,Необязательно - Контрольный идентификационный знак (КиЗ).
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак = МаркировкаКиЗ;
		КонецЕсли;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;    
	
	СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыТекстовойСтрокиЧека("Предоставляемый библиотекой функционал является универсальным и не зависит от конкретных моделей оборудования различных производителей. После встраивания библиотеки в конфигурацию, данные функции доступны пользователям через предоставляемый библиотекой пользовательский интерфейс.");
	СтрокаПозицииЧека.ПереносСтроки = Истина;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	Если ШтрихкодВЧеке Тогда
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЕсли;
	
	// Таблица оплат
	ВремИндекс = 0;
	Для Каждого ВремОплата Из Оплата Цикл
		Если ВремОплата.Сумма > 0 Тогда
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", ВремОплата.ТипОплаты); 
			СтрокаОплаты.Вставить("Сумма"    , ВремОплата.Сумма);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		КонецЕсли;
		ВремИндекс = ВремИндекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредзаполнитьПараметрыЧека(ОбщиеПараметры);
	
	ОбщиеПараметры.Вставить("ОрганизацияНазвание" , "ООО ""Тестовая организация""");
	ОбщиеПараметры.Вставить("ОрганизацияИНН"      , "00000000001");
	ОбщиеПараметры.Вставить("ОрганизацияКПП"      , "00000000002");
	ОбщиеПараметры.Вставить("НомерКассы"          , "2334534");
	ОбщиеПараметры.Вставить("НомерЧека"           , "30");
	ОбщиеПараметры.Вставить("НомерСмены"          , "12");
	ОбщиеПараметры.Вставить("ТекстШапки"          , "ДОБРО ПОЖАЛОВАТЬ!");
	ОбщиеПараметры.Вставить("ТекстПодвала"        , "СПАСИБО ЗА ПОКУПКУ!");
	ОбщиеПараметры.Вставить("КассирФИО"           , КассирФИО);
	ОбщиеПараметры.Вставить("КассирДолжность"     , КассирДолжность);
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ПечатьЭтикеток(Команда)
	
	ОчиститьСообщения();
	
	ЭтикеткиДляПечати = Новый Массив();
	
	Для Каждого ВремТовар Из Товары Цикл
		Этикетка = Новый Структура();
		НадписьЦена = "ЦЕНА: %% Руб.";
		НадписьЦена =СтрЗаменить(НадписьЦена, "%%", Формат(ВремТовар.Цена, "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0"));
		Этикетка.Вставить("ТипШтрихкода", ТипШтрихкода);
		Этикетка.Вставить("Штрихкод"    , Штрихкод);
		Этикетка.Вставить("ШапкаЭтикетки" , "ООО ""Тестовая организация""" + Символы.ПС + ВремТовар.Наименование);
		Этикетка.Вставить("ПодвалЭтикетки", НадписьЦена);
		ЭтикеткиДляПечати.Добавить(Этикетка);
	КонецЦикла;
	
	ВходныеПараметры = Новый Структура("Этикетки", ЭтикеткиДляПечати);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПечатьЭтикеток(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)
	
	МенеджерОборудованияКлиент.ОтключитьВсеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	МенеджерОборудованияКлиент.ОтключитьВсеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(ДанныеВвода)
	
	ВремТипШтрихкода = МенеджерОборудованияКлиент.ОпределитьТипШтрихкода(ДанныеВвода);
	
	Если ВремТипШтрихкода <> "EAN13" И ВремТипШтрихкода <> "EAN8" Тогда
		
	Результат = МенеджерОборудованияКлиентСервер.РасшифроватьQRКодЧекаККТ(ДанныеВвода);
	Если Результат.Расшифрован Тогда
		Сообщить("Чек ККТ");
		ВывестиСтруктуруНаЭкран(Результат);
	Иначе
			Результат = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(ДанныеВвода);
			Если Результат.Разобран Тогда
				Сообщить("Маркировки продукции");
				МаркировкаGTIN          = Результат.ГлобальныйИдентификаторТорговойЕдиницы;
				МаркировкаСерийныйНомер = Результат.СерийныйНомер;
				МаркировкаКодПроверки   = Результат.КодПроверки;
				Сообщить(Результат.EAN);
			Иначе
				Сообщить("Штрихкод: " + ДанныеВвода);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("Штрихкод (" + ВремТипШтрихкода + "): " + ДанныеВвода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ВыполнитьВводДанных(УникальныйИдентификатор, ОборудованиеУстройствоВвода, ВыходныеПараметры) Тогда
		Если ВыходныеПараметры.Свойство("ДанныеВвода") Тогда
			 ОбработатьШтрихкод(ВыходныеПараметры.ДанныеВвода)
		КонецЕсли;
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_Оплатить(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ЭТСумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ЭТНомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ЭТНомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ЭТНомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ЭТКодАвторизации);
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьОплатуПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить("ОТВЕТ:" + ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТНомерКарты          = ВыходныеПараметры.НомерКарты;
		ЭТНомерСсылкиОперации = ВыходныеПараметры.НомерСсылкиОперации;
		ЭТКодАвторизации      = ВыходныеПараметры.КодАвторизации;
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_Отменить(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ЭТСумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ЭТНомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ЭТНомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ЭТНомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ЭТКодАвторизации);
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьОтменуПлатежаПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТНомерКарты          = ВыходныеПараметры.НомерКарты;
		ЭТНомерСсылкиОперации = ВыходныеПараметры.НомерСсылкиОперации;
		ЭТКодАвторизации      = ВыходныеПараметры.КодАвторизации;
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_Вернуть(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ЭТСумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ЭТНомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ЭТНомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ЭТНомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ЭТКодАвторизации);
	
	Если Не МенеджерОборудованияКлиент.ВыполнитьВозвратПлатежаПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТНомерКарты          = ВыходныеПараметры.НомерКарты;
		ЭТНомерСсылкиОперации = ВыходныеПараметры.НомерСсылкиОперации;
		ЭТКодАвторизации      = ВыходныеПараметры.КодАвторизации;
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭС_СверкаИтогов(Команда)
	
	ОчиститьСообщения();
	ЭТСлипЧек = "";
	
	ВыходныеПараметры = Неопределено;
	Если Не МенеджерОборудованияКлиент.ВыполнитьСверкуИтоговПоПлатежнойСистеме(УникальныйИдентификатор, ОборудованиеПлатежнаяСистема, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		ЭТСлипЧек             = ВыходныеПараметры.СлипЧек;
		Элементы.ОперацииЭС.ТекущаяСтраница = Элементы.СлипЧек;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Сообщить("Событие:" + ИмяСобытия);
	
	Если ИмяСобытия = "Штрихкод" Или ИмяСобытия = "Barcode" Тогда
		ОбработатьШтрихкод(Параметр);
	Иначе
		Сообщить("Данные:" + Параметр);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ШиринаСтроки(Команда)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьШиринуСтрокиПечатающегоУстройства(УникальныйИдентификатор, ОборудованиеУстройстваПечати, Неопределено, ВыходныеПараметры) Тогда
		Сообщить("ШиринаСтроки:" + ВыходныеПараметры.ШиринаСтроки);
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ДенежныйЯщик(Команда)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьОткрытиеДенежногоЯщика(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ОткрытьСмену(Команда)
	
	ОчиститьСообщения();
	
	ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьОткрытиеСменыНаФискальномУстройстве(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ЗакрытьСмену(Команда)
	
	ОчиститьСообщения();
	
	ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	ВыходныеПараметры = Неопределено;
	
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьЗакрытиеСменыНаФискальномУстройстве(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ФискализацияЧека(Команда)
	
	ОчиститьСообщения();
	
	ВыходныеПараметры = Неопределено;
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ЗаполнитьШаблонЧека(ОбщиеПараметры, Истина);
	
	// Параметры для товарного чека и слип-чека ЕГАИС.
	ОбщиеПараметры.Вставить("ПодписьЕГАИС", ПодписьЕГАИС);
	ПредзаполнитьПараметрыЧека(ОбщиеПараметры);
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ОборудованиеУстройстваПечати);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ИсправленыОсновныеПараметры = Ложь;
	
	Если ФорматноЛогическийКонтрольВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(ОбщиеПараметры, ОборудованиеУстройстваПечати, ОписаниеОшибки) Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПривестиДанныеКТребуемомуФормату(ОбщиеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаНаФискальномУстройстве(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ОбщиеПараметры, ВыходныеПараметры) Тогда
		НомерЧека = ВыходныеПараметры.НомерЧека;
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ЧекКоррекции(Команда)
	
	ОчиститьСообщения();
	
	ВыходныеПараметры = Неопределено;
	
	// Общие параметры для формирования чека коррекции
	// Документ с правильными реквизитами
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	ЗаполнитьШаблонЧека(ОбщиеПараметры); 
	// Заполняем параметры для коррекции
	ОбщиеПараметры.ДополнительныйРеквизит = ДокументОснованиеФП;   // Фискальный признак документа основания.
	ОбщиеПараметры.ДанныеКоррекции.ТипКоррекции      = ТипКоррекции;
	ОбщиеПараметры.ДанныеКоррекции.ОписаниеКоррекции = ОписаниеКоррекции;
	ОбщиеПараметры.ДанныеКоррекции.ДатаКоррекции     = ДатаКоррекции;
	ОбщиеПараметры.ДанныеКоррекции.НомерПредписания  = НомерПредписания;
	ОбщиеПараметры.НеприменениеККТ = НеприменениеККТ; 
	
	// Документ, содержащий ошибки, для которого будет сформирован чек сторно.
	Если МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаКоррекцииНаФискальномУстройстве(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ОбщиеПараметры, ВыходныеПараметры) Тогда
		Если НЕ НеприменениеККТ Тогда
			// Документ, содержащий правильные реквизиты.
			ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
			ЗаполнитьШаблонЧека(ОбщиеПараметры); 
			Если НЕ МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаНаФискальномУстройстве(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ОбщиеПараметры, ВыходныеПараметры) Тогда
				Сообщить(ВыходныеПараметры.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ВнестиСумму(Команда)
	
	ОчиститьСообщения();
	
	ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ВходныеПараметры.Вставить("Внесение", Истина);
	ВходныеПараметры.Вставить("Сумма"   , Сумма);
	
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьВнесениеВыемку(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ИзъятьСумму(Команда)
	
	ОчиститьСообщения();
	
	ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ВходныеПараметры.Вставить("Внесение", Ложь);
	ВходныеПараметры.Вставить("Сумма"   , Сумма);
	
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьВнесениеВыемку(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ПечатьТекста(Команда)
	
	ОчиститьСообщения();
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура("СтрокиТекста", СтрокиТекста);
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПечатьТекста(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ОтчетОТекущемСостоянииРасчетов(Команда)
	
	ОчиститьСообщения();
	
	ТекстОтчета = "СУММА" + Символы.Таб + Строка(10.45);
	
	ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ВходныеПараметры.Вставить("ТекстОтчета", ТекстОтчета);
	
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);

	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьФормированиеОтчетаОТекущемСостоянииРасчетов(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ККТ_ОтчетБезГашения(Команда)
	
	ОчиститьСообщения();
	
	ТекстОтчета = "СУММА" + Символы.Таб + Строка(10.45);
	
	ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
	ВходныеПараметры.Вставить("ТекстОтчета", ТекстОтчета);
	
	ПредзаполнитьПараметрыЧека(ВходныеПараметры);
	
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьФормированиеОтчетаБезГашения(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ККТ_СостояниеККТ(Команда)
	
	ОчиститьСообщения();
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ВыполнитьПолучениеТекущегоСостоянияФискальногоУстройства(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		ВывестиСтруктуруНаЭкран(ВыходныеПараметры);
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ПараметрыККТ(Команда)
	
	ОчиститьСообщения();
	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ВыполнитьПолучениеПараметровФискальногоУстройства(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		ВывестиСтруктуруНаЭкран(ВыходныеПараметры);
	Иначе
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ККТ_ТекстЧека(Команда)
	
	ОчиститьСообщения();
	
	ШиринаСтроки = 32;
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьШиринуСтрокиПечатающегоУстройства(УникальныйИдентификатор, ОборудованиеУстройстваПечати, Неопределено, ВыходныеПараметры) Тогда
		ШиринаСтроки = ВыходныеПараметры.ШиринаСтроки;
	КонецЕсли;   
	
	ВыходныеПараметры = Неопределено;
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ЗаполнитьШаблонЧека(ОбщиеПараметры, Истина);
	ПредзаполнитьПараметрыЧека(ОбщиеПараметры);
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ОборудованиеУстройстваПечати);
	
	Текст = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки);
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура("СтрокиТекста", Текст);
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПечатьТекста(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ККТ_ТекстИнфоЧека(Команда)
	
	ОчиститьСообщения();
	
	ШиринаСтроки = 32;
	ВыходныеПараметры = Неопределено;
	Если МенеджерОборудованияКлиент.ПолучитьШиринуСтрокиПечатающегоУстройства(УникальныйИдентификатор, ОборудованиеУстройстваПечати, Неопределено, ВыходныеПараметры) Тогда
		ШиринаСтроки = ВыходныеПараметры.ШиринаСтроки;
	КонецЕсли;   
	
	ВыходныеПараметры = Неопределено;
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ЗаполнитьШаблонЧека(ОбщиеПараметры, Истина);
	
	ПредзаполнитьПараметрыЧека(ОбщиеПараметры);
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, ОборудованиеУстройстваПечати);
	
	ПараметрыШтрихкода = МенеджерОборудованияКлиентСервер.ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
	Текст = МенеджерОборудованияКлиентСервер.СформироватьИнформационныйЧек(ОбщиеПараметры, ШиринаСтроки,, ПараметрыШтрихкода);
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура("СтрокиТекста", Текст);
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПечатьТекста(УникальныйИдентификатор, ОборудованиеУстройстваПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УВ_ПодключениеОборудование(Команда)
	
	ОписаниеОшибки = "";
	Если НЕ МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ОборудованиеУстройствоВвода, ОписаниеОшибки) Тогда
		Сообщить(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УВ_ОтключитьОборудование(Команда)
	
	ОписаниеОшибки = "";
	Если НЕ МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ОборудованиеУстройствоВвода, ОписаниеОшибки) Тогда
		Сообщить(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВО_ПолучитьВесСЭлектронныхВесов(Команда)
	
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьПолучениеВесаСЭлектронныхВесов(УникальныйИдентификатор, ОборудованиеПериферия, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	Иначе
		Сообщить(ВыходныеПараметры.Вес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ВыводИнформацииНаДисплейПокупателя(Команда)
	
	ВходныеПараметры = Новый Структура("Текст", ДП_Текст);
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьВыводИнформацииНаДисплейПокупателя(УникальныйИдентификатор, ОборудованиеПериферия, ВходныеПараметры, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДП_ВыполнитьОчисткуДисплеяПокупателя(Команда)
	
	ВыходныеПараметры = Неопределено;
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьОчисткуДисплеяПокупателя(УникальныйИдентификатор, ОборудованиеПериферия, ВыходныеПараметры) Тогда
		Сообщить(ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтруктуруНаЭкран(СтруктурыДляВывода)  
	
	Для Каждого СвойствоСтруктуры Из СтруктурыДляВывода Цикл
		Если ТипЗнч(СвойствоСтруктуры.Значение) = Тип("Структура") Тогда 
			ВывестиСтруктуруНаЭкран(СвойствоСтруктуры.Значение) 
		Иначе
			Сообщить(СвойствоСтруктуры.Ключ + "=" + СвойствоСтруктуры.Значение);
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры    

&НаКлиенте
Процедура НеприменениеККТПриИзменении(Элемент)
	
	Элементы.ДополнительныйРеквизит.Доступность = НЕ НеприменениеККТ; 
	               
КонецПроцедуры
