
#Область ПрограммныйИнтерфейс

Функция РезультатПечатиЧека() Экспорт
	
	РезультатПечатиЧека = Новый Структура;
	РезультатПечатиЧека.Вставить("Успешно",          Ложь);
	РезультатПечатиЧека.Вставить("НомерЧека",          "");
	РезультатПечатиЧека.Вставить("НомерСмены",          0);
	РезультатПечатиЧека.Вставить("ПодписьЧекаЕГАИС",   "");
	РезультатПечатиЧека.Вставить("АдресЧекаЕГАИС",     "");
	РезультатПечатиЧека.Вставить("ОписаниеОшибки",     "");
	РезультатПечатиЧека.Вставить("ФискальныйПризнак",  "");
	
	Возврат РезультатПечатиЧека;
	
КонецФункции

Процедура ПечатьЧекаПродажи(Параметры, РезультатПечатиЧека) Экспорт
	
	ВыходныеПараметры = Неопределено;
	
	ПараметрыЧека = Параметры.ОбщиеПараметры;
	
	ПараметрыФискализацииЧека = ЗаполнитьПараметрыФискализацииЧека(ПараметрыЧека, Параметры.ОборудованиеПечати);
	
	Попытка
		
		Если ЗначениеЗаполнено(Параметры.ОборудованиеПечати) Тогда
			
			ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека");
			
			Если ПараметрыЧека.ЭтоЧекКоррекции И ПараметрыЧека.НеприменениеККТ Тогда
			
				Результат = МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаКоррекцииНаФискальномУстройстве(
					Параметры.УникальныйИдентификатор,
					Параметры.ОборудованиеПечати,
					ПараметрыФискализацииЧека,
					ВыходныеПараметры
				);
				
			ИначеЕсли ПараметрыЧека.ЭтоЧекКоррекции
				И ПараметрыЧека.ТипЧека = ПродажиКлиентСерверПовтИсп.ТипЧека_ВозвратПродажи() Тогда
				
				//! workaround
				ПараметрыФискализацииЧека.ТипРасчета = 
					ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
				
				Результат = МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаКоррекцииНаФискальномУстройстве(
					Параметры.УникальныйИдентификатор,
					Параметры.ОборудованиеПечати,
					ПараметрыФискализацииЧека,
					ВыходныеПараметры
				);
				
				//! workaround
				ПараметрыФискализацииЧека.ТипРасчета = 
					ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
				
			Иначе
				Результат = МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаНаФискальномУстройстве(
					Параметры.УникальныйИдентификатор,
					Параметры.ОборудованиеПечати,
					ПараметрыФискализацииЧека,
					ВыходныеПараметры
				);
			КонецЕсли;
			
		Иначе
			
			Результат = Истина;
			
			ВыходныеПараметры = Новый Структура;
			ВыходныеПараметры.Вставить("НомерЧека",  ПараметрыФискализацииЧека.НомерЧека);
			ВыходныеПараметры.Вставить("НомерСмены", ПараметрыФискализацииЧека.НомерСмены);
			ВыходныеПараметры.Вставить("ФискальныйПризнак", "");
			
			ПараметрыФискализацииЧека.Вставить("ПодписьЧека");
			ПараметрыФискализацииЧека.Вставить("АдресЧека");
			
		КонецЕсли;
		
	Исключение
		
		Описание = ОписаниеОшибки();
		
		РезультатПечатиЧека.ОписаниеОшибки = Описание;
		РезультатПечатиЧека.Успешно = Ложь;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека", "Ошибка - " + Описание);
		
		Возврат;
	КонецПопытки;
	
	Если Результат Тогда
	
		РезультатПечатиЧека.НомерЧека  = ВыходныеПараметры.НомерЧека;
		РезультатПечатиЧека.НомерСмены = ВыходныеПараметры.НомерСмены;
		РезультатПечатиЧека.Успешно = Истина;
		РезультатПечатиЧека.ФискальныйПризнак = ВыходныеПараметры.ФискальныйПризнак;
		
		Если НЕ ПараметрыЧека.ЭтоЧекКоррекции Тогда
			РезультатПечатиЧека.ПодписьЧекаЕГАИС = ПараметрыФискализацииЧека.ПодписьЧека;
			РезультатПечатиЧека.АдресЧекаЕГАИС   = ПараметрыФискализацииЧека.АдресЧека;
		КонецЕсли;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека", "Успешно № - " + ВыходныеПараметры.НомерЧека);
		
	Иначе
		РезультатПечатиЧека.ОписаниеОшибки = ВыходныеПараметры.ТекстОшибки;
		РезультатПечатиЧека.Успешно = Ложь;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека", "Ошибка - " + ВыходныеПараметры.ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспечататьПречек(Параметры, Форма) Экспорт
	
	ПараметрыЧека = Параметры.ОбщиеПараметры;
	
	ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ПредзаполнитьПостоянныеПараметрыЧека(ПараметрыФискализацииЧека);
	
	ЗаполнитьЗначенияСвойств(ПараметрыФискализацииЧека, ПараметрыЧека);
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(
		ПараметрыФискализацииЧека,
		ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати()
	);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыЧека", ПараметрыЧека);
	
	ОписаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыПречек", ЭтотОбъект);
	ОткрытьФорму("Обработка.КассовыеОперации.Форма.Пречек", ПараметрыФормы, Форма,,,, ОписаниеПриЗакрытии);
	
КонецПроцедуры

Функция ВыполнитьВнесениеВыемку(ЭтоВнесение, Сумма, ТекстОшибки) Экспорт
	
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	
	ВходныеПараметры = Новый Структура("Внесение, Сумма", ЭтоВнесение, Сумма);
	ПродажиКлиент.ДобавитьПостоянныеПараметрыЧека(ВходныеПараметры);
	
	ВыходныеПараметры = Неопределено;
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие(?(ЭтоВнесение, "Внесение", "Выемка"));
	
	Если НЕ МенеджерОборудованияКлиент.ВыполнитьВнесениеВыемку(
		ПодключаемоеОборудованиеКлиент.ИдентификаторКлиентаОборудования(),
		ОборудованиеПечати, ВходныеПараметры, ВыходныеПараметры) Тогда
		
		ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
		Успешно = Ложь;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие(?(ЭтоВнесение, "Внесение", "Выемка"), "Ошибка - " + ТекстОшибки);
	Иначе
		
		Успешно = Истина;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Процедура ДобавитьПостоянныеПараметрыЧека(Параметры) Экспорт
	
	ПараметрыЧека = ПродажиВызовСервераПовтИсп.ПараметрыЧека();
	
	Параметры.Вставить("ОрганизацияНазвание");
	Параметры.Вставить("ОрганизацияИНН");
	Параметры.Вставить("ОрганизацияКПП");
	Параметры.Вставить("Кассир");
	Параметры.Вставить("ИмяКассира");
	Параметры.Вставить("НомерКассы");
	Параметры.Вставить("ТекстШапки");
	Параметры.Вставить("ТекстПодвала");
	Параметры.Вставить("КассирДолжность");
	Параметры.Вставить("КассирФИО");
	Параметры.Вставить("КассирИНН");
	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЧека);
	
КонецПроцедуры

Процедура ПредзаполнитьПостоянныеПараметрыЧека(Параметры) Экспорт
	
	ПараметрыЧека = ПродажиВызовСервераПовтИсп.ПараметрыЧека();
	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЧека);
	
КонецПроцедуры

Процедура ЗаполнитьПризнаки(ПараметрыФискализацииЧека, ПараметрыЧека)
	
	ПризнакСпособаРасчета = ПараметрыЧека.ПризнакСпособаРасчета;
	ЭтоРасчетнаяСтавкаНДС = Ложь;
	
	ПризнакПредметаРасчета = Неопределено;
	Если ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")
		ИЛИ ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")
		Тогда
		
		ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата");
		ЭтоРасчетнаяСтавкаНДС = Истина;
		
	ИначеЕсли ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита") Тогда
		
		ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата");
		
	КонецЕсли;
	
	Для Каждого Позиция ИЗ ПараметрыФискализацииЧека.ПозицииЧека Цикл
		
		Если НЕ Позиция.Свойство("ФискальнаяСтрока") Тогда
			Продолжить;
		КонецЕсли;
		
		Позиция.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		
		Если НЕ ПризнакПредметаРасчета = Неопределено Тогда
			
			Позиция.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
		КонецЕсли;
		
		Если ЭтоРасчетнаяСтавкаНДС Тогда
			
			Позиция.СтавкаНДС = ПолучитьРасчетнуюСтавкуНДС(Позиция.СтавкаНДС);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьНоменклатуруПоШтрихкоду(Штрихкод, ДополнительныеПараметры, ВводитьАкцизныеМарки = Ложь) Экспорт
	
	Результат = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(Штрихкод);
	
	ДанныеМаркировки = Неопределено;
	
	Если Результат.Разобран Тогда
		Штрихкод = Результат.EAN;
		ДанныеМаркировки = Результат;
	КонецЕсли;
	
	МассивНоменклатуры = ОбработкаТабличнойЧастиВызовСервера.НайтиПоШтрихкоду(Штрихкод);
	
	ДополнительныеПараметры.Вставить("Штрихкод", Штрихкод);
	ДополнительныеПараметры.Вставить("ВводитьАкцизныеМарки", ВводитьАкцизныеМарки);
	
	Если МассивНоменклатуры.Количество() = 0 Тогда
		
		ДополнительныеПараметры.Вставить("ВременноеЗакрытиеДиалога", Истина);
		ЗакрытьСканированиеШтрихКодов(ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений;
		
		КнопкаПоУмолчанию = "Закрыть";
		
		Если НЕ ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов() Тогда
			Кнопки.Добавить("ПродолжитьСканирование", НСтр("ru = 'Продолжить сканирование'"));
			КнопкаПоУмолчанию = "ПродолжитьСканирование";
		КонецЕсли;
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() Тогда
			Кнопки.Добавить("ДобавитьВПрайсЛист", НСтр("ru = 'Добавить в прайс-лист'"));
			КнопкаПоУмолчанию = "ДобавитьВПрайсЛист";
		КонецЕсли;
		
		Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		
		Оповещение = Новый ОписаниеОповещения("ВопросТоварНеНайден", ПродажиКлиент, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Товар не найден'"), Кнопки,, КнопкаПоУмолчанию, Штрихкод);
		
	ИначеЕсли МассивНоменклатуры.Количество() = 1 Тогда
		
		ДанныеНоменклатуры = МассивНоменклатуры[0];
		ДополнительныеПараметры.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
		
		Если ВводитьАкцизныеМарки И ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки Тогда
			
			ВвестиМарку(ДанныеНоменклатуры, ДополнительныеПараметры);
			
		ИначеЕсли ВводитьАкцизныеМарки И ДанныеНоменклатуры.ЭтоМаркируемаяПродукция И ДанныеМаркировки = Неопределено Тогда
			
			ВвестиМарку(ДанныеНоменклатуры, ДополнительныеПараметры);
			
		Иначе
			
			Если НЕ ДанныеМаркировки = Неопределено Тогда
				
				Марка = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруМарки();
				
				Марка.ТипМаркировки = ДанныеНоменклатуры.ТипМаркировки;
				
				ЗаполнитьЗначенияСвойств(Марка, ДанныеМаркировки,
					"КодМаркировки, ГлобальныйИдентификаторТорговойЕдиницы, СерийныйНомер"
				);
				
				МассивНоменклатуры[0].Марки.Добавить(Марка);
				
			КонецЕсли;
			
			ДополнительныеПараметры.Форма.ОбработатьПолученнуюПоШтрихкодуНоменклатуру(МассивНоменклатуры[0],
				ДополнительныеПараметры);
				
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ВременноеЗакрытиеДиалога", Истина);
		ЗакрытьСканированиеШтрихКодов(ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура;
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
		
		МассивДляОтбора = Новый Массив;
		
		Для Каждого ДанныеНоменклатуры Из МассивНоменклатуры Цикл
			МассивДляОтбора.Добавить(ДанныеНоменклатуры.Номенклатура);
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", МассивДляОтбора);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("Штрихкод", Штрихкод);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПослеВыбораНоменклатуры", ПродажиКлиент,
			ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораПриСовпадении", ПараметрыФормы, 
			ДополнительныеПараметры.Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПометитьКВыгрузкеОтчетОПродажах(СсылкаНаОтчет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещатьОбИзменении = Ложь;
	
	ПродажиВызовСервера.ПометитьКВыгрузкеОтчетОПродажах(СсылкаНаОтчет, ОповещатьОбИзменении);
	
	Если ОповещатьОбИзменении Тогда
		Оповестить("ИзмененОтчетОПродажах");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРасчетнуюСтавкуНДС(СтавкаНДС)
	
	Если СтавкаНДС = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли СтавкаНДС = 0 Тогда
		Возврат 0;
		
	ИначеЕсли СтавкаНДС = 10 Тогда
		Возврат 110;
		
	ИначеЕсли СтавкаНДС = 18 Тогда
		Возврат 118;
		
	ИначеЕсли СтавкаНДС = 20 Тогда
		Возврат 120;
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьПодборТоваров(Форма, ОписаниеОповещения, ПараметрыФормыПодбора = Неопределено) Экспорт
	
	Если ПродажиВызовСервера.ПроверитьВозможностьВводаЧека() Тогда
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ПрайсЛистПуст() Тогда
			
			Если ЗначениеНастроекВызовСервераПовтИсп.ЭтоАвтономныйРежим() Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПодборТоваровСоздатьТовар",
					ЭтотОбъект, ДополнительныеПараметры);
				
				ТекстВопроса = НСтр("ru = 'Создать новую товарную позицию?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Прайс-лист пуст'"));
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru = 'Необходимо выполнить синхронизацию (Сервис - Загрузить данные)'");
				ПоказатьПредупреждение(, ТекстПредупреждения,,
					НСтр("ru = 'Прайс-лист пуст'"));
				
			КонецЕсли;
		Иначе
			
			ОткрытьФормуПодбораТоваров(Форма, ОписаниеОповещения, ПараметрыФормыПодбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВводаМарок() Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Номенклатура");
	ПараметрыФормы.Вставить("АдресМарокВХранилище");
	ПараметрыФормы.Вставить("МаксимальноеКоличество");
	ПараметрыФормы.Вставить("АдресМарокЧекаВХранилище");
	ПараметрыФормы.Вставить("КонтрольДублейМарок", Истина);
	ПараметрыФормы.Вставить("ТипМарки");
	
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ОткрытьВводМарок(Форма, ПараметрыВводаМарок, ОписаниеОповещения) Экспорт
	
	ОткрытьФорму("Обработка.ВводМарок.Форма", ПараметрыВводаМарок, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

#Область Касса

Процедура ОткрытьСмену(Форма, ОписаниеОповещение = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ОписаниеОповещение = Неопределено Тогда
		ОписаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыОткрытиеСмены", ЭтотОбъект);
	Иначе
		ОписаниеПриЗакрытии = ОписаниеОповещение;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КассовыеОперации.Форма.ОткрытиеСмены", ПараметрыФормы, Форма,,,, ОписаниеПриЗакрытии);
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыОткрытиеСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыПречек(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗакрытьСмену(Форма) Экспорт
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытьСменуПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru = 'Закрыть кассовую смену?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, " ");
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыЗакрытияСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ОтчетБезГашения(Форма) Экспорт
	
	
	ПараметрыФормы = Новый Структура;
	ОписаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыОтчетБезГашения", ЭтотОбъект);
	ОткрытьФорму("Обработка.КассовыеОперации.Форма.ОтчетБезГашения", ПараметрыФормы, Форма,,,, ОписаниеПриЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказКлиента

Процедура СоздатьЗаказКлиента(МассивНоменклатуры, ДополнительныеПараметры, Сканирование = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеПослеСканирования", Сканирование);
	ПараметрыФормы.Вставить("МассивНоменклатуры", МассивНоменклатуры);
	
	ФормаДокумента = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента",
		ПараметрыФормы, ДополнительныеПараметры.Форма
	);
	
	ФормаДокумента.Открыть();
	
	ДополнительныеПараметры.Форма = ФормаДокумента;
	
КонецПроцедуры

#КонецОбласти

#Область Чек

Процедура СоздатьЧек(МассивНоменклатуры, ДополнительныеПараметры, Сканирование = Ложь) Экспорт
	
	ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
	
	ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Сканирование;
	ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = МассивНоменклатуры;
	
	ФормаЧека = ПолучитьФорму("Документ.Чек.Форма.ФормаДокумента", ПараметрыЧека, ДополнительныеПараметры.Форма);
	ФормаЧека.Открыть();
	
	ДополнительныеПараметры.Форма = ФормаЧека;
	
КонецПроцедуры

Функция ОткрытьФормуЧека(Ссылка, ФормаВладелец, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	Если ОповещениеПриЗавершении = Неопределено Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОткрытьФормуЧекаЗавершение", ЭтотОбъект);
	КонецЕсли;
	
	ОткрытьФорму("Документ.Чек.Форма.ФормаДокумента",
		Новый Структура("Ключ", Ссылка),
		ФормаВладелец,
		,,,
		ОповещениеПриЗавершении
	);
	
КонецФункции

Процедура ОткрытьФормуЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьПараметрыКонструктораЧека() Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ЗаказКлиента");
	Основание.Вставить("ЧекПродажи");
	Основание.Вставить("ЧекОснование");
	Основание.Вставить("ЗаполнитьТоварыПоЧекуОснованию", Ложь);
	Основание.Вставить("ЗаполнитьОплатыПоЧекуОснованию", Ложь);
	
	Основание.Вставить("ЭтоВозврат", Ложь);
	Основание.Вставить("ЦенаВключаетНДС", Неопределено);
	Основание.Вставить("ПризнакСпособаРасчета");
	Основание.Вставить("ЭтоПолныйВозврат", Ложь);
	Основание.Вставить("ЭтоЧекКоррекции", Ложь);
	Основание.Вставить("НеприменениеККТ", Ложь);
	Основание.Вставить("ТипКоррекции");
	
	Основание.Вставить("ДатаКоррекции");
	Основание.Вставить("ОписаниеКоррекции", "");
	Основание.Вставить("ФискальныйПризнак", "");
	Основание.Вставить("НомерПредписания", "");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеИзПодбора", Ложь);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", "");
	ПараметрыФормы.Вставить("СозданиеПослеСканирования", Ложь);
	ПараметрыФормы.Вставить("МассивНоменклатуры");
	ПараметрыФормы.Вставить("ВозвратТоваров", Ложь);
	ПараметрыФормы.Вставить("ЧекПродажи");
	ПараметрыФормы.Вставить("ЦенаВключаетНДС");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ФормаВладелец");
	Параметры.Вставить("Основание", Основание);
	Параметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	Параметры.Вставить("ОповещениеПриЗавершении");
	
	Возврат Параметры;
	
КонецФункции

Процедура НачатьФормированиеЧека(ПараметрыКонструктора) Экспорт
	
	Если ПараметрыКонструктора.ОповещениеПриЗавершении = Неопределено Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФормированиеЧекаЗавершение", ЭтотОбъект);
	Иначе
		ОповещениеПриЗавершении = ПараметрыКонструктора.ОповещениеПриЗавершении;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Основание", ПараметрыКонструктора.Основание);
	Параметры.Вставить("ПараметрыФормы", ПараметрыКонструктора.ПараметрыФормы);
	
	ОткрытьФорму("Документ.Чек.Форма.ФормаДокумента",
		Параметры,
		ПараметрыКонструктора.ФормаВладелец,
		,,,
		ОповещениеПриЗавершении
	);
	
КонецПроцедуры

Процедура СформироватьЧекПрограммно(ПараметрыКонструктора, УникальныйИдентификатор, СсылкаНаЧекСторно, РезультатПечати) Экспорт
	
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	
	ДанныеДляФискализацииЧекаСторно = ПродажиВызовСервера.ПолучитьДанныеДляФискализацииЧекаСторно(
		ПараметрыКонструктора, СсылкаНаЧекСторно
	);
	
	ДанныеДляФискализацииЧекаСторно.Вставить("ОборудованиеПечати", ОборудованиеПечати);
	ДанныеДляФискализацииЧекаСторно.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ПечатьЧекаПродажи(ДанныеДляФискализацииЧекаСторно, РезультатПечати);
	
КонецПроцедуры

Процедура ФормированиеЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ЧекВозврата

Процедура НачатьФормированиеЧекаВозвратаТоваров(Форма, Основание, ОповещениеПриЗавершении) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЧекПродажи   = ПродажиВызовСервера.ПолучитьЧекПередачиТоваровПоЗаказу(Основание);
		ЗаказКлиента = Основание;
	Иначе
		ЧекПродажи   = Основание;
		ЗаказКлиента = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ЧекПродажи, "ЗаказКлиента");
	КонецЕсли;
	
	ВозможностьВводаЧека = ПродажиВызовСервера.ПроверитьВозможностиВводаЧекаВозвратаТоваров(ЧекПродажи);
	
	Если ВозможностьВводаЧека.НетТоваровКВозврату Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = НСтр("ru = 'Нет товаров к возврату'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ВозможностьВводаЧека.ОдинТоварКВозврату Тогда
		
		СформироватьПолныйВозвратТоваров(ЧекПродажи, ЗаказКлиента, ОповещениеПриЗавершении, Форма);
		
	Иначе
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПолныйВозврат",    НСтр("ru = 'Полный возврат'"));
		Кнопки.Добавить("ЧастичныйВозврат", НСтр("ru = 'Частичный возврат'"));
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ОтображатьКомандуСканированияШтрихкодаТоваров() Тогда
			Кнопки.Добавить("СканированиеШтрихкода", НСтр("ru = 'Сканирование штрихкода'"));
		КонецЕсли;
		
		Кнопки.Добавить("Отмена", "Отмена");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЧекПродажи", ЧекПродажи);
		ДополнительныеПараметры.Вставить("ЗаказКлиента", ЗаказКлиента);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		Оповещение = Новый ОписаниеОповещения("ВозвратЧекаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Возврат товаров'"), Кнопки,, "ПолныйВозврат", " ");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПолныйВозвратТоваров(ЧекПродажи, ЗаказКлиента, ОповещениеПриЗавершении, Форма)
	
	ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
	ПараметрыЧека.ФормаВладелец = Форма;
	
	ПараметрыЧека.Основание.ЧекПродажи       = ЧекПродажи;
	ПараметрыЧека.Основание.ЗаказКлиента     = ЗаказКлиента;
	ПараметрыЧека.Основание.ЭтоВозврат       = Истина;
	ПараметрыЧека.Основание.ЭтоПолныйВозврат = Истина;
	
	ПараметрыЧека.Основание.ПризнакСпособаРасчета =
		ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
	
	ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
	
КонецПроцедуры

Процедура ВозвратЧекаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ПолныйВозврат" Тогда
		
		СформироватьПолныйВозвратТоваров(
			ДополнительныеПараметры.ЧекПродажи,
			ДополнительныеПараметры.ЗаказКлиента,
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			ДополнительныеПараметры.Форма
		);
		
	ИначеЕсли Результат = "ЧастичныйВозврат" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Режим", "ПодборВВозврат");
		ПараметрыФормы.Вставить("ЧекПродажи", ДополнительныеПараметры.ЧекПродажи);
		ПараметрыФормы.Вставить("ЧекВозврата", Неопределено);
		ПараметрыФормы.Вставить("КонтрольДублейМарок", Ложь);
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеПодборВВозврат", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПодборТоваров.Форма.ФормаПодбора",
			ПараметрыФормы,
			ДополнительныеПараметры.Форма,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	ИначеЕсли Результат = "СканированиеШтрихкода" Тогда
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяАсинхронныйСканерШтрихкодов() Тогда
			
			ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
			ПараметрыЧека.ФормаВладелец = ДополнительныеПараметры.Форма;
			
			ПараметрыЧека.Основание.ЧекПродажи = ДополнительныеПараметры.ЧекПродажи;
			ПараметрыЧека.Основание.ЗаказКлиента = ДополнительныеПараметры.ЗаказКлиента;
			ПараметрыЧека.Основание.ЭтоВозврат = Истина;
			
			ПараметрыЧека.ПараметрыФормы.МассивНоменклатуры = Новый Массив;
			ПараметрыЧека.ПараметрыФормы.СозданиеПослеСканирования = Истина;
			
			ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
			
		Иначе
			ИдетПроцессСканирования = Истина;
			
			Параметры = Новый Структура;
			Параметры.Вставить("Форма", ДополнительныеПараметры.Форма);
			Параметры.Вставить("ПотоковоеСканирование");
			Параметры.Вставить("ВозвратТоваров", Истина);
			Параметры.Вставить("ПризнакСпособаРасчета",
				ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")
			);
			Параметры.Вставить("ИмяОбработчикаЗакрытияСканирования", "ОбработкаЗакрытияСканирования");
			Параметры.Вставить("КонтрольДублейМарок", Ложь);
			
			ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеПодборВВозврат(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ПараметрыЧека = ПродажиКлиент.ПолучитьПараметрыКонструктораЧека();
		
		ПараметрыЧека.ФормаВладелец = ДополнительныеПараметры.Форма;
		ПараметрыЧека.Основание.ЧекПродажи = ДополнительныеПараметры.ЧекПродажи;
		ПараметрыЧека.Основание.ЗаказКлиента = ДополнительныеПараметры.ЗаказКлиента;
		ПараметрыЧека.Основание.ЭтоВозврат = Истина;
		ПараметрыЧека.ПараметрыФормы.СозданиеИзПодбора = Истина;
		ПараметрыЧека.ПараметрыФормы.АдресВоВременномХранилище = Результат.АдресВоВременномХранилище;
		
		ПродажиКлиент.НачатьФормированиеЧека(ПараметрыЧека);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежнаяСистема

// Платежная система

// оплата
Функция ПараметрыОплатыПоПлатежнойСистеме() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Сумма"              , 0);
	Параметры.Вставить("НомерЧека"          , "");
	Параметры.Вставить("НомерКарты"         , "");
	Параметры.Вставить("НомерСсылкиОперации", "");
	Параметры.Вставить("КодАвторизации"     , "");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("Оборудование");
	
	Возврат Параметры;
КонецФункции

Функция РезультатОплатыПоПлатежнойСистеме() Экспорт
	
	РезультатОплаты = Новый Структура;
	
	РезультатОплаты.Вставить("ВидОперации"        , ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.Оплата"));
	РезультатОплаты.Вставить("Успешно"            , Ложь);
	РезультатОплаты.Вставить("ТекстОшибки"        , "");
	РезультатОплаты.Вставить("НомерКарты"         , "");
	РезультатОплаты.Вставить("НомерСсылкиОперации", "");
	РезультатОплаты.Вставить("КодАвторизации"     , "");
	РезультатОплаты.Вставить("СлипЧек", "");
	РезультатОплаты.Вставить("ДатаОперации");
	
	Возврат РезультатОплаты;
	
КонецФункции

Функция ОплатитьПоПлатежнойСистеме(ПараметрыОплаты) Экспорт
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"               , ПараметрыОплаты.Сумма);
	ВходныеПараметры.Вставить("НомерЧека"           , Строка(ПараметрыОплаты.НомерЧека));
	ВходныеПараметры.Вставить("НомерКарты"          , Строка(ПараметрыОплаты.НомерКарты));
	ВходныеПараметры.Вставить("НомерСсылкиОперации" , Строка(ПараметрыОплаты.НомерСсылкиОперации));
	ВходныеПараметры.Вставить("КодАвторизации"      , Строка(ПараметрыОплаты.КодАвторизации));
	
	РезультатОплаты = РезультатОплатыПоПлатежнойСистеме();
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие("ОплатитьПоПлатежнойСистеме");
	
	Если МенеджерОборудованияКлиент.ВыполнитьОплатуПоПлатежнойСистеме(
			ПараметрыОплаты.УникальныйИдентификатор,
			ПараметрыОплаты.Оборудование,
			ВходныеПараметры,
			ВыходныеПараметры) Тогда
			
		РезультатОплаты.Успешно = Истина;
		
		РезультатОплаты.НомерКарты          = ?(ВыходныеПараметры.НомерКарты = Неопределено, "", ВыходныеПараметры.НомерКарты);
		РезультатОплаты.НомерСсылкиОперации = ?(ВыходныеПараметры.НомерСсылкиОперации = Неопределено, "", ВыходныеПараметры.НомерСсылкиОперации);
		РезультатОплаты.КодАвторизации      = ?(ВыходныеПараметры.КодАвторизации = Неопределено, "", ВыходныеПараметры.КодАвторизации);
		РезультатОплаты.СлипЧек             = ?(ВыходныеПараметры.СлипЧек = Неопределено, "", ВыходныеПараметры.СлипЧек);
		РезультатОплаты.ДатаОперации        = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
	Иначе
		
		РезультатОплаты.Успешно = Ложь;
		РезультатОплаты.ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ОплатитьПоПлатежнойСистеме", "Ошибка - " + ВыходныеПараметры.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат РезультатОплаты;
	
КонецФункции

// отмена оплаты

Функция ПараметрыОтменыОплатыПоПлатежнойСистеме() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Сумма"              , 0);
	Параметры.Вставить("НомерЧека"          , "");
	Параметры.Вставить("НомерКарты"         , "");
	Параметры.Вставить("НомерСсылкиОперации", "");
	Параметры.Вставить("КодАвторизации"     , "");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("Оборудование");
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатОтменыОплатыПоПлатежнойСистеме() Экспорт
	
	РезультатОплаты = Новый Структура;
	
	РезультатОплаты.Вставить("ВидОперации"        , ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.ОтменаОплаты"));
	РезультатОплаты.Вставить("Успешно"            , Ложь);
	РезультатОплаты.Вставить("ТекстОшибки"        , "");
	РезультатОплаты.Вставить("НомерКарты"         , "");
	РезультатОплаты.Вставить("НомерСсылкиОперации", "");
	РезультатОплаты.Вставить("КодАвторизации"     , "");
	РезультатОплаты.Вставить("СлипЧек", "");
	РезультатОплаты.Вставить("ДатаОперации");
	
	Возврат РезультатОплаты;
	
КонецФункции

Функция ОтменитьОплатуПоПлатежнойСистеме(ПараметрыОтменыОплаты) Экспорт
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ПараметрыОтменыОплаты.Сумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ПараметрыОтменыОплаты.НомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ПараметрыОтменыОплаты.НомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ПараметрыОтменыОплаты.НомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ПараметрыОтменыОплаты.КодАвторизации);
	
	РезультатОтменыОплаты = РезультатОтменыОплатыПоПлатежнойСистеме();
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие("ВыполнитьОтменуПлатежаПоПлатежнойСистеме");
	
	Если МенеджерОборудованияКлиент.ВыполнитьОтменуПлатежаПоПлатежнойСистеме(
			ПараметрыОтменыОплаты.УникальныйИдентификатор,
			ПараметрыОтменыОплаты.Оборудование,
			ВходныеПараметры,
			ВыходныеПараметры) Тогда
			
		РезультатОтменыОплаты.Успешно = Истина;
		
		РезультатОтменыОплаты.НомерКарты          = ?(ВыходныеПараметры.НомерКарты = Неопределено, "", ВыходныеПараметры.НомерКарты);
		РезультатОтменыОплаты.НомерСсылкиОперации = ВходныеПараметры.НомерСсылкиОперации;
		РезультатОтменыОплаты.КодАвторизации      = ВходныеПараметры.КодАвторизации;
		РезультатОтменыОплаты.СлипЧек             = ?(ВыходныеПараметры.СлипЧек = Неопределено, "", ВыходныеПараметры.СлипЧек);
		РезультатОтменыОплаты.ДатаОперации        = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
		
	Иначе
		
		РезультатОтменыОплаты.Успешно = Ложь;
		РезультатОтменыОплаты.ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ВыполнитьОтменуПлатежаПоПлатежнойСистеме", "Ошибка - " + ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
	Возврат РезультатОтменыОплаты;
	
КонецФункции

// возврат оплаты

Функция ПараметрыВозвратаОплатыПоПлатежнойСистеме() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Сумма"              , 0);
	Параметры.Вставить("НомерЧека"          , "");
	Параметры.Вставить("НомерКарты"         , "");
	Параметры.Вставить("НомерСсылкиОперации", "");
	Параметры.Вставить("КодАвторизации"     , "");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("Оборудование");
	
	Возврат Параметры;
КонецФункции

Функция РезультатВозвратаОплатыПоПлатежнойСистеме() Экспорт
	
	РезультатОплаты = Новый Структура;
	
	РезультатОплаты.Вставить("ВидОперации"        , ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежнойСистемы.ВозвратОплаты"));
	РезультатОплаты.Вставить("Успешно"            , Ложь);
	РезультатОплаты.Вставить("ТекстОшибки"        , "");
	РезультатОплаты.Вставить("НомерКарты"         , "");
	РезультатОплаты.Вставить("НомерСсылкиОперации", "");
	РезультатОплаты.Вставить("КодАвторизации"     , "");
	РезультатОплаты.Вставить("СлипЧек"            , "");
	РезультатОплаты.Вставить("ДатаОперации");
	
	Возврат РезультатОплаты;
	
КонецФункции

Функция ВозвратитьОплатуПоПлатежнойСистеме(ПараметрыВозвратаОплаты) Экспорт
	
	ВыходныеПараметры = Неопределено;
	ВходныеПараметры = Новый Структура();
	ВходныеПараметры.Вставить("Сумма"              , ПараметрыВозвратаОплаты.Сумма);
	ВходныеПараметры.Вставить("НомерЧека"          , ПараметрыВозвратаОплаты.НомерЧека);
	ВходныеПараметры.Вставить("НомерКарты"         , ПараметрыВозвратаОплаты.НомерКарты);
	ВходныеПараметры.Вставить("НомерСсылкиОперации", ПараметрыВозвратаОплаты.НомерСсылкиОперации);
	ВходныеПараметры.Вставить("КодАвторизации"     , ПараметрыВозвратаОплаты.КодАвторизации);
	
	РезультатВозвратаОплаты = РезультатВозвратаОплатыПоПлатежнойСистеме();
	
	ЛогированиеКлиентСервер.ЗаписатьСобытие("ВыполнитьВозвратПлатежаПоПлатежнойСистеме");
	
	Если МенеджерОборудованияКлиент.ВыполнитьВозвратПлатежаПоПлатежнойСистеме(
			ПараметрыВозвратаОплаты.УникальныйИдентификатор,
			ПараметрыВозвратаОплаты.Оборудование,
			ВходныеПараметры,
			ВыходныеПараметры) Тогда
			
		РезультатВозвратаОплаты.Успешно = Истина;
		
		РезультатВозвратаОплаты.НомерКарты          = ?(ВыходныеПараметры.НомерКарты = Неопределено, "", ВыходныеПараметры.НомерКарты);
		РезультатВозвратаОплаты.НомерСсылкиОперации = ?(ВыходныеПараметры.НомерСсылкиОперации = Неопределено, "", ВыходныеПараметры.НомерСсылкиОперации);
		РезультатВозвратаОплаты.КодАвторизации      = ?(ВыходныеПараметры.КодАвторизации = Неопределено, "", ВыходныеПараметры.КодАвторизации);
		РезультатВозвратаОплаты.СлипЧек             = ?(ВыходныеПараметры.СлипЧек = Неопределено, "", ВыходныеПараметры.СлипЧек);
		РезультатВозвратаОплаты.ДатаОперации        = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
	Иначе
		
		РезультатВозвратаОплаты.Успешно = Ложь;
		РезультатВозвратаОплаты.ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
		
		ЛогированиеКлиентСервер.ЗаписатьСобытие("ВыполнитьВозвратПлатежаПоПлатежнойСистеме", "Ошибка - " + ВыходныеПараметры.ТекстОшибки);
	КонецЕсли;
	
	Возврат РезультатВозвратаОплаты;
	
КонецФункции


// сверка итогов

Функция ПараметрыСверкиПоПлатежнойСистеме() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("Оборудование");
	Параметры.Вставить("ИмяПроцедурыОповещения");
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатСверкиПоПлатежнойСистеме()
	
	РезультатСверки = Новый Структура;
	
	РезультатСверки.Вставить("Успешно", Ложь);
	РезультатСверки.Вставить("СлипЧек",   "");
	РезультатСверки.Вставить("ТекстОшибки",   "");
	
	Возврат РезультатСверки;
	
КонецФункции

Функция СверитьИтогиПоПлатежнойСистеме(ПараметрыСверки) Экспорт
	
	РезультатСверки = РезультатСверкиПоПлатежнойСистеме();
	
	ВыходныеПараметры = Неопределено;
	
	Если МенеджерОборудованияКлиент.ВыполнитьСверкуИтоговПоПлатежнойСистеме(
		ПараметрыСверки.УникальныйИдентификатор,
		ПараметрыСверки.Оборудование,
		ВыходныеПараметры) Тогда
		
		РезультатСверки.Успешно = Истина;
		РезультатСверки.СлипЧек = ВыходныеПараметры.СлипЧек;
	Иначе
		
		РезультатСверки.Успешно = Ложь;
		РезультатСверки.ТекстОшибки = ВыходныеПараметры.ТекстОшибки;
	КонецЕсли;
	
	Возврат РезультатСверки;
	
КонецФункции

Процедура СверитьИОтобразитьИтогиПоПлатежнойСистеме(Форма) Экспорт
	
	ПараметрыСверки = ПродажиКлиент.ПараметрыСверкиПоПлатежнойСистеме();
	ПараметрыСверки.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	ПараметрыСверки.Оборудование = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПлатежнойСистемы();
	
	РезультатСверки = ПродажиКлиент.СверитьИтогиПоПлатежнойСистеме(ПараметрыСверки);
	
	Если РезультатСверки.Успешно Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстСлипЧека", РезультатСверки.СлипЧек);
		ПараметрыФормы.Вставить("ДатаОперации", ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату());
		
		ОткрытьФорму("ОбщаяФорма.СлипЧекПлатежнойСистемы", ПараметрыФормы, Форма);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатСверки.ТекстОшибки);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ЗаполнитьПараметрыФискализацииЧека(ПараметрыЧека, ОборудованиеПечати)
	
	Если ПараметрыЧека.ЭтоЧекКоррекции Тогда
		
		ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
		
		ПараметрыФискализацииЧека.ДополнительныйРеквизит = ПараметрыЧека.ОснованиеФискальныйПризнак;
		ПараметрыФискализацииЧека.ДанныеКоррекции.ТипКоррекции      = ПараметрыЧека.ТипКоррекции;
		ПараметрыФискализацииЧека.ДанныеКоррекции.ОписаниеКоррекции = ПараметрыЧека.ОписаниеКоррекции;
		ПараметрыФискализацииЧека.ДанныеКоррекции.ДатаКоррекции     = ПараметрыЧека.ДатаКоррекции;
		ПараметрыФискализацииЧека.ДанныеКоррекции.НомерПредписания  = ПараметрыЧека.НомерПредписания;
		ПараметрыФискализацииЧека.НеприменениеККТ                   = ПараметрыЧека.НеприменениеККТ;
		
	Иначе
		ПараметрыФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	КонецЕсли;
	
	ПредзаполнитьПостоянныеПараметрыЧека(ПараметрыФискализацииЧека);
	
	ЗаполнитьЗначенияСвойств(ПараметрыФискализацииЧека, ПараметрыЧека);
	
	Если НЕ ПустаяСтрока(ПараметрыЧека.АдресРасчета) Тогда
		ПараметрыФискализацииЧека.АдресРасчетов = ПараметрыЧека.АдресРасчета;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыЧека.МестоРасчета) Тогда
		ПараметрыФискализацииЧека.МестоРасчетов = ПараметрыЧека.МестоРасчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФискализацииЧека.ПокупательНомер) Тогда
		
		Если СтрНайти(ПараметрыФискализацииЧека.ПокупательНомер, "+7") = 0 Тогда
			
			ПараметрыФискализацииЧека.ПокупательНомер = "+7" + ПараметрыФискализацииЧека.ПокупательНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПризнаки(ПараметрыФискализацииЧека, ПараметрыЧека);
	
	Если ПараметрыЧека.ТипЧека = ПродажиКлиентСерверПовтИсп.ТипЧека_Продажа() Тогда
		ПараметрыФискализацииЧека.ТипРасчета =
			ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	Иначе
		ПараметрыФискализацииЧека.ТипРасчета =
			ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	КонецЕсли;
	
	ПараметрыФискализацииЧека.Вставить("ПодписьЕГАИС");
	
	Если НЕ ПараметрыЧека.ПараметрыЧекаЕГАИС = Неопределено Тогда
		
		ПараметрыФискализацииЧека.ПодписьЕГАИС = ПараметрыЧека.ПараметрыЧекаЕГАИС.ПодписьЕГАИС;
	Иначе
		
		ПараметрыФискализацииЧека.ПодписьЕГАИС = Ложь;
	КонецЕсли;
	
	Если ПараметрыФискализацииЧека.ПодписьЕГАИС Тогда
		
		ПараметрыЧекаЕГАИС = ПараметрыЧека.ПараметрыЧекаЕГАИС;
		
		ПараметрыФискализацииЧека.ОрганизацияИНН       = ПараметрыЧекаЕГАИС.ИНН;
		ПараметрыФискализацииЧека.ОрганизацияКПП       = ПараметрыЧекаЕГАИС.КПП;
		ПараметрыФискализацииЧека.НаименованиеМагазина = ПараметрыЧекаЕГАИС.НаименованиеМагазина;
		ПараметрыФискализацииЧека.СерийныйНомер        = ПараметрыЧекаЕГАИС.ЗаводскойНомерККМ;
		ПараметрыФискализацииЧека.Вставить("ПараметрыЧекаЕГАИС", ПараметрыЧекаЕГАИС);
	КонецЕсли;
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(
		ПараметрыФискализацииЧека,
		ОборудованиеПечати
	);
	
	Возврат ПараметрыФискализацииЧека;
	
	//Попытка
	//	
	//	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыФискализацииЧека,
	//		Параметры.ОборудованиеПечати
	//	);
	//	
	//	Если ЗначениеЗаполнено(Параметры.ОборудованиеПечати) Тогда
	//		
	//		ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека");
	//		
	//		Если ПараметрыЧека.ЭтоЧекКоррекции Тогда
	//			
	//			Результат = МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаКоррекцииНаФискальномУстройстве(
	//				Параметры.УникальныйИдентификатор,
	//				Параметры.ОборудованиеПечати,
	//				ПараметрыФискализацииЧека,
	//				ВыходныеПараметры
	//			);
	//			
	//		Иначе
	//			Результат = МенеджерОборудованияКлиент.ВыполнитьФискализациюЧекаНаФискальномУстройстве(
	//				Параметры.УникальныйИдентификатор,
	//				Параметры.ОборудованиеПечати,
	//				ПараметрыФискализацииЧека,
	//				ВыходныеПараметры
	//			);
	//		КонецЕсли;
	//	Иначе
	//		Результат = Истина;
	//		
	//		ВыходныеПараметры = Новый Структура;
	//		ВыходныеПараметры.Вставить("НомерЧека",  ПараметрыФискализацииЧека.НомерЧека);
	//		ВыходныеПараметры.Вставить("НомерСмены", ПараметрыФискализацииЧека.НомерСмены);
	//		ВыходныеПараметры.Вставить("ФискальныйПризнак", "");
	//		
	//		ПараметрыФискализацииЧека.Вставить("ПодписьЧека");
	//		ПараметрыФискализацииЧека.Вставить("АдресЧека");
	//		
	//	КонецЕсли;
	//	
	//Исключение
	//	
	//	Описание = ОписаниеОшибки();
	//	
	//	РезультатПечатиЧека.ОписаниеОшибки = Описание;
	//	РезультатПечатиЧека.Успешно = Ложь;
	//	
	//	ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека", "Ошибка - " + Описание);
	//	
	//	Возврат;
	//КонецПопытки;
	//
	//Если Результат Тогда
	//
	//	РезультатПечатиЧека.НомерЧека  = ВыходныеПараметры.НомерЧека;
	//	РезультатПечатиЧека.НомерСмены = ВыходныеПараметры.НомерСмены;
	//	РезультатПечатиЧека.Успешно = Истина;
	//	РезультатПечатиЧека.ФискальныйПризнак = ВыходныеПараметры.ФискальныйПризнак;
	//	
	//	Если НЕ ПараметрыЧека.ЭтоЧекКоррекции Тогда
	//		РезультатПечатиЧека.ПодписьЧекаЕГАИС = ПараметрыФискализацииЧека.ПодписьЧека;
	//		РезультатПечатиЧека.АдресЧекаЕГАИС   = ПараметрыФискализацииЧека.АдресЧека;
	//	КонецЕсли;
	//	
	//	ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека", "Успешно № - " + ВыходныеПараметры.НомерЧека);
	//	
	//Иначе
	//	РезультатПечатиЧека.ОписаниеОшибки = ВыходныеПараметры.ТекстОшибки;
	//	РезультатПечатиЧека.Успешно = Ложь;
	//	
	//	ЛогированиеКлиентСервер.ЗаписатьСобытие("ФискализацияЧека", "Ошибка - " + ВыходныеПараметры.ТекстОшибки);
	//	
	//КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВвестиМарку(ДанныеНоменклатуры, ДополнительныеПараметры)
	
	ПараметрыВводаМарки = ПараметрыВводаМарок();
	
	ПараметрыВводаМарок = ПродажиКлиент.ПараметрыВводаМарок();
	ПараметрыВводаМарок.Номенклатура             = ДанныеНоменклатуры.Номенклатура;
	ПараметрыВводаМарок.АдресМарокЧекаВХранилище = ДополнительныеПараметры.Форма.АдресМарокЧекаВХранилище();
	
	Если ДополнительныеПараметры.Свойство("ВозвратТоваров") Тогда
		ДанныеТовараКВозврату = ПродажиВызовСервера.ПолучитьДанныеПоТоваруКВозврату(
		ДополнительныеПараметры.ЧекПродажи, Неопределено, ДанныеНоменклатуры.Номенклатура, Неопределено);
		
		ПараметрыВводаМарок.МаксимальноеКоличество = ДанныеТовараКВозврату.МаксимальноеКоличествоКВозврату;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольДублейМарок") Тогда
		ПараметрыВводаМарок.КонтрольДублейМарок = ДополнительныеПараметры.КонтрольДублейМарок;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ВременноеЗакрытиеДиалога", Истина);
	ЗакрытьСканированиеШтрихКодов(ДополнительныеПараметры);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВводМарокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьВводМарок(ДополнительныеПараметры.Форма, ПараметрыВводаМарок, ОбработчикОповещения);
	
КонецПроцедуры

Процедура ОповещениеПодборТоваровСоздатьТовар(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеСоздатьТовар", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",, ДополнительныеПараметры.Форма,,,, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеСоздатьТовар(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ОткрытьФормуПодбораТоваров(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПодбораТоваров(Форма, ОписаниеОповещения, ПараметрыФормыПодбора = Неопределено)
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма.ФормаПодбора", ПараметрыФормыПодбора, Форма,,,,ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВопросТоварНеНайден(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ПродолжитьСканирование" Тогда
		
		ДополнительныеПараметры.Вставить("ПотоковоеСканирование");
		ПодключаемоеОборудованиеКлиент.ПолучитьШтрихкод(ДополнительныеПараметры);
		
	ИначеЕсли Результат = "ДобавитьВПрайсЛист" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДобавлениеШтрихкодаВПрайсЛист");
		ПараметрыФормы.Вставить("Штрихкод", ДополнительныеПараметры.Штрихкод);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеДобавитьВПрайсЛист", ПродажиКлиент, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПанельМеню.Форма.ПрайсЛист", ПараметрыФормы, ДополнительныеПараметры.Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеДобавитьВПрайсЛист(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПередаваемыеДанныеНоменклатуры();
	
	ДанныеНоменклатуры.Номенклатура                    = Результат;
	ДанныеНоменклатуры.Штрихкод                        = ДополнительныеПараметры.Штрихкод;
	ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки = ПродажиВызовСервера.ОпределитьНеобходимостьВводаАкцизнойМарки(Результат);
	ДанныеНоменклатуры.ЭтоМаркируемаяПродукция         = ПродажиВызовСервера.ОпределитьНеобходимостьВводаМарки(Результат);
	
	ДополнительныеПараметры.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
	
	Если (ДополнительныеПараметры.ВводитьАкцизныеМарки И ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки)
		ИЛИ ДанныеНоменклатуры.ЭтоМаркируемаяПродукция Тогда
		
		ВвестиМарку(ДанныеНоменклатуры, ДополнительныеПараметры);
		
	Иначе
		
		ДополнительныеПараметры.Форма.ОбработатьПолученнуюПоШтрихкодуНоменклатуру(ДанныеНоменклатуры, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСменуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроизвестиВыемкуПередЗакрытиемСмены(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроизвестиВыемкуПередЗакрытиемСмены(ДополнительныеПараметры)
	
	ОстатокНаличныхВКассе = ПродажиВызовСервера.ПолучитьОстатокНаличныхВКассе();
	
	Если ОстатокНаличныхВКассе > 0 Тогда
		
		ТипВыемки = ПродажиВызовСервераПовтИсп.ТипВыемкиПриЗакрытииСмены();
		
		Если НЕ ЗначениеЗаполнено(ТипВыемки) Тогда // полная выемка
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидДвижения", "Изъятие");
			ПараметрыФормы.Вставить("ТипВыемки",   ТипВыемки);
			ПараметрыФормы.Вставить("ОстатокНаличныхВКассе", ОстатокНаличныхВКассе);
			
			ОповещениеПослеВыемки = Новый ОписаниеОповещения("ЗакрытьСменуПослеВыемкиНаличных", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Документ.ВнесениеИзъятиеНаличных.Форма.ФормаДокумента", ПараметрыФормы, ДополнительныеПараметры.Форма,,,,ОповещениеПослеВыемки);
			
		ИначеЕсли ТипВыемки = ПредопределенноеЗначение("Перечисление.ТипыВыемки.НеполнаяВыемка") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидДвижения",           "Изъятие");
			ПараметрыФормы.Вставить("ТипВыемки",             ТипВыемки);
			ПараметрыФормы.Вставить("ОстатокНаличныхВКассе", ОстатокНаличныхВКассе);
			
			ОповещениеПослеВыемки = Новый ОписаниеОповещения("ЗакрытьСменуПослеВыемкиНаличных", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Документ.ВнесениеИзъятиеНаличных.Форма.ФормаДокумента", ПараметрыФормы, ДополнительныеПараметры.Форма,,,,ОповещениеПослеВыемки);
			
		ИначеЕсли ТипВыемки = ПредопределенноеЗначение("Перечисление.ТипыВыемки.ВыемкуНеПроизводить") Тогда
			
			ЗакрытьСменуПослеВыемкиНаличных(Новый Структура("Успешно", Истина), ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе //нет наличных к выемке
		
		ЗакрытьСменуПослеВыемкиНаличных(Новый Структура("Успешно", Истина), ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСменуПослеВыемкиНаличных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Успешно") И НЕ Результат.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ОборудованиеПечати = ЗначениеНастроекВызовСервераПовтИсп.ОборудованиеПечати();
	
	ЕстьОшибки = Ложь;
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		
		ПараметрыФормы = Новый Структура;
		ОписаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыЗакрытияСмены", ЭтотОбъект);
		ОткрытьФорму("Обработка.КассовыеОперации.Форма.ЗакрытиеСмены", ПараметрыФормы, Форма,,,, ОписаниеПриЗакрытии);
		
	Иначе
		
		Если НЕ ЕстьОшибки Тогда
			ПродажиВызовСервера.ЗакрытьДокументКассоваяСмена();
			Оповестить("ИзмененаКассоваяСмена");
			Оповестить("ИзмененОтчетОПродажах");
		КонецЕсли;
		
		Если ЗначениеНастроекВызовСервераПовтИсп.ИспользуетсяПлатежнаяСистема() Тогда
			ПродажиКлиент.СверитьИОтобразитьИтогиПоПлатежнойСистеме(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗакрытияФормыОтчетБезГашения(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ОповещениеПослеВыбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатуры = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПередаваемыеДанныеНоменклатуры();
	ДанныеНоменклатуры.Номенклатура                    = Результат;
	ДанныеНоменклатуры.Штрихкод                        = ДополнительныеПараметры.Штрихкод;
	ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки = ПродажиВызовСервера.ОпределитьНеобходимостьВводаАкцизнойМарки(Результат);
	
	ДополнительныеПараметры.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
	
	Если ДополнительныеПараметры.ВводитьАкцизныеМарки И ДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки Тогда
		
		ВвестиМарку(ДанныеНоменклатуры, ДополнительныеПараметры);
		
	Иначе
		
		ДополнительныеПараметры.Форма.ОбработатьПолученнуюПоШтрихкодуНоменклатуру(ДанныеНоменклатуры, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСканированиеШтрихКодов(ДополнительныеПараметры)
	
	Если ЗначениеНастроекВызовСервераПовтИсп.СканированиеВстроеннойКамерой() Тогда
		
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМарокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("АдресВХранилище") Тогда
			
			ДополнительныеПараметры.ДанныеНоменклатуры.Марки = ПолучитьИзВременногоХранилища(Результат.АдресВХранилище);
			
			ДополнительныеПараметры.ДанныеНоменклатуры.Количество =
				ДополнительныеПараметры.ДанныеНоменклатуры.Марки.Количество();
				
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.ОбработатьПолученнуюПоШтрихкодуНоменклатуру(
		ДополнительныеПараметры.ДанныеНоменклатуры, ДополнительныеПараметры
	);
	
КонецПроцедуры

#КонецОбласти
