
#Область ПрограммныйИнтерфейс

#Область ПроведениеДокументов

// Процедура формирования движений по регистру "Денежные средства"
//
Процедура ОтразитьДвижениеНаличных(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ДенежныеСредства.Записывать = Истина;
	Движения.ДенежныеСредства.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с клиентами"
//
Процедура ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.РасчетыСКлиентами.Записывать = Истина;
	Движения.РасчетыСКлиентами.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

Процедура РасчитатьСтатусРасчетовПоЗаказу(Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Расчеты.СуммаОстаток, 0) КАК ДолгКлиента
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &Заказ) КАК Расчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКлиентами.ЗаказКлиента
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ЗаказКлиента = &Заказ
	|	И РасчетыСКлиентами.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
	
	ВыборкаОстаток = РезультатЗапросаПакет[0].Выбрать();
	
	ДолгКлиента = 0;
	Если ВыборкаОстаток.Следующий() Тогда
		ДолгКлиента = ВыборкаОстаток.ДолгКлиента;
	КонецЕсли;
	
	ВыборкаПередачаТоваров = РезультатЗапросаПакет[1].Выбрать();
	
	ЕстьПередачаТоваров = Ложь;
	Если ВыборкаПередачаТоваров.Следующий() Тогда
		ЕстьПередачаТоваров = Истина;
	КонецЕсли;
	
	Если ДолгКлиента = 0 И ЕстьПередачаТоваров Тогда
		
		ЗаказОбъект = Заказ.ПолучитьОбъект();
		ЗаказОбъект.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Выполнен;
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИнформациюПоКассовойСмене(Форма, УстановитьГиперссылку = Истина) Экспорт
	
	КассоваяСмена = ПродажиВызовСервераПовтИсп.ПолучитьСмену(Ложь);
	КассоваяСменаПросрочена = Ложь;
	
	Если Не ЗначениеЗаполнено(КассоваяСмена) Тогда
		
		СменаОткрыта = Ложь;
		
		ИнформацияОСмене = НСтр("ru = 'Смена открывается автоматически'");
		Форма.Элементы.ИнформацияОСмене.ЦветТекста = WebЦвета.Серый;
		Форма.Элементы.ИнформацияОСмене.Гиперссылка = Ложь;
		
	Иначе
		
		СменаОткрыта = Истина;
		
		ИнформацияОСменеТекст = НСтр("ru = 'Смена открыта %Просрочена%
			|%ДатаОткрытия%'");
		
		ИнформацияОСменеТекст = СтрЗаменить(ИнформацияОСменеТекст, "%ДатаОткрытия%", Формат(КассоваяСмена.НачалоКассовойСмены, "ДФ='HH:mm:ss dd.MM.yyyy '"));
		
		Если КассоваяСменаПросрочена(КассоваяСмена) Тогда
			
			ИнформацияОСмене = СтрЗаменить(ИнформацияОСменеТекст, "%Просрочена%", НСтр("ru = 'более 24 часов'"));
			
			Форма.Элементы.ИнформацияОСмене.ЦветТекста = ЗначениеНастроекКлиентСерверПовтИсп.ЦветПоляОшибка();
			Форма.Элементы.ИнформацияОСмене.Гиперссылка = УстановитьГиперссылку;
			КассоваяСменаПросрочена = Истина;
			
		Иначе
			
			ИнформацияОСмене = СтрЗаменить(ИнформацияОСменеТекст, "%Просрочена%", "");
			Форма.Элементы.ИнформацияОСмене.ЦветТекста = ЗначениеНастроекКлиентСерверПовтИсп.ЦветИнформационнойНадписи();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.КассоваяСмена 			= КассоваяСмена;
	Форма.ИнформацияОСмене 			= ИнформацияОСмене;
	Форма.КассоваяСменаПросрочена 	= КассоваяСменаПросрочена;
	Форма.КассоваяСменаОткрыта		= СменаОткрыта;
	
КонецПроцедуры

Функция КассоваяСменаПросрочена(КассоваяСмена) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату() - КассоваяСмена.НачалоКассовойСмены > 86400;
	
КонецФункции

// Процедура распределяет сумму ручной скидки по строкам табличной части документа.
// Параметры:
//		Объект - Документ, табличная часть которого обрабатывается.
//		ИмяТЧ - Строка - имя табличной части с товарами.
//		СуммаСкидкиКРаспределению - Число - сумма ручной скидки, которую нужно распределить.
//		
Процедура НазначитьСкидкуНаДокумент(Объект, ИмяТЧ, Знач СуммаСкидкиКРаспределению) Экспорт
	
	МаксимальнаяСуммаСкидки = 0;
	
	ЭтоНаценка = СуммаСкидкиКРаспределению > 0;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки + СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		
	КонецЦикла;
	
	Если СуммаСкидкиКРаспределению > МаксимальнаяСуммаСкидки И НЕ ЭтоНаценка Тогда
		СуммаСкидкиКРаспределению = МаксимальнаяСуммаСкидки;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
		
		Если МаксимальнаяСуммаСкидки <> 0 Тогда
			СтрокаТЧ.СкидкаНаценкаСумма = СуммаБезСкидки * (СуммаСкидкиКРаспределению / МаксимальнаяСуммаСкидки);
		Иначе
			СтрокаТЧ.СкидкаНаценкаСумма = 0;
		КонецЕсли;
		
		СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СтрокаТЧ.СкидкаНаценкаСумма;
		МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки - СуммаБезСкидки;
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТЧ.СкидкаНаценкаПроцент = 100 * СтрокаТЧ.СкидкаНаценкаСумма / СуммаБезСкидки;
		Иначе
			СтрокаТЧ.СкидкаНаценкаПроцент = 0;
		КонецЕсли;
		
		СуммаСкидки = СтрокаТЧ.СкидкаНаценкаСумма;
		
		Если ЭтоНаценка Тогда
			СтрокаТЧ.Сумма = СуммаБезСкидки + СуммаСкидки;
		Иначе
			СтрокаТЧ.Сумма = СуммаБезСкидки + ?(СуммаСкидки > СуммаБезСкидки, - СуммаБезСкидки, СуммаСкидки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыемкиДС(СуммаВыемки, Отказ, Сообщение) Экспорт
	
	Остаток = ПродажиВызовСервера.ПолучитьОстатокНаличныхВКассе();
	
	Если СуммаВыемки > Остаток Тогда
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Недостаточно наличных в кассе. Остаток = %Остаток%'");
		Сообщение = СтрЗаменить(Сообщение, "%Остаток%", Остаток);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтчетПоКассе(КассоваяСмена) Экспорт
	
	Отчет = Новый Структура;
	РеквизитыОтчета = "Наличные, Внесение, Выплата, Продажа, ПродажаНаличными, ПродажаПлатежнойКартой, Возврат, ВозвратНаличными, ВозвратПлатежнойКартой, Выручка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК Наличные
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(, ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные)) КАК ДенежныеСредстваОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОбороты.СуммаОборот КАК Внесение
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные)
	|				И КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Внесение)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-ДенежныеСредстваОбороты.СуммаОборот КАК Выплата
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные)
	|				И КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Изъятие)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОбороты.СуммаОборот КАК Продажа
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Продажа)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОбороты.СуммаОборот КАК ПродажаНаличными
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные)
	|				И КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Продажа)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОбороты.СуммаОборот КАК ПродажаПлатежнойКартой
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта)
	|				И КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Продажа)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-ДенежныеСредстваОбороты.СуммаОборот КАК Возврат
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Возврат)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-ДенежныеСредстваОбороты.СуммаОборот КАК ВозвратНаличными
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные)
	|				И КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Возврат)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-ДенежныеСредстваОбороты.СуммаОборот КАК ВозвратПлатежнойКартой
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			,
	|			,
	|			,
	|			ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта)
	|				И КассоваяСмена = &КассоваяСмена
	|				И ВидДвиженияДС = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Возврат)) КАК ДенежныеСредстваОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК Выручка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(, ВидДвиженияДС В (ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Продажа), ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Возврат))) КАК ДенежныеСредстваОстатки
	|ГДЕ
	|	ДенежныеСредстваОстатки.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Реквизиты = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыОтчета,,,Истина);
	
	// Индексы реквизитов массива должны совпадать(!) с индексами результатов пакета запроса.
	Индекс = 0;
	Для Каждого ИмяРеквизита Из Реквизиты Цикл
		
		Результат = РезультатЗапроса[Индекс];
		
		Если Результат.Пустой() Тогда
			Значение = 0;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Значение = Выборка[ИмяРеквизита];
		КонецЕсли;
		
		Отчет.Вставить(ИмяРеквизита, Значение);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Отчет;
	
КонецФункции

Функция ПолучитьТаблицуТоваровЧекаВозврата(ЧекПродажи,
	АдресТоваровВХранилище = Неопределено,
	ЧекВозврата = Неопределено,
	Номенклатура = Неопределено,
	АдресМарокВХранилище = Неопределено) Экспорт
	
	Если ЧекВозврата = Неопределено Тогда
		ЧекВозврата = Документы.Чек.ПустаяСсылка();
	КонецЕсли;
	
	ТоварыНезаписанногоДокумента = Новый ТаблицаЗначений;
	ТоварыНезаписанногоДокумента.Колонки.Добавить("Номенклатура",                    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТоварыНезаписанногоДокумента.Колонки.Добавить("Количество",                      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТоварыНезаписанногоДокумента.Колонки.Добавить("Цена",                            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТоварыНезаписанногоДокумента.Колонки.Добавить("НеобходимостьВводаАкцизнойМарки", Новый ОписаниеТипов("Булево"));
	ТоварыНезаписанногоДокумента.Колонки.Добавить("Штрихкод",                        Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	ТоварыНезаписанногоДокумента.Колонки.Добавить("ЦенаСУчетомСкидки",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Если НЕ АдресТоваровВХранилище = Неопределено И НЕ ПустаяСтрока(АдресТоваровВХранилище) Тогда
		
		Товары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
		
		Для Каждого СтрокаТовары Из Товары Цикл
			НоваяСтрока = ТоварыНезаписанногоДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	//0
	"ВЫБРАТЬ
	|	ТоварыНезаписанногоДокумента.Номенклатура,
	|	ТоварыНезаписанногоДокумента.НеобходимостьВводаАкцизнойМарки,
	|	ТоварыНезаписанногоДокумента.Количество,
	|	ТоварыНезаписанногоДокумента.Штрихкод,
	|	ТоварыНезаписанногоДокумента.Цена,
	|	ТоварыНезаписанногоДокумента.ЦенаСУчетомСкидки
	|ПОМЕСТИТЬ ТоварыНезаписанногоДокумента
	|ИЗ
	|	&ТоварыНезаписанногоДокумента КАК ТоварыНезаписанногоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//1
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НеобходимостьВводаАкцизнойМарки,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	Товары.ЦенаСУчетомСкидки,
	|	Товары.ЕстьСкидка,
	|	Товары.Штрихкод,
	|	СУММА(Товары.СкидкаНаценкаСумма) КАК СкидкаНаценкаСумма,
	|	Товары.КлючСвязи
	|ПОМЕСТИТЬ ТоварыПродажи
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекТовары.Номенклатура КАК Номенклатура,
	|		ЧекТовары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|		ЧекТовары.Количество КАК Количество,
	|		ЧекТовары.СкидкаНаценкаСумма КАК СкидкаНаценкаСумма,
	|		ЧекТовары.Штрихкод КАК Штрихкод,
	|		ЧекТовары.Цена КАК Цена,
	|		ЧекТовары.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ЧекТовары.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(ЧекТовары.Сумма / ЧекТовары.Количество КАК ЧИСЛО(15, 2))
	|		КОНЕЦ КАК ЦенаСУчетомСкидки,
	|		ВЫБОР
	|			КОГДА ЧекТовары.СкидкаНаценкаСумма = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ЕстьСкидка,
	|		ЧекТовары.КлючСвязи КАК КлючСвязи
	|	ИЗ
	|		Документ.Чек.Товары КАК ЧекТовары
	|	ГДЕ
	|		ЧекТовары.Ссылка = &ЧекПродажи) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НеобходимостьВводаАкцизнойМарки,
	|	Товары.ЕстьСкидка,
	|	Товары.Номенклатура,
	|	Товары.Штрихкод,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	Товары.ЦенаСУчетомСкидки,
	|	Товары.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//2
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.НеобходимостьВводаАкцизнойМарки,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.ЦенаСУчетомСкидки
	|ПОМЕСТИТЬ ТоварыВозврата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекТовары.Номенклатура КАК Номенклатура,
	|		ЧекТовары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|		ЧекТовары.Штрихкод КАК Штрихкод,
	|		СУММА(ЧекТовары.Количество) КАК Количество,
	|		ЧекТовары.Цена КАК Цена,
	|		ЧекТовары.ЦенаСУчетомСкидки КАК ЦенаСУчетомСкидки
	|	ИЗ
	|		Документ.Чек.Товары КАК ЧекТовары
	|	ГДЕ
	|		ЧекТовары.Ссылка.ЧекПродажи = &ЧекПродажи
	|		И НЕ ЧекТовары.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Аннулирован), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Отложен))
	|		И НЕ ЧекТовары.Ссылка = &ЧекВозврата
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекТовары.Номенклатура,
	|		ЧекТовары.НеобходимостьВводаАкцизнойМарки,
	|		ЧекТовары.Штрихкод,
	|		ЧекТовары.Цена,
	|		ЧекТовары.ЦенаСУчетомСкидки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНезаписанногоДокумента.Номенклатура,
	|		ТоварыНезаписанногоДокумента.НеобходимостьВводаАкцизнойМарки,
	|		ТоварыНезаписанногоДокумента.Штрихкод,
	|		ТоварыНезаписанногоДокумента.Количество,
	|		ТоварыНезаписанногоДокумента.Цена,
	|		ТоварыНезаписанногоДокумента.ЦенаСУчетомСкидки
	|	ИЗ
	|		ТоварыНезаписанногоДокумента КАК ТоварыНезаписанногоДокумента) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.НеобходимостьВводаАкцизнойМарки,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.ЦенаСУчетомСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//3
	|ВЫБРАТЬ
	|		ЧекАкцизныеМарки.КодМаркировки КАК КодАкцизнойМарки
	|ПОМЕСТИТЬ АкцизныеМаркиВозврата
	|	ИЗ
	|		Документ.Чек.Марки КАК ЧекАкцизныеМарки
	|	ГДЕ
	|		ЧекАкцизныеМарки.Ссылка.ЧекПродажи = &ЧекПродажи
	|		И НЕ ЧекАкцизныеМарки.Ссылка.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Аннулирован)
	|		И НЕ ЧекАкцизныеМарки.Ссылка = &ЧекВозврата
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//4
	|ВЫБРАТЬ
	|	ТоварыПродажи.Номенклатура,
	|	ТоварыПродажи.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|	ТоварыПродажи.КлючСвязи,
	|	ТоварыПродажи.Номенклатура КАК Ссылка,
	|	ТоварыПродажи.Номенклатура.Артикул КАК Артикул,
	|	ТоварыПродажи.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыПродажи.Номенклатура.Избранное КАК Избранное,
	|	ТоварыПродажи.Номенклатура.ТипМаркировки КАК ТипМаркировки,
	|	ТоварыПродажи.Номенклатура.Наименование КАК Наименование,
	|	ТоварыПродажи.Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ТоварыПродажи.Номенклатура.Родитель КАК Родитель,
	|	ТоварыПродажи.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ТоварыПродажи.Штрихкод КАК Штрихкод,
	|	ТоварыПродажи.Цена,
	|	ТоварыПродажи.СтавкаНДС,
	|	ТоварыПродажи.ЦенаСУчетомСкидки,
	|	ТоварыПродажи.ЕстьСкидка,
	|	ТоварыПродажи.Количество - ЕСТЬNULL(ТоварыВозврата.Количество, 0) КАК Количество,
	|	ТоварыПродажи.Количество КАК КоличествоПродажи,
	|	ЕСТЬNULL(ТоварыВозврата.Количество, 0) КАК КоличествоВозврата,
	|	ТоварыПродажи.СкидкаНаценкаСумма КАК СкидкаНаценкаСуммаПродажи,
	|	0 КАК СкидкаНаценкаСумма,
	|	0 КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Марки
	|ИЗ
	|	ТоварыПродажи КАК ТоварыПродажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
	|		ПО ТоварыПродажи.Номенклатура = ТоварыВозврата.Номенклатура
	|			И ТоварыПродажи.ЦенаСУчетомСкидки = ТоварыВозврата.ЦенаСУчетомСкидки
	|ГДЕ
	|	НЕ ТоварыПродажи.Количество - ЕСТЬNULL(ТоварыВозврата.Количество, 0) = 0
	|	%УсловиеНоменклатура%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//5
	|ВЫБРАТЬ
	|	ЧекМарки.КлючСвязи,
	|	ЧекМарки.КодМаркировки КАК КодМаркировки,
	|	ЧекМарки.ТипМаркировки КАК ТипМаркировки,
	|	ЧекМарки.ГлобальныйИдентификаторТорговойЕдиницы КАК ГлобальныйИдентификаторТорговойЕдиницы,
	|	ЧекМарки.СерийныйНомер КАК СерийныйНомер
	|ПОМЕСТИТЬ МаркиЧекаПродажи
	|ИЗ
	|	
	|		Документ.Чек.Марки КАК ЧекМарки
	|	ГДЕ
	|		ЧекМарки.Ссылка = &ЧекПродажи
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//6
	|ВЫБРАТЬ
	|	МаркиЧекаПродажи.КлючСвязи,
	|	МаркиЧекаПродажи.КодМаркировки КАК КодМаркировки,
	|	МаркиЧекаПродажи.ТипМаркировки КАК ТипМаркировки,
	|	МаркиЧекаПродажи.ГлобальныйИдентификаторТорговойЕдиницы КАК ГлобальныйИдентификаторТорговойЕдиницы,
	|	МаркиЧекаПродажи.СерийныйНомер КАК СерийныйНомер,
	|	АкцизныеМаркиВозврата.КодАкцизнойМарки КАК КодАкцизнойМаркиВозврата
	|ИЗ
	|	МаркиЧекаПродажи КАК МаркиЧекаПродажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМаркиВозврата КАК АкцизныеМаркиВозврата
	|		ПО МаркиЧекаПродажи.КодМаркировки = АкцизныеМаркиВозврата.КодАкцизнойМарки
	|ГДЕ
	|	АкцизныеМаркиВозврата.КодАкцизнойМарки ЕСТЬ NULL
	|";
	
	Если Номенклатура = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеНоменклатура%", "");
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеНоменклатура%", "И ТоварыПродажи.Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ЧекПродажи", ЧекПродажи);
	Запрос.УстановитьПараметр("ТоварыНезаписанногоДокумента", ТоварыНезаписанногоДокумента);
	Запрос.УстановитьПараметр("ЧекВозврата", ЧекВозврата);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	Товары         = РезультатПакет[4].Выгрузить();
	Марки          = РезультатПакет[6].Выгрузить();
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТоваров.КлючСвязи) Тогда
			
			НайденныеСтроки = Марки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТоваров.КлючСвязи));
			
			МассивМарок = Новый Массив;
			
			Если НайденныеСтроки.Количество() = СтрокаТоваров.Количество Тогда
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					МассивМарок.Добавить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
			
			СтрокаТоваров.Марки = МассивМарок;
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуВозвратаПоПродаже(СтрокаТоваров);
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

Функция ОтчетПоКассеКоличествоОпераций(КассоваяСмена) Экспорт
	
	Отчет = Новый Структура;
	РеквизитыОтчета = "КоличествоПродаж, КоличествоВозвратов, КоличествоВнесений, КоличествоВыплат";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Чек.Ссылка) КАК КоличествоПродаж
	|ИЗ
	|	Документ.Чек КАК Чек
	|ГДЕ
	|	Чек.КассоваяСмена = &КассоваяСмена
	|	И Чек.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И Чек.ВидОперации = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Чек.Ссылка) КАК КоличествоВозвратов
	|ИЗ
	|	Документ.Чек КАК Чек
	|ГДЕ
	|	Чек.КассоваяСмена = &КассоваяСмена
	|	И Чек.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И Чек.ВидОперации = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнесениеИзъятиеНаличных.Ссылка) КАК КоличествоВнесений
	|ИЗ
	|	Документ.ВнесениеИзъятиеНаличных КАК ВнесениеИзъятиеНаличных
	|ГДЕ
	|	ВнесениеИзъятиеНаличных.Проведен
	|	И ВнесениеИзъятиеНаличных.КассоваяСмена = &КассоваяСмена
	|	И ВнесениеИзъятиеНаличных.ВидДвиженияНаличных = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Внесение);
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВнесениеИзъятиеНаличных.Ссылка) КАК КоличествоВыплат
	|ИЗ
	|	Документ.ВнесениеИзъятиеНаличных КАК ВнесениеИзъятиеНаличных
	|ГДЕ
	|	ВнесениеИзъятиеНаличных.Проведен
	|	И ВнесениеИзъятиеНаличных.КассоваяСмена = &КассоваяСмена
	|	И ВнесениеИзъятиеНаличных.ВидДвиженияНаличных = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Изъятие)";
	
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Реквизиты = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыОтчета,,,Истина);
	
	// Индексы реквизитов массива должны совпадать(!) с индексами результатов пакета запроса.
	Индекс = 0;
	Для Каждого ИмяРеквизита Из Реквизиты Цикл
		
		Результат = РезультатЗапроса[Индекс];
		
		Если Результат.Пустой() Тогда
			Значение = 0;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Значение = Выборка[ИмяРеквизита];
		КонецЕсли;
		
		Отчет.Вставить(ИмяРеквизита, Значение);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Отчет;
	
КонецФункции

Функция ПолучитьРасчетыПоЗаказу(Заказ) Экспорт
	
	Возврат РегистрыНакопления.РасчетыСКлиентами.ПолучитьДетальныеРасчеты(Заказ);
	
КонецФункции

Функция ПолучитьИтогиРасчетовПоЗаказу(Заказ) Экспорт
	
	Возврат РегистрыНакопления.РасчетыСКлиентами.ПолучитьИтогиРасчетов(Заказ);
	
КонецФункции

Функция ОпределитьДоступныеСуммыВозвратаОплаты(ЗаказКлиента, ЧекПродажи) Экспорт
	
	Если ЗначениеЗаполнено(ЗаказКлиента)Тогда
		Возврат ОпределитьДоступныеСуммыВозвратаОплатыПоЗаказу(ЗаказКлиента);
	Иначе
		Возврат ОпределитьДоступныеСуммыВозвратаОплатыПоЧеку(ЧекПродажи);
	КонецЕсли;
	
КонецФункции

Процедура АннулироватьСвязанныеНеПробитыеЧеки(Чек) Экспорт
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(Чек);
	
	ФоновыеЗадания.Выполнить(
		"Продажи.АннулироватьСвязанныеНеПробитыеЧекиВФоне",
		ПараметрыЗадания
	);
	
КонецПроцедуры

Процедура АннулироватьСвязанныеНеПробитыеЧекиВФоне(Чек) Экспорт
	
	Если ЗначениеЗаполнено(Чек.ЧекПродажи) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чек.Ссылка
		|ИЗ
		|	Документ.Чек КАК Чек
		|ГДЕ
		|	Чек.ЧекПродажи = &ЧекПродажи
		|	И Чек.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Отложен)
		|	И НЕ Чек.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ЧекПродажи", Чек.ЧекПродажи);
		Запрос.УстановитьПараметр("Ссылка", Чек);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЧекОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекОбъект.СтатусЧека = Перечисления.СтатусыЧеков.Аннулирован;
			ЧекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Чек.ЗаказКлиента) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Чек.Ссылка
		|ИЗ
		|	Документ.Чек КАК Чек
		|ГДЕ
		|	Чек.ЗаказКлиента = &ЗаказКлиента
		|	И Чек.СтатусЧека = ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Отложен)
		|	И НЕ Чек.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ЗаказКлиента", Чек.ЗаказКлиента);
		Запрос.УстановитьПараметр("Ссылка", Чек);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЧекОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекОбъект.СтатусЧека = Перечисления.СтатусыЧеков.Аннулирован;
			ЧекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

Функция ПолучитьКассовуюСменуДляОтчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Закрыта,
	|	КассоваяСмена.ОкончаниеКассовойСмены УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтчетПоПродажам(КассоваяСмена = Неопределено, Период = Неопределено, Кассир = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КассоваяСмена.НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены,
	|	КассоваяСмена.Закрыта,
	|	ВЫБОР
	|	КОГДА КассоваяСмена.НомерСмены = 0
	|		ТОГДА КассоваяСмена.Номер
	|	ИНАЧЕ КассоваяСмена.НомерСмены
	|	КОНЕЦ КАК Номер,
	|	КассоваяСмена.Дата
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Ссылка = &КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекТовары.Номенклатура КАК Товар,
	|	СУММА(ЧекТовары.Количество) КАК Количество,
	|	СУММА(ЧекТовары.Сумма) КАК Сумма,
	|	ЧекТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|	ЧекТовары.Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|ГДЕ
	|	%Условие%
	|	%УсловиеКассир%
	|	И ЧекТовары.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекТовары.Ссылка.ВидОперации = &ВидОперацииПродажа
	|	И ЧекТовары.Ссылка.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекТовары.Номенклатура,
	|	ЧекТовары.Номенклатура.ЕдиницаИзмерения,
	|	ЧекТовары.Номенклатура.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекТовары.Номенклатура КАК Товар,
	|	СУММА(ЧекТовары.Количество) КАК Количество,
	|	СУММА(ЧекТовары.Сумма) КАК Сумма,
	|	ЧекТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
	|	ЧекТовары.Номенклатура.Наименование КАК Наименование
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|ГДЕ
	|	%Условие%
	|	%УсловиеКассир%
	|	И ЧекТовары.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекТовары.Ссылка.ВидОперации = &ВидОперацииВозврат
	|	И ЧекТовары.Ссылка.ПризнакСпособаРасчета В (ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты), ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекТовары.Номенклатура,
	|	ЧекТовары.Номенклатура.ЕдиницаИзмерения,
	|	ЧекТовары.Номенклатура.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0) КАК СуммаОплатыИтого,
	|	ЕСТЬNULL(СУММА(Обороты.СуммаПриход), 0) КАК СуммаОплатыПродажа,
	|	ЕСТЬNULL(СУММА(Обороты.СуммаРасход), 0) КАК СуммаОплатыВозврат
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Обороты(
	|			%ДатаС%,
	|			%ДатаПо%,
	|			,
	|			%УсловиеСмена%
	|			ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные), ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта))
	|				И ВидДвиженияДС В (ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Продажа), ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияДС.Возврат))) КАК Обороты
	|ГДЕ
	|	%УсловиеКассирОбороты%
	|";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("ВидОперацииПродажа", ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа());
	Запрос.УстановитьПараметр("ВидОперацииВозврат", ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Возврат());
	
	Если КассоваяСмена = Неопределено Тогда
		
		// дата
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "ЧекТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДатаС%",  "&ДатаС");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДатаПо%", "&ДатаПо");
		
		Запрос.УстановитьПараметр("ДатаС",  Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаПо", Период.ДатаОкончания);
		
		// смена
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСмена%", "");
		
	Иначе
		
		// дата
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДатаС%",  "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ДатаПо%", "");
		
		//смена
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеСмена%", "КассоваяСмена = &КассоваяСмена И");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "ЧекТовары.Ссылка.КассоваяСмена = &КассоваяСмена");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кассир) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеКассир%", "И ЧекТовары.Ссылка.КассоваяСмена.Кассир = &Кассир");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеКассирОбороты%", "Обороты.КассоваяСмена.Кассир = &Кассир");
		
		Запрос.УстановитьПараметр("Кассир", Кассир);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеКассир%", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеКассирОбороты%", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИнфоОСмене = РезультатЗапроса[0].Выбрать();
	ТаблицаПродажи  = РезультатЗапроса[1].Выгрузить();
	ТаблицаВозвраты = РезультатЗапроса[2].Выгрузить();
	ОборотыПоОплате = РезультатЗапроса[3].Выбрать();
	
	СтатусСмены    = "";
	НачалоСмены    = "";
	ОкончаниеСмены = "";
	ДатаСмены      = "";
	НомерСмены     = "";
	
	Если ИнфоОСмене.Следующий() Тогда
		СтатусСмены    = ?(ИнфоОСмене.Закрыта, "Закрыта", "Открыта");
		НачалоСмены    = ИнфоОСмене.НачалоКассовойСмены;
		ОкончаниеСмены = ИнфоОСмене.ОкончаниеКассовойСмены;
		ДатаСмены      = Формат(ИнфоОСмене.Дата, "ДФ=dd.MM.yy");
		НомерСмены     = ОбщегоНазначенияКлиентСервер.ПредставлениеНомера(ИнфоОСмене.Номер);
	КонецЕсли;
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ТаблицаПродажи", ТаблицаПродажи);
	СтруктураОтчета.Вставить("ТаблицаВозвраты", ТаблицаВозвраты);
	
	СтруктураОтчета.Вставить("СтатусСмены",    СтатусСмены);
	СтруктураОтчета.Вставить("НачалоСмены",    НачалоСмены);
	СтруктураОтчета.Вставить("ОкончаниеСмены", ОкончаниеСмены);
	СтруктураОтчета.Вставить("Дата",           ДатаСмены);
	СтруктураОтчета.Вставить("Номер",          НомерСмены);
	
	ОборотыПоОплате.Следующий();
	СтруктураОтчета.Вставить("СуммаОплатыПродажа", ОборотыПоОплате.СуммаОплатыПродажа);
	СтруктураОтчета.Вставить("СуммаОплатыВозврат", ОборотыПоОплате.СуммаОплатыВозврат);
	СтруктураОтчета.Вставить("СуммаОплатыИтого",   ОборотыПоОплате.СуммаОплатыИтого);
	
	Возврат СтруктураОтчета;
	
КонецФункции

Функция ОтчетПоКассеТекстовый(КассоваяСмена) Экспорт
	
	ОтчетПоКассе = ОтчетПоКассе(КассоваяСмена);
	
	ТекстовыйШаблонОтчета = НСтр("ru = 'Кассовая смена %НомерСмены% от %ДатаСмены%
	|
	|Статус: %СтатусСмены%
	|Начало смены: %НачалоСмены%
	|Окончание смены: %ОкончаниеСмены%
	|
	|Наличные: %Наличные%
	|Выручка: %Выручка%
	|
	|Продажа: %ПродажиСумма%
	|Наличными: %ПродажиНаличные%
	|Платежной картой: %ПродажиБезналичные%
	|
	|Возврат: %ВозвратСумма%
	|Наличными: %ВозвратНаличные%
	|Платежной картой: %ВозвратБезналичные%
	|
	|Внесение: %Внесение%
	|Выемка: %Выплата%
	|'");
	
	НомерСмены = ПродажиВызовСервера.ПолучитьНомерСменыДляПечати(КассоваяСмена);
	
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйШаблонОтчета, "%НомерСмены%", НомерСмены);
	
	ФорматСуммы = ОбщегоНазначенияПовтИсп.ФорматСуммовыхПолей();
	
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ДатаСмены%", 			КассоваяСмена.Дата);
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%СтатусСмены%", 			?(КассоваяСмена.Закрыта, "Закрыта", "Открыта"));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%НачалоСмены%", 			КассоваяСмена.НачалоКассовойСмены);
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ОкончаниеСмены%", 		Формат(КассоваяСмена.ОкончаниеКассовойСмены, "ДП=-"));
	
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%Наличные%", 				Формат(ОтчетПоКассе.Наличные, 					ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%Выручка%", 				Формат(ОтчетПоКассе.Выручка, 					ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ПродажиСумма%", 			Формат(ОтчетПоКассе.Продажа, 					ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ПродажиНаличные%", 		Формат(ОтчетПоКассе.ПродажаНаличными, 			ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ПродажиБезналичные%", 	Формат(ОтчетПоКассе.ПродажаПлатежнойКартой, 	ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ВозвратСумма%", 			Формат(ОтчетПоКассе.Возврат, 					ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ВозвратНаличные%", 		Формат(ОтчетПоКассе.ВозвратНаличными, 			ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%ВозвратБезналичные%", 	Формат(ОтчетПоКассе.ВозвратПлатежнойКартой, 	ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%Внесение%", 				Формат(ОтчетПоКассе.Внесение, 					ФорматСуммы));
	ТекстовыйОтчет = СтрЗаменить(ТекстовыйОтчет, "%Выплата%", 				Формат(ОтчетПоКассе.Выплата, 					ФорматСуммы));
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ТекстПисьма", ТекстовыйОтчет);
	
	ШаблонТемыПисьма = НСтр("ru = 'Отчет по кассовой смене %НомерСмены% от %ДатаСмены%'");
	ТемаПисьма = СтрЗаменить(ШаблонТемыПисьма, "%НомерСмены%", НомерСмены);
	ТемаПисьма = СтрЗаменить(ТемаПисьма, "%ДатаСмены%", КассоваяСмена.Дата);
	
	СтруктураРезультат.Вставить("ТемаПисьма", ТемаПисьма);
	
	Возврат СтруктураРезультат;

КонецФункции

Функция ОтчетПоПродажамТекстовый(КассоваяСмена = Неопределено, Период = Неопределено) Экспорт
	
	ОтчетПоПродажам = ПолучитьОтчетПоПродажам(КассоваяСмена, Период);
	
	ШаблонСтроки = НСтр("ru = '%НомерСтроки%. %Номенклатура%
								|%Количество% %ЕдИзм% %Сумма%
								|'");
	
	ТекстПисьма = "";
	
	// Продажа
	ТаблицаПродажи = ОтчетПоПродажам.ТаблицаПродажи;
	НомерСтроки = 1;
	ТекстПисьма = ТекстПисьма + Символы.ПС + НСтр("ru = 'Продажа'") + Символы.ПС + Символы.ПС;
	
	Для Каждого Строка Из ТаблицаПродажи Цикл
		
		ТекстСтроки = СтрЗаменить(ШаблонСтроки, "%НомерСтроки%", НомерСтроки);
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%Номенклатура%", Строка.Наименование);
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%Количество%", Формат(Строка.Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=,; ЧН=0,00"));
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%ЕдИзм%", Строка.ЕдИзм);
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%Сумма%",Формат(Строка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		
		ТекстПисьма = ТекстПисьма + ТекстСтроки + Символы.ПС;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Итого = ТаблицаПродажи.Итог("Сумма");
	ШаблонИтого = НСтр("ru = 'Итого: %Итого%'");
	ТекстИтого = СтрЗаменить(ШаблонИтого, "%Итого%", Формат(Итого, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"));
	
	ТекстПисьма = ТекстПисьма + ТекстИтого;
	
	// Возвраты товаров
	ТаблицаВозвраты = ОтчетПоПродажам.ТаблицаВозвраты;
	НомерСтроки = 1;
	ТекстПисьма = ТекстПисьма + Символы.ПС + Символы.ПС + Символы.ПС + НСтр("ru = 'Возврат'") + Символы.ПС + Символы.ПС;
	
	Для Каждого Строка Из ТаблицаВозвраты Цикл
		
		ТекстСтроки = СтрЗаменить(ШаблонСтроки, "%НомерСтроки%", НомерСтроки);
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%Номенклатура%", Строка.Наименование);
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%Количество%", Формат(Строка.Количество, "ЧЦ=15; ЧДЦ=3; ЧРД=,; ЧН=0,00"));
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%ЕдИзм%", Строка.ЕдИзм);
		ТекстСтроки = СтрЗаменить(ТекстСтроки, "%Сумма%",Формат(Строка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		
		ТекстПисьма = ТекстПисьма + ТекстСтроки + Символы.ПС;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Итого = ТаблицаВозвраты.Итог("Сумма");
	ШаблонИтого = НСтр("ru = 'Итого: %Итого%'");
	ТекстИтого = СтрЗаменить(ШаблонИтого, "%Итого%", Формат(Итого, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0,00"));
	
	ТекстПисьма = ТекстПисьма + ТекстИтого;

	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ТекстПисьма", ТекстПисьма);
	
	Если КассоваяСмена = Неопределено Тогда
		
		ШаблонТемыПисьма = НСтр("ru = 'Продажи с %ДатаС% от %ДатаПо%'");
		
		ТемаПисьма = СтрЗаменить(ШаблонТемыПисьма, "%ДатаС%", Формат(Период.ДатаНачала, "ДЛФ=D"));
		ТемаПисьма = СтрЗаменить(ТемаПисьма, "%ДатаПо%", Формат(Период.ДатаОкончания, "ДЛФ=D"));
		
		СтруктураРезультат.Вставить("ТемаПисьма", ТемаПисьма);
		
	Иначе
		ШаблонТемыПисьма = НСтр("ru = 'Продажи за кассовую смену %НомерСмены% от %ДатаСмены%'");
		ТемаПисьма = СтрЗаменить(ШаблонТемыПисьма, "%НомерСмены%", ОтчетПоПродажам.Номер);
		ТемаПисьма = СтрЗаменить(ТемаПисьма, "%ДатаСмены%", ОтчетПоПродажам.Дата);
		
		СтруктураРезультат.Вставить("ТемаПисьма", ТемаПисьма);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПолучитьЖурналПродажиАлкогольнойПродукции(Период) Экспорт
	
	Журнал = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаименованиеОрганизации.Значение КАК НазваниеОрганизации,
	|	ИНН.Значение КАК ИННКПП
	|ИЗ
	|	Константа.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	Константа.ИНН КАК ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЧекТовары.Ссылка.Дата, ДЕНЬ) КАК День,
	|	ЧекТовары.Номенклатура,
	|	ЧекТовары.Количество,
	|	ЧекТовары.Номенклатура.ОбъемАлкогольнойПродукции * ЧекТовары.Количество КАК Емкость
	|ПОМЕСТИТЬ ПродажиВозвратыАлкоголя
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|ГДЕ
	|	ЧекТовары.Номенклатура.АлкогольнаяПродукция
	|	И ЧекТовары.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекТовары.Ссылка.ВидОперации = &ВидОперацииПродажа
	|	И ЧекТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЧекТовары.Ссылка.Дата, ДЕНЬ),
	|	ЧекТовары.Номенклатура,
	|	-ЧекТовары.Количество,
	|	-ЧекТовары.Номенклатура.ОбъемАлкогольнойПродукции * ЧекТовары.Количество
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|ГДЕ
	|	ЧекТовары.Номенклатура.АлкогольнаяПродукция
	|	И ЧекТовары.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекТовары.Ссылка.ВидОперации = &ВидОперацииВозврат
	|	И ЧекТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиВозвратыАлкоголя.День КАК ДатаПродажи,
	|	ПродажиВозвратыАлкоголя.Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ПродажиВозвратыАлкоголя.Номенклатура) КАК НаименованиеПродукции,
	|	СУММА(ПродажиВозвратыАлкоголя.Количество) КАК Количество,
	|	СУММА(ПродажиВозвратыАлкоголя.Емкость) КАК Емкость,
	|	ПродажиВозвратыАлкоголя.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодВидаПродукции
	|ИЗ
	|	ПродажиВозвратыАлкоголя КАК ПродажиВозвратыАлкоголя
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиВозвратыАлкоголя.День,
	|	ПродажиВозвратыАлкоголя.Номенклатура,
	|	ПродажиВозвратыАлкоголя.Номенклатура.ВидАлкогольнойПродукции.Код";
	
	Запрос.УстановитьПараметр("ВидОперацииПродажа", 0);
	Запрос.УстановитьПараметр("ВидОперацииВозврат", 1);
	Запрос.УстановитьПараметр("ДатаС",  Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаПо", Период.ДатаОкончания);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	РезультатШапка = РезультатПакет[0];
	
	ВыборкаШапка = РезультатШапка.Выбрать();
	ВыборкаШапка.Следующий();
	
	Журнал.Вставить("НазваниеОрганизации", ВыборкаШапка.НазваниеОрганизации);
	Журнал.Вставить("ИННКПП", ВыборкаШапка.ИННКПП);
	Журнал.Вставить("Товары", РезультатПакет[2].Выгрузить());
	
	Возврат Журнал;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьДоступныеСуммыВозвратаОплатыПоЗаказу(Заказ)
	
	МаксимальныеСуммы = Новый Структура;
	
	МаксимальныеСуммы.Вставить("Наличные", 0);
	МаксимальныеСуммы.Вставить("ПлатежнаяКарта", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекОплаты.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА ЧекОплаты.Сумма
	|			ИНАЧЕ -ЧекОплаты.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	ЧекОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ Оплаты
	|ИЗ
	|	Документ.Чек.Оплаты КАК ЧекОплаты
	|ГДЕ
	|	ЧекОплаты.Ссылка.ЗаказКлиента = &ЗаказКлиента
	|	И ЧекОплаты.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекОплаты.Ссылка.Проведен
	|	И ЧекОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные), ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекОплаты.ТипОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказОплаты.Сумма,
	|	ЗаказОплаты.ТипОплаты
	|ИЗ
	|	Документ.ЗаказКлиента.Оплаты КАК ЗаказОплаты
	|ГДЕ
	|	ЗаказОплаты.Ссылка = &ЗаказКлиента
	|	И ЗаказОплаты.Ссылка.Проведен
	|	И ЗаказОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные), ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Оплаты.Сумма) КАК Сумма,
	|	Оплаты.ТипОплаты
	|ИЗ
	|	Оплаты КАК Оплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплаты.ТипОплаты";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	Запрос.УстановитьПараметр("ВидОперацииПродажа", ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОплаты = Перечисления.ТипыОплаты.Наличные Тогда
			
			МаксимальныеСуммы.Наличные = Выборка.Сумма;
			
		ИначеЕсли Выборка.ТипОплаты = Перечисления.ТипыОплаты.ПлатежнаяКарта Тогда
			
			МаксимальныеСуммы.ПлатежнаяКарта = Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксимальныеСуммы;
	
КонецФункции

Функция ОпределитьДоступныеСуммыВозвратаОплатыПоЧеку(Чек)
	
	ДоступныеСуммы = Новый Структура;
	
	ДоступныеСуммы.Вставить("Наличные", 0);
	ДоступныеСуммы.Вставить("ПлатежнаяКарта", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧекОплаты.Ссылка.ВидОперации = &ВидОперацииПродажа
	|			ТОГДА ЧекОплаты.Сумма
	|		ИНАЧЕ -ЧекОплаты.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ЧекОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	Документ.Чек.Оплаты КАК ЧекОплаты
	|ГДЕ
	|	ЧекОплаты.Ссылка = &Чек
	|	И ЧекОплаты.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекОплаты.Ссылка.Проведен
	|	И ЧекОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные), ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧекОплаты.Ссылка.ВидОперации = &ВидОперацииПродажа
	|			ТОГДА ЧекОплаты.Сумма
	|		ИНАЧЕ -ЧекОплаты.Сумма
	|	КОНЕЦ,
	|	ЧекОплаты.ТипОплаты
	|ИЗ
	|	Документ.Чек.Оплаты КАК ЧекОплаты
	|ГДЕ
	|	ЧекОплаты.Ссылка.ЧекПродажи = &Чек
	|	И ЧекОплаты.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|	И ЧекОплаты.Ссылка.Проведен
	|	И ЧекОплаты.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные), ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.ПлатежнаяКарта))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Оплата.Сумма) КАК Сумма,
	|	Оплата.ТипОплаты
	|ИЗ
	|	Оплата КАК Оплата
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплата.ТипОплаты";
	
	Запрос.УстановитьПараметр("Чек", Чек);
	Запрос.УстановитьПараметр("ВидОперацииПродажа", ПродажиКлиентСерверПовтИсп.ВидОперацииЧека_Продажа());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОплаты = Перечисления.ТипыОплаты.Наличные Тогда
			
			ДоступныеСуммы.Наличные = Выборка.Сумма;
			
		ИначеЕсли Выборка.ТипОплаты = Перечисления.ТипыОплаты.ПлатежнаяКарта Тогда
			
			ДоступныеСуммы.ПлатежнаяКарта = Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеСуммы;
	
КонецФункции

#КонецОбласти

