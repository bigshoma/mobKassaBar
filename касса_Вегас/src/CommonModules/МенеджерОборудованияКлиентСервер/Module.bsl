#Область ПрограммныйИнтерфейс

// Получить код системы налогообложения ККТ.
// 
Функция КодСистемыНалогообложенияККТ(СистемаНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")           , 0);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход")      , 1);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход"), 2);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД")          , 3);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН")           , 4);
	СистемыНалогообложения.Вставить(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент")        , 5);
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложенияККТ);
	
КонецФункции

// Получить систему налогообложения ККТ по коду
// 
Функция СистемаНалогообложенияККТПоКоду(КодСистемыНалогообложенияККТ) Экспорт
	
	СистемыНалогообложения = Новый Соответствие();
	СистемыНалогообложения.Вставить(0, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН"));
	СистемыНалогообложения.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоход"));
	СистемыНалогообложения.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.УСНДоходРасход"));
	СистемыНалогообложения.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД"));
	СистемыНалогообложения.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕСН"));
	СистемыНалогообложения.Вставить(5, ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент"));
	
	Возврат СистемыНалогообложения.Получить(КодСистемыНалогообложенияККТ);
	
КонецФункции

// Получить наименование системы налогообложения по коду.
//
Функция НаименованиеСистемыНалогообложения(СистемаНалогообложения, Кратко = Ложь) Экспорт;
	
	СистемыНалогообложения = Новый Соответствие();
	Если Кратко Тогда
		СистемыНалогообложения.Вставить(0, НСтр("ru='ОСН'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='УСН доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='УСН доход-расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='ЕНВД'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='ЕСН'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патент'"));
	Иначе
		СистемыНалогообложения.Вставить(0, НСтр("ru='Общая'"));
		СистемыНалогообложения.Вставить(1, НСтр("ru='Упрощенная Доход'"));
		СистемыНалогообложения.Вставить(2, НСтр("ru='Упрощенная Доход минус Расход'"));
		СистемыНалогообложения.Вставить(3, НСтр("ru='Единый налог на вмененный доход'"));
		СистемыНалогообложения.Вставить(4, НСтр("ru='Единый сельскохозяйственный налог'"));
		СистемыНалогообложения.Вставить(5, НСтр("ru='Патентная система налогообложения'"));
	КонецЕсли;
	
	Возврат СистемыНалогообложения.Получить(СистемаНалогообложения);
	
КонецФункции

// Получить код расчета денежными средствами.
// 
Функция КодРасчетаДенежнымиСредствами(ТипРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")        , 1);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств")       , 2);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств")        , 3);
	ТипыРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"), 4);
	
	Возврат ТипыРасчета.Получить(ТипРасчета);
	
КонецФункции

// Получить типа расчета денежными средствами по коду.
// 
Функция РасчетДенежнымиСредствамиПоКоду(КодПризнакаРасчета) Экспорт
	
	ТипыРасчета = Новый Соответствие();
	ТипыРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств"));
	ТипыРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств"));
	ТипыРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств"));
	ТипыРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств"));
	
	Возврат ТипыРасчета.Получить(КодПризнакаРасчета);
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция КодПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")         , 1); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная")      , 2);
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")                    , 3); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")   , 4); 
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"), 5);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты")        , 6);  
	ПризнакиСпособаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита")            , 7);  
	
	Возврат ПризнакиСпособаРасчета.Получить(ПризнакСпособаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
Функция ПризнакСпособаРасчетаПоКоду(КодПризнакаСпособаРасчета) Экспорт
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	ПризнакиСпособаРасчета.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная")); 
	ПризнакиСпособаРасчета.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная"));
	ПризнакиСпособаРасчета.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс")); 
	ПризнакиСпособаРасчета.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой")); 
	ПризнакиСпособаРасчета.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой"));  
	ПризнакиСпособаРасчета.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаБезОплаты"));  
	ПризнакиСпособаРасчета.Вставить(7, ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ОплатаКредита"));  
	
	Возврат ПризнакиСпособаРасчета.Получить(КодПризнакаСпособаРасчета);
	
КонецФункции

// Получить наименование признака способа расчета по коду.
//
Функция НаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета) Экспорт;
	
	ПризнакиСпособаРасчета = Новый Соответствие();
	
	ПризнакиСпособаРасчета.Вставить(1, НСтр("ru='ПРЕДОПЛАТА 100%'"));
	ПризнакиСпособаРасчета.Вставить(2, НСтр("ru='ПРЕДОПЛАТА'"));
	ПризнакиСпособаРасчета.Вставить(3, НСтр("ru='АВАНС'"));
	ПризнакиСпособаРасчета.Вставить(4, НСтр("ru='ПОЛНЫЙ РАСЧЕТ'"));
	ПризнакиСпособаРасчета.Вставить(5, НСтр("ru='ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(6, НСтр("ru='ПЕРЕДАЧА В КРЕДИТ'"));
	ПризнакиСпособаРасчета.Вставить(7, НСтр("ru='ОПЛАТА КРЕДИТА'"));
	
	Возврат ПризнакиСпособаРасчета.Получить(ПризнакСпособаРасчета);
	
КонецФункции

// Получить код признака способа расчета.
// 
Функция КодПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар")                  , 1);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар")       , 2);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа")                 , 3);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга")                 , 4);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры")     , 5);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры")    , 6);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет")        , 7);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи")         , 8);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД")      , 9);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата")          , 10);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение"), 11);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета"), 12);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета")     , 13);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИмущественноеПраво")     , 14);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВнереализационныйДоход") , 15);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтраховыеВзносы")        , 16);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТорговыйСбор")           , 17);       
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.КурортныйСбор")          , 18);
	ПризнакиПредметаРасчета.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Залог")                  , 19);
	
	Возврат ПризнакиПредметаРасчета.Получить(ПризнакПредметаРасчета);
	
КонецФункции

// Получить признак способа расчета по коду.
// 
Функция ПризнакПредметаРасчетаПоКоду(КодПризнакаПредметаРасчета) Экспорт
	
	ПризнакиПредметаРасчета = Новый Соответствие(); 
	
	ПризнакиПредметаРасчета.Вставить(1,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар"));
	ПризнакиПредметаРасчета.Вставить(2,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар"));
	ПризнакиПредметаРасчета.Вставить(3,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Работа"));
	ПризнакиПредметаРасчета.Вставить(4,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга"));
	ПризнакиПредметаРасчета.Вставить(5,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтавкаАзартнойИгры"));
	ПризнакиПредметаРасчета.Вставить(6,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышАзартнойИгры"));
	ПризнакиПредметаРасчета.Вставить(7,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ЛотерейныйБилет"));
	ПризнакиПредметаРасчета.Вставить(8,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВыигрышЛотереи"));
	ПризнакиПредметаРасчета.Вставить(9,  ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПредоставлениеРИД"));
	ПризнакиПредметаРасчета.Вставить(10, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата"));
	ПризнакиПредметаРасчета.Вставить(11, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.АгентскоеВознаграждение"));
	ПризнакиПредметаРасчета.Вставить(12, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СоставнойПредметРасчета"));
	ПризнакиПредметаРасчета.Вставить(13, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИнойПредметРасчета"));
	ПризнакиПредметаРасчета.Вставить(14, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ИмущественноеПраво"));
	ПризнакиПредметаРасчета.Вставить(15, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ВнереализационныйДоход"));
	ПризнакиПредметаРасчета.Вставить(16, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.СтраховыеВзносы"));
	ПризнакиПредметаРасчета.Вставить(17, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ТорговыйСбор"));       
	ПризнакиПредметаРасчета.Вставить(18, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.КурортныйСбор"));
	ПризнакиПредметаРасчета.Вставить(19, ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Залог"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции

// Получить наименование признака предмета расчета.
//
Функция НаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчета) Экспорт;
	
	ПризнакиПредметаРасчета = Новый Соответствие();
	
	ПризнакиПредметаРасчета.Вставить(1 , НСтр("ru='ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(2 , НСтр("ru='ПОДАКЦИЗНЫЙ ТОВАР'"));
	ПризнакиПредметаРасчета.Вставить(3 , НСтр("ru='РАБОТА'"));
	ПризнакиПредметаРасчета.Вставить(4 , НСтр("ru='УСЛУГА'"));
	ПризнакиПредметаРасчета.Вставить(5 , НСтр("ru='СТАВКА АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(6 , НСтр("ru='ВЫИГРЫШ АЗАРТНОЙ ИГРЫ'"));
	ПризнакиПредметаРасчета.Вставить(7 , НСтр("ru='ЛОТЕРЕЙНЫЙ БИЛЕТ'"));
	ПризнакиПредметаРасчета.Вставить(8 , НСтр("ru='ВЫИГРЫШ ЛОТЕРЕИ'"));
	ПризнакиПредметаРасчета.Вставить(9 , НСтр("ru='ПРЕДОСТАВЛЕНИЕ РИД'"));
	ПризнакиПредметаРасчета.Вставить(10, НСтр("ru='ПЛАТЕЖ'"));
	ПризнакиПредметаРасчета.Вставить(11, НСтр("ru='АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ'"));
	ПризнакиПредметаРасчета.Вставить(12, НСтр("ru='СОСТАВНОЙ ПРЕДМЕТ РАСЧЕТА'"));
	ПризнакиПредметаРасчета.Вставить(13, НСтр("ru='ИНОЙ ПРЕДМЕТ РАСЧЕТА'"));
	ПризнакиПредметаРасчета.Вставить(14, НСтр("ru='ИМУЩЕСТВЕННОЕ ПРАВО'"));
	ПризнакиПредметаРасчета.Вставить(15, НСтр("ru='ВНЕРЕАЛИЗАЦИОННЫЙ ДОХОД'"));
	ПризнакиПредметаРасчета.Вставить(16, НСтр("ru='СТРАХОВЫЕ ВЗНОСЫ'"));
	ПризнакиПредметаРасчета.Вставить(17, НСтр("ru='ТОРГОВЫЙ СБОР'"));
	ПризнакиПредметаРасчета.Вставить(18, НСтр("ru='КУРОРТНЫЙ СБОР'"));
	ПризнакиПредметаРасчета.Вставить(19, НСтр("ru='ЗАЛОГ'"));
	
	Возврат ПризнакиПредметаРасчета.Получить(ПризнакПредметаРасчета);
	
КонецФункции

// Получить наименование признака предмета расчета по коду.
//
Функция НаименованиеПризнакПредметаРасчетаПоКоду(КодПризнакаПредметаРасчета) Экспорт;
	
	ПризнакиПредметаРасчета = Новый Соответствие();
	
	ПризнакиПредметаРасчета.Вставить(1, НСтр("ru='Доход от долевого участия в других организациях'"));
	ПризнакиПредметаРасчета.Вставить(2, НСтр("ru='Доход в виде курсовой разницы, образующейся вследствие отклонения курса продажи (покупки) иностранной валюты от официального курса'"));
	ПризнакиПредметаРасчета.Вставить(3, НСтр("ru='Доход в виде подлежащих уплате должником штрафов, пеней и (или) иных санкций за нарушение договорных обязательств'"));
	ПризнакиПредметаРасчета.Вставить(4, НСтр("ru='Доход от сдачи имущества (включая земельные участки) в аренду (субаренду)'"));
	ПризнакиПредметаРасчета.Вставить(5, НСтр("ru='Доход от предоставления в пользование прав на результаты интеллектуальной деятельности'"));
	ПризнакиПредметаРасчета.Вставить(6, НСтр("ru='Доход в виде процентов, полученных по договорам займа и другим долговым обязательствам'"));
	ПризнакиПредметаРасчета.Вставить(7, НСтр("ru='Доход в виде сумм восстановленных резервов'"));
	ПризнакиПредметаРасчета.Вставить(8, НСтр("ru='Доход в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав'"));
	ПризнакиПредметаРасчета.Вставить(9, НСтр("ru='Доход в виде дохода, распределяемого в пользу налогоплательщика при его участии в простом товариществе'"));
	ПризнакиПредметаРасчета.Вставить(10, НСтр("ru='Доход в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде'"));
	ПризнакиПредметаРасчета.Вставить(11, НСтр("ru='Доход в виде положительной курсовой разницы'"));
	ПризнакиПредметаРасчета.Вставить(12, НСтр("ru='Доход в виде основных средств и нематериальных активов, безвозмездно полученных атомными станциями'"));
	ПризнакиПредметаРасчета.Вставить(13, НСтр("ru='доход в виде стоимости полученных материалов при ликвидации выводимых из эксплуатации основных средств'"));
	ПризнакиПредметаРасчета.Вставить(14, НСтр("ru='Доход в виде использованных не по целевому назначению имущества, работ, услуг'"));
	ПризнакиПредметаРасчета.Вставить(15, НСтр("ru='Доход в виде использованных не по целевому назначению средств, предназначенных для формирования резервов по обеспечению безопасности производств'"));
	ПризнакиПредметаРасчета.Вставить(16, НСтр("ru='Доход в виде сумм, на которые уменьшен уставной (складочный) капитал (фонд) организации'"));
	ПризнакиПредметаРасчета.Вставить(17, НСтр("ru='Доход в виде сумм возврата от некоммерческой организации ранее уплаченных взносов (вкладов)'"));
	ПризнакиПредметаРасчета.Вставить(18, НСтр("ru='Доход в виде сумм кредиторской задолженности, списанной в связи с истечением срока исковой давности или по другим основаниям'"));
	ПризнакиПредметаРасчета.Вставить(19, НСтр("ru='Доход в виде доходов, полученных от операций с производными финансовыми инструментами'"));
	ПризнакиПредметаРасчета.Вставить(20, НСтр("ru='Доход в виде стоимости излишков материально-производственных запасов и прочего имущества, которые выявлены в результате инвентаризации'"));
	ПризнакиПредметаРасчета.Вставить(21, НСтр("ru='Доход в виде стоимости продукции СМИ и книжной продукции, подлежащей замене при возврате либо при списании'"));
	ПризнакиПредметаРасчета.Вставить(22, НСтр("ru='Доход в виде сумм корректировки прибыли налогоплательщика'"));
	ПризнакиПредметаРасчета.Вставить(23, НСтр("ru='Доход в виде возвращенного денежного эквивалента недвижимого имущества и (или) ценных бумаг, переданных на пополнение целевого капитала некоммерческой организации'"));
	ПризнакиПредметаРасчета.Вставить(24, НСтр("ru='Доход в виде разницы между суммой налоговых вычетов из сумм акциза и указанных сумм акциза'"));
	ПризнакиПредметаРасчета.Вставить(25, НСтр("ru='Доход в виде прибыли контролируемой иностранной компании'"));
	ПризнакиПредметаРасчета.Вставить(26, НСтр("ru='Взносы на ОПС'"));
	ПризнакиПредметаРасчета.Вставить(27, НСтр("ru='Взносы на ОСС в связи с нетрудоспособностью'"));
	ПризнакиПредметаРасчета.Вставить(28, НСтр("ru='Взносы на ОМС'"));
	ПризнакиПредметаРасчета.Вставить(29, НСтр("ru='Взносы на ОСС от несчастных случаев'"));
	ПризнакиПредметаРасчета.Вставить(30, НСтр("ru='Пособие по временной нетрудоспособности'"));
	ПризнакиПредметаРасчета.Вставить(31, НСтр("ru='Платежи по добровольному личному страхованию'"));
	
	Возврат ПризнакиПредметаРасчета.Получить(КодПризнакаПредметаРасчета);
	
КонецФункции

// Получить признак агента по коду.
// 
Функция КодПризнакаАгента(КодПризнакаАгента) Экспорт
	
	ПризнакиАгента = Новый Соответствие(); 
	
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент")   , 0);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"), 1);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент")             , 2);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент")          , 3);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный")                 , 4);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер")                , 5);
	ПризнакиАгента.Вставить(ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент")                      , 6);
	
	Возврат ПризнакиАгента.Получить(КодПризнакаАгента);
	
КонецФункции

// Получить код типа признака агента.
// 
Функция ПризнакАгентаПоКоду(ПризнакАгента) Экспорт
	
	ПризнакиАгента = Новый Соответствие(); 
	
	ПризнакиАгента.Вставить(0, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент"));
	ПризнакиАгента.Вставить(1, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"));
	ПризнакиАгента.Вставить(2, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент"));
	ПризнакиАгента.Вставить(3, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент"));
	ПризнакиАгента.Вставить(4, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Поверенный"));
	ПризнакиАгента.Вставить(5, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер"));
	ПризнакиАгента.Вставить(6, ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Агент"));
	
	Возврат ПризнакиАгента.Получить(ПризнакАгента);
	
КонецФункции

// Получить код причины изменения сведений о ККТ.
// 
Функция КодПричиныИзмененияСведенийККТ(ПричинаИзмененияСведенийККТ) Экспорт
	
	ПричиныИзмененияСведенийККТ = Новый Соответствие(); 
	
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаФН")                         , 0);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ЗаменаОФД")                        , 1);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНаименованияПользователя"), 2);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеАдреса")                  , 3);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВРежимПередачиДанных")      , 4);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтономныйРежим")          , 5);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсии")                  , 6);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеСистемНалогообложения")   , 7);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеНомераУстройства")        , 8);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВНеавтоматическийРежим")    , 9);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ПереводВАвтоматическийРежим")      , 10);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеБСО")                     , 11);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеБСО")                    , 12);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаРасчетовВИнтернет") , 13);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаРасчетовВИнтернет"), 14);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАгента")            , 15);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАгента")           , 16);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаАзартныхИгр")       , 17);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаАзартныхИгр")      , 18);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВключениеРежимаЛотереи")           , 19);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ВыключениеРежимаЛотереи")          , 20);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.ИзменениеВерсииФФД")               , 21);
	ПричиныИзмененияСведенийККТ.Вставить(ПредопределенноеЗначение("Перечисление.ПричиныИзмененияСведенийККТ.Иное")                             , 31);
	
	Возврат ПричиныИзмененияСведенийККТ.Получить(ПричинаИзмененияСведенийККТ);
	
КонецФункции

// Получить код типа маркировки ККТ по коду.
// 
Функция КодТипаМаркировкиККТ(ТипМаркировкиККТ) Экспорт
	
	ТипыМаркировкиККТ = Новый Соответствие(); 
	
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха")         , "02");
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты"), "03");
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция")     , "05");
	ТипыМаркировкиККТ.Вставить(ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары")         , "1520");
	
	Возврат ТипыМаркировкиККТ.Получить(ТипМаркировкиККТ);
	
КонецФункции

// Получить код типа маркировки ККТ.
// 
Функция ТипМаркировкиККТПоКоду(КодТипМаркировкиККТ) Экспорт
	
	ТипыМаркировкиККТ = Новый Соответствие(); 
	
	ТипыМаркировкиККТ.Вставить("02"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ИзделияИзМеха"));
	ТипыМаркировкиККТ.Вставить("03"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ЛекарственныеПрепараты"));
	ТипыМаркировкиККТ.Вставить("05"  , ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ТабачнаяПродукция"));
	ТипыМаркировкиККТ.Вставить("1520", ПредопределенноеЗначение("Перечисление.ТипыМаркировкиККТ.ОбувныеТовары"));
	
	Возврат ТипыМаркировкиККТ.Получить(КодТипМаркировкиККТ);
	
КонецФункции

// Заполняет структуру параметров выполнения операции.
//
Функция ПараметрыВыполненияОперации() Экспорт;
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("КассирФИО"       , ""); // Строка,Необязательно - ФИО лица осуществившего операцию.
	ПараметрыОперации.Вставить("КассирИНН"       , Неопределено); // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	ПараметрыОперации.Вставить("КассирДолжность" , НСтр("ru='Администратор'")); // Строка,Необязательно - Должность лица осуществившего операцию.
	ПараметрыОперации.Вставить("Кассир");
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру данных агента.
//
Функция ПараметрыДанныеАгента() Экспорт
	
	// ФФД - Значения реквизита «данные агента» (тег 1223) указаны в таблице 22.
	Параметры = Новый Структура();
	
	ПлатежныйАгент = Новый Структура();
	ПлатежныйАгент.Вставить("Операция", Неопределено);  // Строка - Операция платежного агента.
	ПлатежныйАгент.Вставить("Телефон" , Неопределено);  // Строка - Телефон платежного агента.
	Параметры.Вставить("ПлатежныйАгент", ПлатежныйАгент);
	
	ОператорПеревода = Новый Структура();
	ОператорПеревода.Вставить("Телефон"     , Неопределено); // Строка - Телефон оператора перевода.
	ОператорПеревода.Вставить("Наименование", Неопределено); // Строка - Наименование оператора перевода.
	ОператорПеревода.Вставить("Адрес"       , Неопределено); // Строка - Адрес оператора перевода.
	ОператорПеревода.Вставить("ИНН"         , Неопределено); // Строка - ИНН оператора перевода.
	Параметры.Вставить("ОператорПеревода", ОператорПеревода);
	
	ОператорПоПриемуПлатежей = Новый Структура();
	ОператорПоПриемуПлатежей.Вставить("Телефон", Неопределено); // Строка - Телефон оператора по приему платежей.
	Параметры.Вставить("ОператорПоПриемуПлатежей", ОператорПоПриемуПлатежей);
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных поставщика.
//
Функция ПараметрыДанныеПоставщика() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Телефон");      // Строка - Телефон поставщика.
	Параметры.Вставить("Наименование"); // Строка - Наименование поставщика.
	Параметры.Вставить("ИНН");          // Строка - ИНН поставщика.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру данных кода товарной номенклатуры.
//
Функция ПараметрыДанныеКодаТоварнойНоменклатуры() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ТипМаркировки"); // Перечисление.ТипыМаркировкиККТ, Обязательно - Тип маркировки. 
	Параметры.Вставить("КонтрольныйИдентификационныйЗнак");       // Строка,Необязательно - Контрольный идентификационный знак (КиЗ).
	Параметры.Вставить("ГлобальныйИдентификаторТорговойЕдиницы"); // Строка,Необязательно - Глобальный идентификатор торговой единицы (GTIN).
	Параметры.Вставить("СерийныйНомер"); // Строка,Необязательно - Серийный номер.
	Параметры.Вставить("КодКонтрольнойМарки"); // Строка,Необязательно - Код контрольной марки.
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров операции фискализации чека.
//
Функция ПараметрыОперацииФискализацииЧека() Экспорт;                       
	
	ПараметрыЧека = ПараметрыВыполненияОперации();
	// Общие реквизиты для всех типов оборудования.
	ПараметрыЧека.Вставить("ДокументОснование" , Неопределено); // Ссылка,Обязательно. Документ по которому пробивается чек.
	ПараметрыЧека.Вставить("Электронно"        , Ложь); // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("ТипРасчета"        , ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств")); // Обязательно.
	ПараметрыЧека.Вставить("Отправляет1СSMS"   , Ложь); // Булево,Обязательно - SMS отправляет средствами 1C.   Ложь-Значение по умолчанию.
	ПараметрыЧека.Вставить("Отправляет1СEmail" , Ложь); // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	
	// Системы налогообложения - "Перечисление.ТипыСистемНалогообложенияККТ"
	ПараметрыЧека.Вставить("СистемаНалогообложения", ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН")); // Обязательно. Заполняется значением по умолчанию.  
	ПараметрыЧека.Вставить("АдресРасчетов"     ); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыЧека.Вставить("МестоРасчетов"     ); // Строка,Необязательно - Место расчетов (Тег 1187).
	ПараметрыЧека.Вставить("ОтправительEmail"  ); // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	ПараметрыЧека.Вставить("ПокупательEmail"   ); // Строка,Необязательно - Адрес электронной почты покупателя.
	ПараметрыЧека.Вставить("ПокупательНомер"   ); // Строка,Необязательно - Телефонный номер покупателя.
	
	// Признак агента - "Перечисление.ПризнакиАгента", (ФФД, Тег 1057, Расшифровка - таблица 10)
	ПараметрыЧека.Вставить("ПризнакАгента"     , Неопределено); // Перечисление - Признак агента (Тег 1057).
	ПараметрыЧека.Вставить("ДанныеАгента"      , ПараметрыДанныеАгента());     // Структура,Заполнение необязательно - Данные агента.
	ПараметрыЧека.Вставить("ДанныеПоставщика"  , ПараметрыДанныеПоставщика()); // Структура,Заполнение необязательно - Данные поставщика.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыЧека.Вставить("Получатель"         );  // Строка,Необязательно - Получатель (покупатель)	
	ПараметрыЧека.Вставить("ПолучательИНН"      );  // Строка,Необязательно - ИНН получателя (ИНН покупателя)	
	
	// Параметры необходимые для ФР
	ПараметрыЧека.Вставить("СерийныйНомер"       ); // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыЧека.Вставить("ОрганизацияНазвание" ); // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияИНН"      ); // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ОрганизацияКПП"      ); // Строка,Необязательно - КПП организации (Для чека ЕНВД).
	ПараметрыЧека.Вставить("АдресМагазина"       ); // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НаименованиеМагазина"); // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерКассы"          ); // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерЧека"           ); // Строка,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.Вставить("НомерСмены"          ); // Строка,Необязательно - Номер смены (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ДатаВремя", ТекущаяДата()); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	ПараметрыЧека.Вставить("ТекстШапки"   , НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"));   // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("ТекстПодвала" , НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'")); // Строка - заполняется значением по умолчанию. 
	ПараметрыЧека.Вставить("КопийЧека"    , 1); // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.
	
	// Позиции чека для фискализациию
	ПараметрыЧека.Вставить("ПозицииЧека"  , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Таблица оплаты чека
	ПараметрыЧека.Вставить("ТаблицаОплат" , Новый Массив()); // Массив элементов "Структура". Обязательно.
	// Пример заполнения строки оплаты:
	// СтрокаОплаты = Новый Структура();
	// СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); // Наличные
	// СтрокаОплаты.Вставить("Сумма", СуммаВидаОплаты);
	// ПараметрыЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ПараметрыЧека.Вставить("ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД", Ложь); // Булево,Необязательно - устанавливается значение по умолчанию. 
	ПараметрыЧека.Вставить("ДополнительныйРеквизит", Неопределено); // Строка,Необязательно - Дополнительный реквизит Тег 1192.
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров фискальной строки для фискализации чека.
//
Функция ПараметрыФискальнойСтрокиЧека() Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ФискальнаяСтрока");  // Строка,Обязательно - Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("НомерСтрокиТовара"); // Число,Обязательно  - Дополнительный параметр для обработки строк чека для форматно-логического контроля.
	// Обязательные реквизиты
	ПараметрыСтроки.Вставить("Наименование");        // Строка,Обязательно  - Наименование предмета расчета
	ПараметрыСтроки.Вставить("Количество"     , 0);  // Число,Обязательно   - Количество предмета расчета 
	ПараметрыСтроки.Вставить("Цена"           , 0);  // Число,Обязательно   - Цена без учета скидок и наценок (Необходимо для ФР и ФФД 1.0)
	ПараметрыСтроки.Вставить("ЦенаСоСкидками" , 0);  // Число,Обязательно   - Цена с учета скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
	ПараметрыСтроки.Вставить("Сумма"          , 0);  // Число,Обязательно   - Стоимость предмета расчета с учетом скидок и наценок
	ПараметрыСтроки.Вставить("СуммаСкидок");         // Число,Необязательно - Сумма скидок и наценок, не входит в ФФД.
	ПараметрыСтроки.Вставить("СтавкаНДС" , Неопределено); // Число,Обязательно   - Ставка НДС (Значения: Неопределено-БезНДС, 0, 10, 20, 18, 110, 118, 120)
	ПараметрыСтроки.Вставить("СуммаНДС"  , Неопределено); // Число,Необязательно - Сумма НДС
	
	// Реквизиты начиная с ФФД 1.0.5
	// Перечисление - ПризнакиСпособаРасчета - (ФФД, Тег 1214, Расшифровка - таблица 28)
	ПараметрыСтроки.Вставить("ПризнакСпособаРасчета", Неопределено); // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
	                                         
	// Реквизиты начиная с ФФД 1.1
	// Перечисление - ПризнакиПредметаРасчета - (ФФД, Тег 1030, Расшифровка - таблица 29)
	ПараметрыСтроки.Вставить("ПризнакПредметаРасчета", Неопределено); // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
	
	// Перечисление - ПризнакиАгента - (ФФД, Тег 1222, Расшифровка - таблица 21)
	ПараметрыСтроки.Вставить("ПризнакАгентаПоПредметуРасчета");  // Необязательно, Признак агента по предмету расчета, Тег 1222.
	ПараметрыСтроки.Вставить("ДанныеАгента"     , ПараметрыДанныеАгента());     // Структура - Данные агента, Тег 1223. Заполнение необязательно.
	ПараметрыСтроки.Вставить("ДанныеПоставщика" , ПараметрыДанныеПоставщика()); // Структура - Данные агента, Тег 1224. Заполнение необязательно.
	
	ПараметрыСтроки.Вставить("ЕдиницаИзмерения");         // Необязательно, Единица измерения предмета расчета. 
	ПараметрыСтроки.Вставить("КодТоварнойНоменклатуры");  // Необязательно, Код товарной номенклатуры.
	ПараметрыСтроки.Вставить("ДанныеКодаТоварнойНоменклатуры", ПараметрыДанныеКодаТоварнойНоменклатуры());  // Коды товарной номенклатуры.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыСтроки.Вставить("КодСтраныПроисхожденияТовара"); // Строка,Необязательно - Цифровой код страны происхождения товара в соответствии с Общероссийским классификатором стран мира.
	ПараметрыСтроки.Вставить("НомерТаможеннойДекларации");    // Строка,Необязательно - Регистрационный номер таможенной декларации.
	ПараметрыСтроки.Вставить("СуммаАкциза");                  // Число,Необязательно  - Cумма акциза, включенная в стоимость предмета расчета.
	
	// Дополнительные реквизиты не входящие в ФФД.
	ПараметрыСтроки.Вставить("НомерСекции" , 0);   // Число,Необязательно  - Номер секции ФР (для совместимости), 0-Значение по умолчанию.
	ПараметрыСтроки.Вставить("Штрихкод");          // Строка,Необязательно - Штрихкод
	
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров текстовой строки для фискализации чека.
//
Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока");       // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("Текст", Текст);          // Строка,Обязательно   - Текстовая строка
	ПараметрыСтроки.Вставить("ПереносСтроки", Ложь);   // Булево,Необязательно - Перенос строки, устанавливается значение по умолчанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , "Лево"); // Строка,Необязательно - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров штрихкода в строке для фискализации чека.
//
Функция ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкодаЗнач = Неопределено, ШтрихКодЗнач = Неопределено) Экспорт;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ШтрихКод"); // Тип строки. Исходящий служебный параметр. 
	ПараметрыСтроки.Вставить("ТипШтрихкода", ТипШтрихкодаЗнач); // Строка,Обязательно - Тип штрихкода.  
	ПараметрыСтроки.Вставить("ШтрихКод"    , ШтрихКодЗнач);     // Строка,Обязательно - Значение штрихкода.
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
Функция ПараметрыСтрокиОплаты() Экспорт
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные")); 
	ПараметрыСтроки.Вставить("Сумма"    , 0);
	Возврат ПараметрыСтроки; 
	
КонецФункции

// Заполняет структуру параметров строки оплаты.
//
Функция ПараметрыДанныеКоррекции()  Экспорт
	
	ДанныеКоррекции = Новый Структура();
	ДанныеКоррекции.Вставить("ТипКоррекции", 0);   // Число,Обязательно     - Тип коррекции: 0-самостоятельно, 1-по предписанию.
	ДанныеКоррекции.Вставить("ОписаниеКоррекции"); // Строка,Необязательно  - Описание коррекции.
	ДанныеКоррекции.Вставить("ДатаКоррекции");     // ДатаВремя,Обязательно - Дата совершения корректируемого расчета.
	ДанныеКоррекции.Вставить("НомерПредписания");  // Строка,Обязательно    - Номер предписания налогового органа.
	Возврат ДанныеКоррекции; 
	
КонецФункции

// Заполняет структуру параметров выполнения операции чека коррекции.
//
Функция ПараметрыОперацииЧекаКоррекции() Экспорт;
	
	ПараметрыЧека = ПараметрыОперацииФискализацииЧека();
	
	ПараметрыЧека.Вставить("НеприменениеККТ", Истина); 
	ПараметрыЧека.Вставить("ДанныеКоррекции", ПараметрыДанныеКоррекции()); 
	
	Возврат ПараметрыЧека; 
	
КонецФункции

// Заполняет структуру параметров открытия и закрытия смены.
//
Функция ПараметрыОткрытияЗакрытияСмены() Экспорт;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	
	ПараметрыОперации.Вставить("АдресРасчетов"); // Строка,Необязательно - Адрес расчетов (Тег 1009).
	ПараметрыОперации.Вставить("МестоРасчетов"); // Строка,Необязательно - Место расчетов (Тег 1187).
	
	Возврат ПараметрыОперации; 
	
КонецФункции

// Заполняет структуру общих параметров фискального накопителя.
//
Функция ПараметрыФискальногоНакопителяОбщие() Экспорт
	
	Параметры = ПараметрыВыполненияОперации();
	// ФФД 1.0
	Параметры.Вставить("РегистрационныйНомерККТ");
	Параметры.Вставить("ОрганизацияНазвание");
	Параметры.Вставить("ОрганизацияИНН");
	Параметры.Вставить("АдресУстановкиККТ");
	Параметры.Вставить("КодыСистемыНалогообложения");
	Параметры.Вставить("ПризнакАвтономногоРежима"      , Ложь);
	Параметры.Вставить("ПризнакАвтоматическогоРежима"  , Ложь);
	Параметры.Вставить("НомерАвтоматаДляАвтоматическогоРежима");
	Параметры.Вставить("ПризнакШифрованиеДанных"       , Ложь);
	Параметры.Вставить("ПризнакРасчетовЗаУслуги"       , Ложь);
	Параметры.Вставить("ПризнакФормированияТолькоБСО"  , Ложь);
	Параметры.Вставить("ПризнакРасчетовТолькоВИнтернет", Ложь);
	Параметры.Вставить("ОрганизацияОФДИНН");
	Параметры.Вставить("ОрганизацияОФДНазвание");
	// ФФД 1.0.5 & 1.1
 	Параметры.Вставить("МестоПроведенияРасчетов");
	Параметры.Вставить("ПродажаПодакцизногоТовара" , Ложь); 
	Параметры.Вставить("ПроведенияАзартныхИгр"     , Ложь); 
	Параметры.Вставить("ПроведенияЛотерей"         , Ложь); 
	Параметры.Вставить("ПризнакиАгента");  
	Параметры.Вставить("УстановкаПринтераВАвтомате", Ложь);
	Параметры.Вставить("ОтправительEmail");
	Параметры.Вставить("АдресСайтаФНС");
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров Фискализации ФН.
//
Функция ПараметрыОперацииФискализацииНакопителя() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("КодПричиныПеререгистрации"); 
	Параметры.Вставить("КодыПричинИзмененияСведений"); 
	Параметры.Вставить("ТипОперации", 1);
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров регистрации ККТ.
//
Функция ПараметрыРегистрацииККТ() Экспорт
	
	Параметры = ПараметрыФискальногоНакопителяОбщие();
	Параметры.Вставить("ЗаводскойНомерККТ");
	Параметры.Вставить("ПризнакФискализации");
	Параметры.Вставить("ЗаводскойНомерФН");
	Параметры.Вставить("НомерДокументаФискализации");
	Параметры.Вставить("ДатаВремяФискализации");
	Параметры.Вставить("ВерсияФФДККТ");
	Параметры.Вставить("ВерсияФФДФН");
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров состояния ККТ.
//
Функция ПараметрыСостоянияККТ() Экспорт;
	
	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов (BacklogDocumentsCounter).
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено);  // Номер первого непереданного документа (BacklogDocumentFirstNumber). 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов (BacklogDocumentFirstDateTime).
	
	Возврат Параметры; 
	
КонецФункции

// Заполняет структуру параметров нормализуемых фискальных данных.
//
Функция ПараметрыНормализуемыхФискальныхДанных() Экспорт
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ДатаСменыККТ"   , Неопределено);
	СтруктураРезультат.Вставить("НомерСменыККТ"  , Неопределено);
	СтруктураРезультат.Вставить("КоличествоЧеков", Неопределено); // Количество кассовых чеков за смену (NumberOfChecks).
	СтруктураРезультат.Вставить("КоличествоФД"   , Неопределено); // Количество общее ФД за смену (NumberOfDocuments).
	
	СтруктураРезультат.Вставить("КоличествоНепереданныхФД"   , Неопределено); // Количество непереданных документов (BacklogDocumentsCounter).
	СтруктураРезультат.Вставить("НомерПервогоНепереданногоФД", Неопределено); // Номер первого непереданного документа (BacklogDocumentFirstNumber). 
	СтруктураРезультат.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); // Дата и время первого из непереданных документов (BacklogDocumentFirstDateTime).

	СтруктураРезультат.Вставить("ПревышеноВремяОжиданияОтветаОФД");// OFDTimeout  
	СтруктураРезультат.Вставить("НеобходимаСтрочнаяЗаменаФН");     // Признак необходимости срочной замены ФН (UrgentReplacementFN).
	СтруктураРезультат.Вставить("ПамятьФНПереполнена");            // Признак переполнения памяти ФН (MemoryOverflowFN).
	СтруктураРезультат.Вставить("РесурсФНИсчерпан");               // Признак исчерпания ресурса ФН (ResourcesExhaustionFN).
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция заполняет наименование рабочего места клиента по имени пользователя.
//
Процедура ЗаполнитьНаименованиеРабочегоМеста(Объект, ИмяПользователя) Экспорт
	
	ИмяПустойПользователь = НСтр("ru='<Пользователь>'");
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		Если ПустаяСтрока(ИмяПользователя) Тогда
			Объект.Наименование = "<" + ИмяПустойПользователь + ">";
		Иначе
			Объект.Наименование = Строка(ИмяПользователя);
		КонецЕсли;
		Объект.Наименование = Объект.Наименование + "(" + Объект.Код + ")";
		
	ИначеЕсли Не ПустаяСтрока(Строка(ИмяПользователя)) И Найти(Объект.Наименование, ИмяПустойПользователь) > 0 Тогда
		Объект.Наименование = СтрЗаменить(Объект.Наименование, ИмяПустойПользователь, Строка(ИмяПользователя));
	КонецЕсли;

КонецПроцедуры

// Функция формирует информационный чек.
//
Функция СформироватьИнформационныйЧек(ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено, ПараметрыШтрихкода = Неопределено) Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Текст = "";
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Текст = Разделитель;
	// Сформировать шапку чека.
	Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
		Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
	КонецЕсли;
		
	Если ОбщиеПараметры.Свойство("АдресРасчетов") Тогда
		АдресРасчетов = ОбщиеПараметры.АдресРасчетов;
		Если НЕ ПустаяСтрока(АдресРасчетов) Тогда
			Текст = Текст + ПостроитьПолеПереносом(АдресРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
			Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда
				Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.МестоРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
			КонецЕсли;
		ИначеЕсли ОбщиеПараметры.Свойство("АдресМагазина") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресМагазина) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.АдресМагазина, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
		
	Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
		Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст +  ВыстроитьПоля(НСтр("ru='ИНФОРМАЦИОННЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		
	НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека), НСтр("ru='№'") + ОбщиеПараметры.НомерЧека, "");
	ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
	ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	
	Текст = Текст + РазделительВнут;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека   = 0;  
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				
				Если ПозицияЧека.ЦенаСоСкидками = 0 И ПозицияЧека.Сумма > 0 И ПозицияЧека.Количество > 0 Тогда
					ЦенаСоСкидками = Окр(ПозицияЧека.Сумма / ПозицияЧека.Количество, 2); 
				Иначе
					ЦенаСоСкидками = ПозицияЧека.ЦенаСоСкидками; 
				КонецЕсли;
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.000;ЧГ=0") + " х " 
					+ Формат(ЦенаСоСкидками, ФорматЧисла) + " =" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = ТекстСтроки + ВыстроитьПоля( , СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Текст = Текст + ТекстСтроки;        
				СуммаЧека = СуммаЧека + Сумма;
				
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Текст = Текст + РазделительВнут;
	Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
	Текст = Текст + РазделительВнут;
		
	Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
		Текст = Текст + ДополнительныйТекст + Символы.ПС;
		Текст = Текст + Разделитель + Символы.ПС;
	КонецЕсли;
	                                       
	Если ПараметрыШтрихкода <> Неопределено И ПараметрыШтрихкода.Свойство("ШтрихКод") Тогда
		СтрокаШтрихкода = "|ШтрихКод|" + ПараметрыШтрихкода.ТипШтрихкода + "|" + ПараметрыШтрихкода.ШтрихКод; 
		Текст = Текст + Символы.ПС + СтрокаШтрихкода + Символы.ПС; 
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст нефискального документа по шаблону.
//
Функция СформироватьТекстНефискальногоДокумента(ТипДокумента, ОбщиеПараметры, ШиринаСтроки = 32, ДополнительныйТекст = Неопределено, ФорматФФД = "1.1", ТолькоТабличнаяЧасть = Ложь) Экспорт
	
	ПозицииЧека  = ?(ОбщиеПараметры.Свойство("ПозицииЧека"), ОбщиеПараметры.ПозицииЧека, Неопределено);
	ТаблицаОплат = ?(ОбщиеПараметры.Свойство("ТаблицаОплат"), ОбщиеПараметры.ТаблицаОплат, Неопределено);
	
	Если ТипДокумента = 0 Тогда
		ТипыЧеков = Новый Соответствие();
		ТипыЧеков.Вставить(1, НСтр("ru='ПРИХОД'"));          // Чек продажи     
		ТипыЧеков.Вставить(2, НСтр("ru='ВОЗВРАТ ПРИХОДА'")); // Чек возврата продажи 
		ТипыЧеков.Вставить(3, НСтр("ru='РАСХОД'"));          // Чек покупки 
		ТипыЧеков.Вставить(4, НСтр("ru='ВОЗВРАТ РАСХОДА'")); // Чек возврата покупки 
		Если ОбщиеПараметры.Свойство("ТипРасчета") Тогда
			ТипЧека = ТипыЧеков.Получить(МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета))
		Иначе
			ТипЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ ДОКУМЕНТ'");  
		КонецЕсли;
	ИначеЕсли ТипДокумента = 1 Тогда
		ТипЧека = НСтр("ru='ОТКРЫТИЕ СМЕНЫ'");  
	ИначеЕсли ТипДокумента = 2 Тогда
		ТипЧека = НСтр("ru='ВНЕСЕНИЕ'");  
	ИначеЕсли ТипДокумента = 3 Тогда
		ТипЧека = НСтр("ru='ВЫЕМКА'");  
	ИначеЕсли ТипДокумента = 4 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ БЕЗ ГАШЕНИЯ'");   
	ИначеЕсли ТипДокумента = 5 Тогда
		ТипЧека = НСтр("ru='ОТЧЕТ С ГАШЕНИЕМ'");  
	КонецЕсли;
	
	Текст = "";
	
	Разделитель = ПостроитьПоле("", ШиринаСтроки, "=") + Символы.ПС;
	РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
	
	Если НЕ ТолькоТабличнаяЧасть Тогда 
		Текст = Разделитель;
		// Сформировать шапку чека.
		Если ОбщиеПараметры.Свойство("ОрганизацияНазвание") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияНазвание) Тогда
			Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.ОрганизацияНазвание, ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		
		Если ОбщиеПараметры.Свойство("АдресРасчетов") Тогда
			АдресРасчетов = ОбщиеПараметры.АдресРасчетов;
			Если НЕ ПустаяСтрока(АдресРасчетов) Тогда
				Текст = Текст + ПостроитьПолеПереносом(АдресРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				Если ОбщиеПараметры.Свойство("МестоРасчетов") И НЕ ПустаяСтрока(ОбщиеПараметры.МестоРасчетов) Тогда
					Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.МестоРасчетов, ШиринаСтроки, , Истина) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ОбщиеПараметры.Свойство("АдресМагазина") И НЕ ПустаяСтрока(ОбщиеПараметры.АдресМагазина) Тогда
				Текст = Текст + ПостроитьПолеПереносом(ОбщиеПараметры.АдресМагазина, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
			
		Если ОбщиеПараметры.Свойство("ТекстШапки") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстШапки) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстШапки, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если ТипДокумента = 0 Тогда 
			Текст = Текст +  ВыстроитьПоля(НСтр("ru='КАССОВЫЙ ЧЕК'"), , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ОрганизацияИНН = ?(ОбщиеПараметры.Свойство("ОрганизацияИНН") И НЕ ПустаяСтрока(ОбщиеПараметры.ОрганизацияИНН), 
			НСтр("ru='ИНН'") + Символы.НПП + ОбщиеПараметры.ОрганизацияИНН, "");
			
		НомерЧека = ?(ОбщиеПараметры.Свойство("НомерЧека") И НЕ ПустаяСтрока(ОбщиеПараметры.НомерЧека),
			НСтр("ru='ЧЕК №'") + ОбщиеПараметры.НомерЧека, "");
			
		Если Не ПустаяСтрока(ОрганизацияИНН) Тогда
			Текст = Текст + ВыстроитьПоля(ТипЧека, ОрганизацияИНН, ШиринаСтроки) + Символы.ПС;
		Иначе
			Текст = Текст + ПостроитьПоле(ТипЧека, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ДатаВремя = ?(ОбщиеПараметры.Свойство("ДатаВремя") И НЕ ПустаяСтрока(ОбщиеПараметры.ДатаВремя), ОбщиеПараметры.ДатаВремя, ТекущаяДата());
		ДатаВремя = Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
		
		Если ТипДокумента = 0  Тогда
		
			Если НЕ ПустаяСтрока(ОбщиеПараметры.Получатель) Тогда
				Текст = Текст + ПостроитьПоле(" " + НСтр("ru='ПОКУПАТЕЛЬ:'") + ОбщиеПараметры.Получатель, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ПолучательИНН) Тогда
				Текст = Текст + ПостроитьПоле(" " + НСтр("ru='ИНН ПОКУПАТЕЛЯ:'") + ОбщиеПараметры.ПолучательИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ПризнакАгента) Тогда
				Текст = Текст + ПостроитьПоле(" " + ВРег(Строка(ОбщиеПараметры.ПризнакАгента)), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеПоставщика.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТАВЩИК:'"), ОбщиеПараметры.ДанныеПоставщика.Наименование, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеПоставщика.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТАВЩИК ТЛФ:'"), ОбщиеПараметры.ДанныеПоставщика.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеПоставщика.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТАВЩИК ИНН:'"), ОбщиеПараметры.ДанныеПоставщика.ИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПЛ.АГЕНТ ОПЕР.:'"), ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Операция, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля("  " + НСтр("ru='ПЛ.АГЕНТ.ТЛФ.:'"), ОбщиеПараметры.ДанныеАгента.ПлатежныйАгент.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ОПЕРАТОР ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Наименование, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля("   " + НСтр("ru='ТЛФ.ОП.ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес) Тогда
				Текст = Текст + ВыстроитьПоля("   " + НСтр("ru='АДР.ОП.ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.Адрес, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН) Тогда
				Текст = Текст + ВыстроитьПоля("   " + НСтр("ru='ИНН ОП.ПЕРЕВОДА:'"), ОбщиеПараметры.ДанныеАгента.ОператорПеревода.ИНН, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ОПЕР.ПО ПРИЕМУ ПЛАТ.ТЛФ:'"), ОбщиеПараметры.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
		Текст = Текст + РазделительВнут;
	КонецЕсли;
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	СуммаЧека   = 0;
	СуммаПозицийНДС0   = 0;
	СуммаПозицийНДС10  = 0;
	СуммаПозицийНДС18  = 0;
	СуммаПозицийНДС20  = 0;
	СуммаПозицийНДС110 = 0;
	СуммаПозицийНДС118 = 0;
	СуммаПозицийНДС120 = 0;
	СуммаПозицийБезНДС = 0;
	СуммаНДС0   = 0;
	СуммаНДС10  = 0;
	СуммаНДС18  = 0;
	СуммаНДС20  = 0;
	СуммаНДС110 = 0;
	СуммаНДС118 = 0;
	СуммаНДС120 = 0;
	СуммаБезНДС = 0;
	
	// Формируем строки чека.
	Если ПозицииЧека <> Неопределено Тогда
		
		Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
			
			ПозицияЧека = ПозицииЧека[ИндексМассива];
			
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				Наименование = ?(ПозицияЧека.Свойство("Наименование"), ПозицияЧека.Наименование, "");
				Количество   = ?(ПозицияЧека.Свойство("Количество")  , ПозицияЧека.Количество  , 1);
				Цена         = ?(ПозицияЧека.Свойство("Цена")        , ПозицияЧека.Цена        , 0);
				Сумма        = ?(ПозицияЧека.Свойство("Сумма")       , ПозицияЧека.Сумма       , 0);
				НомерСекции  = ?(ПозицияЧека.Свойство("НомерСекции") , ПозицияЧека.НомерСекции , 0);
				СтавкаНДС    = ?(ПозицияЧека.Свойство("СтавкаНДС")   , ПозицияЧека.СтавкаНДС   , 0);
				СуммаНДС     = ?(ПозицияЧека.Свойство("СуммаНДС")    , ?(ПустаяСтрока(ПозицияЧека.СуммаНДС), 0, ПозицияЧека.СуммаНДС), 0);
				СуммаСкидок  = ?(ПозицияЧека.Свойство("СуммаСкидок") , ?(ПустаяСтрока(ПозицияЧека.СуммаСкидок), 0, ПозицияЧека.СуммаСкидок), 0);
				
				ТекстСтроки  = ПостроитьПолеПереносом(Наименование, ШиринаСтроки) + Символы.ПС;
				ЦенаДляПечати = Окр(Сумма / Количество , 2);
				
				СтрокаТовара = Формат(Количество, "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.000;ЧГ=0") + " х " 
					+ Формат(ЦенаДляПечати, ФорматЧисла) + " =" + Формат(Сумма, ФорматЧисла);
				ТекстСтроки = ТекстСтроки + ВыстроитьПоля( , СтрокаТовара, ШиринаСтроки) + Символы.ПС;
				
				Если СуммаСкидок > 0 Тогда
					ТекстСкидки = НСтр("ru='СКИДКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				ИначеЕсли СуммаСкидок < 0 Тогда
					ТекстСкидки = НСтр("ru='НАДБАВКА'") + "=" + Формат(СуммаСкидок, ФорматЧисла);
				Иначе
					ТекстСкидки = "";
				КонецЕсли;
				
				ТекстНалога = "";
				Если ПозицияЧека.Свойство("СтавкаНДС") Тогда
					Если ПозицияЧека.СтавкаНДС = 10 Тогда
						СуммаПозицийНДС10 = СуммаПозицийНДС10 + Сумма;
						СуммаНДС10 = СуммаНДС10 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 10%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 18 Тогда
						СуммаПозицийНДС18  = СуммаПозицийНДС18 + Сумма; 
						СуммаНДС18 = СуммаНДС18 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 18%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 20 Тогда
						СуммаПозицийНДС20  = СуммаПозицийНДС20 + Сумма; 
						СуммаНДС20 = СуммаНДС20 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 20%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 0 Тогда
						СуммаПозицийНДС0 = СуммаПозицийНДС0 + Сумма;
						СуммаНДС0 = СуммаНДС0 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 0%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда
						СуммаПозицийНДС110 = СуммаПозицийНДС110 + Сумма;
						СуммаНДС110 = СуммаНДС110 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 10/110%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 118 Тогда
						СуммаПозицийНДС118 = СуммаПозицийНДС118 + Сумма;
						СуммаНДС118 = СуммаНДС118 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 18/118%'");
					ИначеЕсли ПозицияЧека.СтавкаНДС = 120 Тогда
						СуммаПозицийНДС120 = СуммаПозицийНДС120 + Сумма;
						СуммаНДС120 = СуммаНДС120 + СуммаНДС;
						ТекстНалога = НСтр("ru='НДС 20/120%'");
					Иначе 
						СуммаПозицийБезНДС = СуммаПозицийБезНДС + Сумма;
						СуммаБезНДС = СуммаБезНДС + Сумма;
						ТекстНалога = НСтр("ru='БЕЗ НДС'");
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(ТекстСкидки) Тогда
					ТекстСтроки = ТекстСтроки + ПостроитьПоле(" " + ТекстНалога, ШиринаСтроки) + Символы.ПС;
				Иначе
					ТекстСтроки = ТекстСтроки + ВыстроитьПоля(" " + ТекстНалога, ТекстСкидки, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Текст = Текст + ТекстСтроки;        
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакПредметаРасчета) И ФорматФФД = "1.1" Тогда
					ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(ПозицияЧека.ПризнакПредметаРасчета);
					ПризнакПредметаРасчетаНаименование = МенеджерОборудованияКлиентСервер.НаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчета);
					Текст = Текст + ПостроитьПоле(" " + ПризнакПредметаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакСпособаРасчета) И ФорматФФД <> "1.0" Тогда
					ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(ПозицияЧека.ПризнакСпособаРасчета);
					ПризнакСпособаРасчетаНаименование = МенеджерОборудованияКлиентСервер.НаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета);
					Текст = Текст + ПостроитьПоле(" " + ПризнакСпособаРасчетаНаименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если ФорматФФД = "1.1" Тогда
					КТ = "";
					ДанныеКодаТоварнойНоменклатуры = ПозицияЧека.ДанныеКодаТоварнойНоменклатуры;
					Если НЕ ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки) Тогда // Тип маркировки.
						КТ = МенеджерОборудованияКлиентСервер.КодТипаМаркировкиККТ(ДанныеКодаТоварнойНоменклатуры.ТипМаркировки);
					КонецЕсли;
					Если НЕ ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак) Тогда // Контрольный идентификационный знак (КиЗ).
						КТ = КТ + " " + ДанныеКодаТоварнойНоменклатуры.КонтрольныйИдентификационныйЗнак;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы) Тогда // Глобальный идентификатор торговой единицы (GTIN).
						ЗКТ = КТ + " " + ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ДанныеКодаТоварнойНоменклатуры.СерийныйНомер) Тогда // Серийный номер.
						КТ = КТ + " " + ДанныеКодаТоварнойНоменклатуры.СерийныйНомер;
					КонецЕсли;
					Если НЕ ПустаяСтрока(КТ) Тогда
						Текст = Текст + ПостроитьПоле(" " + НСтр("ru='КТ:'") + КТ, ШиринаСтроки) + Символы.ПС;
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(ПозицияЧека.КодСтраныПроисхожденияТовара) Тогда
						Текст = Текст + ПостроитьПоле(" " + НСтр("ru='КОД СТРАНЫ:'") + ПозицияЧека.КодСтраныПроисхожденияТовара, ШиринаСтроки) + Символы.ПС;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ПозицияЧека.НомерТаможеннойДекларации) Тогда
						Текст = Текст + ПостроитьПоле(" " + НСтр("ru='ДЕКЛАРАЦИЯ:'") + ПозицияЧека.НомерТаможеннойДекларации, ШиринаСтроки) + Символы.ПС;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ПозицияЧека.СуммаАкциза) И ПозицияЧека.СуммаАкциза > 0 Тогда
						Текст = Текст + ПостроитьПоле(" " + НСтр("ru='АКЦИЗ:'") + ПозицияЧека.СуммаАкциза, ШиринаСтроки) + Символы.ПС;
					КонецЕсли;
					Если НЕ ПустаяСтрока(ПозицияЧека.ЕдиницаИзмерения) Тогда
						Текст = Текст + ПостроитьПоле(" " + НСтр("ru='ЕД.ИЗМЕРЕНИЯ:'") + ПозицияЧека.ЕдиницаИзмерения, ШиринаСтроки) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ПризнакАгентаПоПредметуРасчета) Тогда
					Текст = Текст + ПостроитьПоле(" " + ВРег(Строка(ПозицияЧека.ПризнакАгентаПоПредметуРасчета)), ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТАВЩИК:'"), ПозицияЧека.ДанныеПоставщика.Наименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСТАВЩИК ТЛФ.:'"), ПозицияЧека.ДанныеПоставщика.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля("  " + НСтр("ru='ПОСТАВЩИК ИНН:'"), ПозицияЧека.ДанныеПоставщика.ИНН, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция) Тогда
					Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПЛ.АГЕНТ ОПЕР.:'"), ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля(" " + НСтр("ru=' ПЛ.АГЕНТ ТЛФ.:'"), ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование) Тогда
					Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ОПЕРАТОР ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля("   " + НСтр("ru='ТЛФ.ОП.ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес) Тогда
					Текст = Текст + ВыстроитьПоля("   " + НСтр("ru='АДР.ОП.ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН) Тогда
					Текст = Текст + ВыстроитьПоля("   " + НСтр("ru='ИНН ОП.ПЕРЕВОДА:'"), ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
					Текст = Текст + ВыстроитьПоля("  " + НСтр("ru='ОПЕР.ПО ПРИЕМУ ПЛАТ.ТЛФ:'"), ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон, ШиринаСтроки) + Символы.ПС;
				КонецЕсли;
				
				СуммаЧека = СуммаЧека + Сумма;
			ИначеЕсли ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
				ТекстСтроки = ?(ПозицияЧека.Свойство("Текст"), ПозицияЧека.Текст, "");
				Текст = Текст + ТекстСтроки + Символы.ПС;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				СтрокаШтрихкода = "|ШтрихКод|" + ПозицияЧека.ТипШтрихкода + "|" + ПозицияЧека.ШтрихКод; 
				Текст = Текст + СтрокаШтрихкода + Символы.ПС; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем подвал чека
	Если НЕ ТолькоТабличнаяЧасть И ТаблицаОплат <> Неопределено Тогда
		
		СуммаНаличными       = 0;
		СуммаЭлектронными    = 0;
		СуммаПостоплатой     = 0;
		СуммаПредоплатой     = 0;
		СуммаПредоставлением = 0;
		Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
			Если ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
				СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата") Тогда
				СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата") Тогда
				СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
			ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.ВстречноеПредоставление") Тогда
				СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
			Иначе
				СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СуммаОплаты = СуммаНаличными + СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением;
	
		Текст = Текст + РазделительВнут;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ИТОГ'"), "=" + Формат(СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		Текст = Текст + НСтр("ru='ОПЛАТА'") + Символы.ПС;
		
		Если ФорматФФД = "1.0" Тогда // ФФД 1.0
			Если СуммаНаличными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаЭлектронными > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ЭЛЕКТРОННЫМИ'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
		Иначе // ФФД 1.0.5 & ФФД 1.1
		Если СуммаНаличными > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='НАЛИЧНЫМИ'"), "=" + Формат(СуммаНаличными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаЭлектронными > 0 Тогда
			Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='БЕЗНАЛИЧНЫМИ'"), "=" + Формат(СуммаЭлектронными, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПредоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПРЕДВАРИТЕЛЬНАЯ'"), "=" + Формат(СуммаПредоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
			КонецЕсли;          
			Если СуммаПостоплатой > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ПОСЛЕДУЮЩАЯ'"), "=" + Формат(СуммаПостоплатой, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		Если СуммаПредоставлением > 0 Тогда
				Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='ИНАЯ ФОРМА'"), "=" + Формат(СуммаПредоставлением, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		КонецЕсли; 
		
		Если СуммаОплаты - СуммаЧека > 0 Тогда
		Текст = Текст + ВыстроитьПоля(НСтр("ru='ПОЛУЧЕНО'"), "=" + Формат(СуммаОплаты, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(" " + НСтр("ru='СДАЧА'"), "=" + Формат(СуммаОплаты - СуммаЧека, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли; 
		
		Если ОбщиеПараметры.Свойство("СистемаНалогообложения") Тогда
			СистемаНалогообложенияКод = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
			СистемаНалогообложения = МенеджерОборудованияКлиентСервер.НаименованиеСистемыНалогообложения(СистемаНалогообложенияКод, Истина);
			Текст = Текст + ВыстроитьПоля(НСтр("ru='СНО:'"), СистемаНалогообложения, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;          
		
		Если СуммаПозицийНДС20 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС20 > 0, СуммаНДС20, СуммаПозицийНДС20 / 120 * 20);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 20%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС18 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС18 > 0, СуммаНДС18, СуммаПозицийНДС18 / 118 * 18);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС10 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС10 > 0, СуммаНДС10, СуммаПозицийНДС10 / 110 * 10);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС120 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС120 > 0, СуммаНДС120, СуммаПозицийНДС120 / 120 * 20);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 20/120%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС118 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС118 > 0, СуммаНДС118, СуммаПозицийНДС118 / 118 * 18);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 18/118%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС110 > 0 Тогда
			ЗначениеНДС = ?(СуммаНДС110 > 0, СуммаНДС110, СуммаПозицийНДС110 / 110 * 10);
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА НДС 10/110%'"), "=" + Формат(ЗначениеНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийНДС0 > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА C НДС 0%'")  , "=" + Формат(СуммаПозицийНДС0, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Если СуммаПозицийБезНДС > 0 Тогда
			Текст = Текст + ВыстроитьПоля(НСтр("ru=' СУММА БЕЗ НДС'"), "=" + Формат(СуммаПозицийБезНДС, ФорматЧисла), ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Кассир = ?(ОбщиеПараметры.Свойство("Кассир"), ОбщиеПараметры.Кассир, "");
		Текст = Текст + ПостроитьПоле(НСтр("ru='КАССИР'") + ":" + Символы.НПП + Кассир, ШиринаСтроки) + Символы.ПС + Символы.ПС;                        
		Текст = Текст + ПостроитьПоле(НСтр("ru='ПОДПИСЬ'") + ":", ШиринаСтроки, "_") + Символы.ПС;
		
		Если ОбщиеПараметры.Свойство("ТекстПодвала") И НЕ ПустаяСтрока(ОбщиеПараметры.ТекстПодвала) Тогда
			Текст = Текст + ВыстроитьПоля(ОбщиеПараметры.ТекстПодвала, , ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ ТолькоТабличнаяЧасть Тогда
		Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
			Текст = Текст + ДополнительныйТекст + Символы.ПС;
		КонецЕсли;
		Текст = Текст + Разделитель + Символы.ПС;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст нефискального чека по шаблону.
//
Функция СформироватьТекстНефискальногоЧека(ОбщиеПараметры, ШиринаСтроки = 32, ТолькоТабличнаяЧасть = Ложь) Экспорт
	
	Возврат СформироватьТекстНефискальногоДокумента(0, ОбщиеПараметры, ШиринаСтроки, , , ТолькоТабличнаяЧасть);
	
КонецФункции

// Осуществляет формирование шаблона инфо квитанции.
//
Функция СформироватьШаблонИнфоКвитанции(ПараметрыПодключения, Параметры, ПечатьШтрихкода = Истина) Экспорт
	
	АдресЧека = ?(Параметры.Свойство("АдресЧека"), Параметры.АдресЧека, Неопределено);
	ПодписьЧека = ?(Параметры.Свойство("ПодписьЧека"), Параметры.ПодписьЧека, Неопределено);
	
	Если ПустаяСтрока(АдресЧека) Или ПустаяСтрока(ПодписьЧека) Тогда  
		Возврат Неопределено;
	КонецЕсли;
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	
	Текст = ВыстроитьПоля(ВРег(Параметры.ОрганизацияНазвание), , ШиринаСтроки) + Символы.ПС;
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(Параметры.ОрганизацияИНН), НСтр("ru='ИНН:'") + Параметры.ОрганизацияИНН, "");
	ОрганизацияКПП = ?(НЕ ПустаяСтрока(Параметры.ОрганизацияКПП), НСтр("ru='КПП:'") + Параметры.ОрганизацияКПП, "");
	Если Не ПустаяСтрока(ОрганизацияИНН) Или НЕ ПустаяСтрока(ОрганизацияКПП) Тогда
		Текст = Текст + ВыстроитьПоля(ОрганизацияИНН, ОрганизацияКПП, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;  
	
	НомерКассы = ?(НЕ ПустаяСтрока(Параметры.НомерКассы), НСтр("ru='КАССА:'") + Параметры.НомерКассы, "");
	НомерСмены = ?(НЕ ПустаяСтрока(Параметры.НомерСмены), НСтр("ru='СМЕНА:'") + Параметры.НомерСмены, "");
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(НомерСмены) Тогда
		Текст = Текст + ВыстроитьПоля(НомерКассы, НомерСмены, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(Параметры.НомерЧека), НСтр("ru='ЧЕК:'") + Параметры.НомерЧека, "");
	ДатаВремя = НСтр("ru='ДАТА:'") + Формат(ТекущаяДата(), "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Если Не ПустаяСтрока(НомерЧека) Или НЕ ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + " " + Символы.ПС;
	Если Не ПустаяСтрока(АдресЧека) Тогда
		Если ПечатьШтрихкода Тогда
			Текст = Текст + "|ШтрихКод|QR|" + АдресЧека + Символы.ПС;
		КонецЕсли;
		Текст = Текст + " " + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом(АдресЧека, ШиринаСтроки) +  " " + Символы.ПС;
		Текст = Текст + " " + Символы.ПС;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПодписьЧека) Тогда
		Текст = Текст + ПостроитьПолеПереносом(ПодписьЧека, ШиринаСтроки) +  " " + Символы.ПС;
		Текст = Текст + " " + Символы.ПС;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Функция расшифровывает QR код для чека ККТ. Структура описана в документе ФФД в разделе 61.
//
Функция РасшифроватьQRКодЧекаККТ(ЗначениеQRКода) Экспорт
	
	ДанныеШтрихкода = Новый Структура();
	ДанныеШтрихкода.Вставить("Расшифрован", Истина);
	ДанныеШтрихкода.Вставить("ДатаВремяРасчета");
	ДанныеШтрихкода.Вставить("СуммаРасчета", 0);
	ДанныеШтрихкода.Вставить("НомерФискальногоНакопителя");
	ДанныеШтрихкода.Вставить("НомерФискальногоДокумента");
	ДанныеШтрихкода.Вставить("ФискальныйПризнак");
	ДанныеШтрихкода.Вставить("ПризнакРасчета");
	ДанныеШтрихкода.Вставить("ПризнакРасчетаКод");
	
	ПозицияСимволаСР = Найти(ЗначениеQRКода, "&s=");   
	ПозицияСимволаФП = Найти(ЗначениеQRКода, "&fp=");  
	ПозицияСимволаФН = Найти(ЗначениеQRКода, "&fn=");  
	ПозицияСимволаФД = Найти(ЗначениеQRКода, "&i=");  
	
	Если Лев(ЗначениеQRКода, 2) <> "t=" Или ПозицияСимволаСР = 0 Или ПозицияСимволаФП = 0 Или ПозицияСимволаФН = 0 Или ПозицияСимволаФД = 0 Тогда
		ДанныеШтрихкода.Расшифрован = Ложь;
		Возврат ДанныеШтрихкода;
	КонецЕсли;
	// Дата время расчета.
	ДатаВремяРасчета = Сред(ЗначениеQRКода, 3, ПозицияСимволаСР - 3);
	ДанныеШтрихкода.ДатаВремяРасчета = Дата(Лев(ДатаВремяРасчета, 4), Сред(ДатаВремяРасчета, 5, 2), Сред(ДатаВремяРасчета, 7, 2), 
		Сред(ДатаВремяРасчета, 10, 2), Сред(ДатаВремяРасчета, 12, 2) ,0);
	// Номер фискального накопителя
	ДанныеШтрихкода.НомерФискальногоНакопителя = Сред(ЗначениеQRКода, ПозицияСимволаФН + 4, ПозицияСимволаФД - ПозицияСимволаФН - 4);
	// Номер фискального документа
	ДанныеШтрихкода.НомерФискальногоДокумента = Сред(ЗначениеQRКода, ПозицияСимволаФД + 3, ПозицияСимволаФП - ПозицияСимволаФД - 3);
	// Сумма расчета
	ДанныеШтрихкода.СуммаРасчета = Число(Сред(ЗначениеQRКода, ПозицияСимволаСР + 3, ПозицияСимволаФН - ПозицияСимволаСР - 3));
	// Фискальный признак
	Значение = Сред(ЗначениеQRКода, ПозицияСимволаФП + 4);
	ДанныеШтрихкода.ФискальныйПризнак = Лев(Значение, СтрДлина(Значение) - 4);
	// Признак расчета
	ДанныеШтрихкода.ПризнакРасчетаКод = Число(Прав(Значение, 1));
	ДанныеШтрихкода.ПризнакРасчета = РасчетДенежнымиСредствамиПоКоду(ДанныеШтрихкода.ПризнакРасчетаКод);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - проверяемый индивидуальный номер налогоплательщика.
//  ЭтоЮридическоеЛицо - Булево - признак, является ли владелец ИНН юридическим лицом.
//  ТекстСообщения     - Строка - текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ИННСоответствуетТребованиям(Знач ИНН, ЭтоЮридическоеЛицо, ТекстСообщения) Экспорт
	
	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";
	
	ИНН      = СокрЛП(ИНН);
	ДлинаИНН = СтрДлина(ИНН);
	
	Если ЭтоЮридическоеЛицо = Неопределено Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не определен тип владельца ИНН'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'ИНН должен состоять только из цифр'");
	КонецЕсли;
	
	Если  ЭтоЮридическоеЛицо И ДлинаИНН <> 10 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр'");
	ИначеЕсли НЕ ЭтоЮридическоеЛицо И ДлинаИНН <> 12 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
			+ НСтр("ru = 'ИНН физического лица должен состоять из 12 цифр'");
	КонецЕсли;
	
	Если СоответствуетТребованиям Тогда
		Если ЭтоЮридическоеЛицо Тогда
			КонтрольнаяСумма = 0;
			Для Индекс = 1 По 9 Цикл
				Если Индекс = 1 Тогда
					Множитель = 2;
				ИначеЕсли Индекс = 2 Тогда
					Множитель = 4;
				ИначеЕсли Индекс = 3 Тогда
					Множитель = 10;
				ИначеЕсли Индекс = 4 Тогда
					Множитель = 3;
				ИначеЕсли Индекс = 5 Тогда
					Множитель = 5;
				ИначеЕсли Индекс = 6 Тогда
					Множитель = 9;
				ИначеЕсли Индекс = 7 Тогда
					Множитель = 4;
				ИначеЕсли Индекс = 8 Тогда
					Множитель = 6;
				ИначеЕсли Индекс = 9 Тогда
					Множитель = 8;
				КонецЕсли;
				Цифра = Число(Сред(ИНН, Индекс, 1));
				КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			КонецЦикла;
			
			КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
			Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным'");
			КонецЕсли;
		Иначе
			КонтрольнаяСумма11 = 0;
			КонтрольнаяСумма12 = 0;
			Для Индекс = 1 По 11 Цикл
				// Расчет множителя для 11-го и 12-го разрядов.
				Если Индекс = 1 Тогда
					Множитель11 = 7;
					Множитель12 = 3;
				ИначеЕсли Индекс = 2 Тогда
					Множитель11 = 2;
					Множитель12 = 7;
				ИначеЕсли Индекс = 3 Тогда
					Множитель11 = 4;
					Множитель12 = 2;
				ИначеЕсли Индекс = 4 Тогда
					Множитель11 = 10;
					Множитель12 = 4;
				ИначеЕсли Индекс = 5 Тогда
					Множитель11 = 3;
					Множитель12 = 10;
				ИначеЕсли Индекс = 6 Тогда
					Множитель11 = 5;
					Множитель12 = 3;
				ИначеЕсли Индекс = 7 Тогда
					Множитель11 = 9;
					Множитель12 = 5;
				ИначеЕсли Индекс = 8 Тогда
					Множитель11 = 4;
					Множитель12 = 9;
				ИначеЕсли Индекс = 9 Тогда
					Множитель11 = 6;
					Множитель12 = 4;
				ИначеЕсли Индекс = 10 Тогда
					Множитель11 = 8;
					Множитель12 = 6;
				ИначеЕсли Индекс = 11 Тогда
					Множитель11 = 0;
					Множитель12 = 8;
				КонецЕсли;
				
				Цифра = Число(Сред(ИНН, Индекс, 1));
				КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
				КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
				
			КонецЦикла;
			
			КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
			КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
			
			Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1)) ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
				СоответствуетТребованиям = Ложь;
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
				               + НСтр("ru = 'Контрольное число для ИНН не совпадает с рассчитанным'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоответствуетТребованиям;
	
КонецФункции 

#Область ПрограммныйИнтерфейсМаркировка

// Преобразовывает HEX строку в строку символов.
//
// Параметры:
//  СтрокаHEX - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//   - Тестовая строка
//
Функция ПреобразоватьHEXВСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	ВремСтрока = СтрокаHEX;
	КодСимвола = 0;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол  = Лев(ВремСтрока, 2);
		ТекСимвол  = ПреобразоватьHEXВБинарнуюСтроку(ТекСимвол);
		КодСимвола = ПреобразоватьБинарнуюСтрокуВЧисло(ТекСимвол);
		Если КодСимвола > 31 Тогда
			Результат = Результат + Символ(КодСимвола);
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 3);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает строку символов в HEX строку.
//
// Параметры:
//   Строка - Тестовая строка
// 
// Возвращаемое значение:
//   - СтрокаHEX - Строка HEX содержащая символы.  
//
Функция ПреобразоватьСтрокуВHEX(Знач Строка) Экспорт
	
	Результат = "";
	ИндексСимвола = 1;
	
	Пока ИндексСимвола <= СтрДлина(Строка) Цикл
		ТекКод = КодСимвола(Строка, ИндексСимвола);
		ТекСимвол = ДобавитьЛидирующиеНули(ПреобразоватьЧислоВБинарнуюСтроку(ТекКод), 8);
		Результат = Результат + ПреобразоватьБинарнуюСтрокуВHEX(ТекСимвол);
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Результат = ДобавитьЛидирующиеНули(Результат, 8);
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать HEX в бинарную строку
//
// Параметры:
//  СтрокаHEX - Строка HEX содержащая символы.  
// 
// Возвращаемое значение:
//   - Текстовая строка в бинарном представлении (Пример "000010101"). 
//
Функция ПреобразоватьHEXВБинарнуюСтроку(Знач СтрокаHEX) Экспорт
	
	Результат = "";
	
	Для ИндексСимвола = 1 По СтрДлина(СтрокаHEX) Цикл 
		ТекСимвол = Сред(СтрокаHEX, ИндексСимвола, 1);
		Если ТекСимвол = "0" Тогда 
			Результат = Результат + "0000"
		ИначеЕсли ТекСимвол = "1" Тогда 
			Результат = Результат + "0001"
		ИначеЕсли ТекСимвол = "2" Тогда 
			Результат = Результат + "0010"
		ИначеЕсли ТекСимвол = "3" Тогда 
			Результат = Результат + "0011"
		ИначеЕсли ТекСимвол = "4" Тогда 
			Результат = Результат + "0100"
		ИначеЕсли ТекСимвол = "5" Тогда 
			Результат = Результат + "0101"
		ИначеЕсли ТекСимвол = "6" Тогда 
			Результат = Результат + "0110"
		ИначеЕсли ТекСимвол = "7" Тогда 
			Результат = Результат + "0111"
		ИначеЕсли ТекСимвол = "8" Тогда 
			Результат = Результат + "1000"
		ИначеЕсли ТекСимвол = "9" Тогда 
			Результат = Результат + "1001"
		ИначеЕсли ТекСимвол = "A" Тогда 
			Результат = Результат + "1010"
		ИначеЕсли ТекСимвол = "B" Тогда 
			Результат = Результат + "1011"
		ИначеЕсли ТекСимвол = "C" Тогда 
			Результат = Результат + "1100"
		ИначеЕсли ТекСимвол = "D" Тогда 
			Результат = Результат + "1101"
		ИначеЕсли ТекСимвол = "E" Тогда 
			Результат = Результат + "1110"
		ИначеЕсли ТекСимвол = "F" Тогда 
			Результат = Результат + "1111"
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку ВHEX
//
// Параметры:
//  БинарнаяСтрока- Текстовая строка в бинарном представлении (Пример "000010101").
// 
// Возвращаемое значение:
//   - Строка HEX содержащая символы.  
//
Функция ПреобразоватьБинарнуюСтрокуВHEX(Знач БинарнаяСтрока) Экспорт
	
	Результат = "";
	ВремСтрока = БинарнаяСтрока;
	
	Пока СтрДлина(ВремСтрока) > 0 Цикл
		ТекСимвол = Лев(ВремСтрока, 4);
		Если ТекСимвол = "0000" Тогда 
			Результат = Результат + "0";
		ИначеЕсли ТекСимвол = "0001" Тогда 
			Результат = Результат + "1";
		ИначеЕсли ТекСимвол = "0010" Тогда 
			Результат = Результат + "2";
		ИначеЕсли ТекСимвол = "0011" Тогда 
			Результат = Результат + "3";
		ИначеЕсли ТекСимвол = "0100" Тогда 
			Результат = Результат + "4";
		ИначеЕсли ТекСимвол = "0101" Тогда 
			Результат = Результат + "5";
		ИначеЕсли ТекСимвол = "0110" Тогда 
			Результат = Результат + "6";
		ИначеЕсли ТекСимвол = "0111" Тогда 
			Результат = Результат + "7";
		ИначеЕсли ТекСимвол = "1000" Тогда 
			Результат = Результат + "8";
		ИначеЕсли ТекСимвол = "1001" Тогда 
			Результат = Результат + "9";
		ИначеЕсли ТекСимвол = "1010" Тогда 
			Результат = Результат + "A";
		ИначеЕсли ТекСимвол = "1011" Тогда 
			Результат = Результат + "B";
		ИначеЕсли ТекСимвол = "1100" Тогда 
			Результат = Результат + "C";
		ИначеЕсли ТекСимвол = "1101" Тогда 
			Результат = Результат + "D";
		ИначеЕсли ТекСимвол = "1110" Тогда 
			Результат = Результат + "E";
		ИначеЕсли ТекСимвол = "1111" Тогда 
			Результат = Результат + "F";
		КонецЕсли;
		ВремСтрока = Сред(ВремСтрока, 5);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать бинарную строку в десятичное число
//
// Параметры:
//  БинарнаяСтрока - Текстовая строка в бинарном представлении (Пример "000010101"). 
// 
// Возвращаемое значение:
//   - Десятичное число. 
//
Функция ПреобразоватьБинарнуюСтрокуВЧисло(Знач БинарнаяСтрока) Экспорт
	
	Результат = 0;
	ТекущийИндекс = СтрДлина(БинарнаяСтрока) - 1;
	
	Для ИндексСимвол = 1 По СтрДлина(БинарнаяСтрока) Цикл
		ТекСимвол = Сред(БинарнаяСтрока, ИндексСимвол, 1);
		Если ТекСимвол = "1" Тогда
			Результат = Результат + Pow(2, ТекущийИндекс); 
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс - 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Преобразовать десятичное число в бинарную строку
//
// Параметры:
//  Число - Десятичное число которое будет преобразовано в бинарный вид. 
// 
// Возвращаемое значение:
//   - Текстовая строка в бинарном представлении (Пример "000010101").
//
Функция ПреобразоватьЧислоВБинарнуюСтроку(Знач Число) Экспорт 
	
	Результат = "";
	
	Пока Число > 0 Цикл
		Остаток = Число % 2;
		Число = Цел(Число / 2);
		Результат = Строка(Остаток) + Результат;
	КонецЦикла;
	
	Результат =?(ПустаяСтрока(Результат), "0", Результат); 
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

//  Выравнить передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ВыравнитьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

Функция ДобавитьЛидирующиеНули(Знач Строка, Знач ДлиннаСтроки) 
	
	ТекстПолный = Строка;
	Пока СтрДлина(ТекстПолный) < ДлиннаСтроки Цикл
		ТекстПолный = "0" + ТекстПолный;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

#КонецОбласти