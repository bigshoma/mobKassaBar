#Область ПрограммныйИнтерфейс

// Мастер регистрации
Функция ПолучитьПараметрыМастераРегистрации() Экспорт
	
	ПараметрыМастера = Новый Структура;
	ПараметрыМастера.Вставить("ОтображатьПредупреждениеПередЗакрытиемБезРегистации", Ложь);
	ПараметрыМастера.Вставить("ТекстПредупреждениеПередЗакрытиемБезРегистации", "");
	
	Возврат ПараметрыМастера;
	
КонецФункции

Процедура ОткрытьМастерРегистрации(ПараметрыМастера = Неопределено) Экспорт
	
	Если НЕ ПараметрыМастера = Неопределено Тогда
		
		ПараметрыМастераСтатично = РегистрацияВОблакеКлиентСерверПовтИсп.ПолучитьПараметрыМастераРегистрации();
		ЗаполнитьЗначенияСвойств(ПараметрыМастераСтатично, ПараметрыМастера);
		
	КонецЕсли;
	
	ФормаМастера = ОпределитьФормуМастера();
	
	ОткрытьФорму("Обработка.РегистрацияВОблаке.Форма." + ФормаМастера);
	
КонецПроцедуры

Процедура ЗакрытьМастер() Экспорт
	
	ПараметрыМастера = РегистрацияВОблакеКлиентСерверПовтИсп.ПолучитьПараметрыМастераРегистрации();
	
	Если ПараметрыМастера.ОтображатьПредупреждениеПередЗакрытиемБезРегистации Тогда
		ПоказатьПредуперждениеПередЗакрытием(ПараметрыМастера.ТекстПредупреждениеПередЗакрытиемБезРегистации);
		
	Иначе
		Оповестить("ЗакрытьМастер");
	КонецЕсли;
	
КонецПроцедуры

// Регистрация

Процедура ЗарегистрироватьПользователя(ОписаниеОповещения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Попытка
		
		СоединениеHTTP = ПолучитьСоединениеHTTP_Регистрация();
		
		ВыполнитьМетод(СоединениеHTTP, "check_user");	// проверка пользователя (E-mail)
		ВыполнитьМетод(СоединениеHTTP, "sign_up");		// регистрация
		ВыполнитьМетод(СоединениеHTTP, "get_app_url");
		
	Исключение
		
		ИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = ИнформацияОбОшибке;
		
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

Процедура УстановитьНастройки(ОписаниеОповещения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Попытка
		
		СоединениеHTTP = ПолучитьСоединениеHTTP_Синхронизация();
		
		// setup post
		
		ИмяМетода = "storage/integration/setup";
		АдресСервиса = ПолучитьАдресРесурса(ИмяМетода);
		Запрос = Новый HTTPЗапрос(АдресСервиса);
		
		Запрос.Заголовки.Вставить("IBSession", "start");
		Ответ = СоединениеHTTP.ОтправитьДляОбработки(Запрос);
		
		Location = "";
		Cookie = "";
		
		Если Ответ.КодСостояния = 200 Тогда
			Location = Ответ.Заголовки.Получить("Location");
			
			ПозицияUpload = СтрНайти(Location, "upload");
			Location = Сред(Location, ПозицияUpload);
			
			Cookie = Ответ.Заголовки.Получить("Set-Cookie");
		ИначеЕсли Ответ.КодСостояния = 401 Тогда
			
			ТекстСообщения = НСтр("ru = 'Указан неправильный пароль
				|(ошибка 401)'");
			
			ВызватьИсключение ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'При выполнении запроса возникла ошибка '") + " " + Ответ.КодСостояния;
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		
		// setup put
		ИмяМетода = Location;
		
		АдресСервиса = ПолучитьАдресРесурса(ИмяМетода);
		Запрос = Новый HTTPЗапрос(АдресСервиса);
		
		Запрос.Заголовки.Вставить("Cookie", Cookie);
		Запрос.Заголовки.Вставить("IBSession", "finish");
		
		ДанныеДляЗаписиJSON = Новый Структура;
		ДанныеДляЗаписиJSON.Вставить("type", "MobileCashbox");
		СтрокаJSON = ПолучитьЗаписьJSON(ДанныеДляЗаписиJSON);
		
		Запрос.УстановитьТелоИзСтроки(СтрокаJSON);
		
		Ответ = СоединениеHTTP.Записать(Запрос);
		
		ОтветJSON = Ответ.ПолучитьТелоКакСтроку();
		
		ОтветДанные = СтруктураИзСтрокиJSON(ОтветJSON);
		УспешныеКоды = ПолучитьКодыУспешногоЗапроса(ИмяМетода);
		ОбработатьДанныеОтвета(ОтветДанные, УспешныеКоды);
		
	Исключение
		
		ИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = ИнформацияОбОшибке;
		
	КонецПопытки;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);

	
КонецПроцедуры

Процедура ВыполнитьСинхронизацию(ОписаниеОповещения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Попытка
		
		СоединениеHTTP = ПолучитьСоединениеHTTP_Синхронизация();
		
		// storage/integration/post
		АдресСервиса = ПолучитьАдресРесурса("storage/integration/post");
		Запрос = Новый HTTPЗапрос(АдресСервиса);
		
		Запрос.Заголовки.Вставить("IBSession", "start");
		Ответ = СоединениеHTTP.ОтправитьДляОбработки(Запрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			
			Location = Ответ.Заголовки.Получить("Location");
			
			ПозицияUpload = СтрНайти(Location, "upload");
			Location = Сред(Location, ПозицияUpload);
			
			Cookie = Ответ.Заголовки.Получить("Set-Cookie");
			
		ИначеЕсли Ответ.КодСостояния = 401 Тогда
			
			ТекстСообщения = НСтр("ru = 'Указан неправильный пароль
				|(ошибка 401)'");
			
			ВызватьИсключение ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'При выполнении запроса возникла ошибка '") + " " + Ответ.КодСостояния;
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		
		// integration put upload
		
		ИмяМетода = Location;
		
		АдресСервиса = ПолучитьАдресРесурса(ИмяМетода);
		Запрос = Новый HTTPЗапрос(АдресСервиса);
		
		ИмяФайла = ВыгрузитьДанныеДляИнтеграции();
		
		Запрос.УстановитьИмяФайлаТела(ИмяФайла);
		
		Запрос.Заголовки.Вставить("Cookie", Cookie);
		Запрос.Заголовки.Вставить("IBSession", "finish");
		Ответ = СоединениеHTTP.Записать(Запрос);
		
		Если Ответ.КодСостояния = 201 Тогда
			
			ПолеРезультат = Ответ.ПолучитьТелоКакСтроку();
			Данные = СтруктураИзСтрокиJSON(ПолеРезультат);
			КодОтвета = Данные.general.response;
			
			Если КодОтвета = 10200 Тогда
				ЗаданиеURL = "storage/" + Данные.result.storage + "/" + Данные.result.id + "/";
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При выполнении запроса возникла ошибка '") + " " + КодОтвета;
				ВызватьИсключение ТекстСообщения;
				
			КонецЕсли;
			
			Параметры = РегистрацияВОблакеКлиентСерверПовтИсп.ПолучитьПараметрыПодтвержденияЗагрузкиФайла();
			Параметры.ЗаданиеURL = ЗаданиеURL;
			Параметры.ОписаниеОповещения = ОписаниеОповещения;
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеJOB", 2, Истина);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'При выполнении запроса возникла ошибка '") + " " + Ответ.КодСостояния;
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = ИнформацияОбОшибке;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПолучитьПодтверждение() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Параметры = РегистрацияВОблакеКлиентСерверПовтИсп.ПолучитьПараметрыПодтвержденияЗагрузкиФайла();
	
	ОписаниеОповещения = Параметры.ОписаниеОповещения;
	
	Попытка
		
		СоединениеHTTP = ПолучитьСоединениеHTTP_Синхронизация();
		
		ИмяМетода = Параметры.ЗаданиеURL;
		АдресСервиса = ПолучитьАдресРесурса(ИмяМетода);
		
		Запрос = Новый HTTPЗапрос(АдресСервиса);
		
		Запрос.Заголовки.Вставить("IBSession", "start");
		
		Ответ = СоединениеHTTP.Получить(Запрос);
		
		Если Ответ.КодСостояния = 302 Тогда
			
			Location = Ответ.Заголовки.Получить("Location");
			
			ПозицияDownload = СтрНайти(Location, "download");
			Location = Сред(Location, ПозицияDownload);
			
			Cookie = Ответ.Заголовки.Получить("Set-Cookie");
			
			
			ИмяМетода = Location;
			АдресСервиса = ПолучитьАдресРесурса(ИмяМетода);
			
			Запрос = Новый HTTPЗапрос(АдресСервиса);
			Запрос.Заголовки.Вставить("Cookie", Cookie);
			Ответ = СоединениеHTTP.Получить(Запрос);
			
			Если Ответ.КодСостояния = 200 Тогда
				
				ТекстJSON = Ответ.ПолучитьТелоКакСтроку();
				
				ОтветРезультат = СтруктураИзСтрокиJSON(ТекстJSON);
				
				Если ОтветРезультат.Свойство("result") Тогда
					
					Если ОтветРезультат.result.Количество() > 0 Тогда
						
						Если ОтветРезультат.result[0].error Тогда
							Результат.Успешно = Ложь;
							Результат.ТекстОшибки = ОтветРезультат.result[0].message;
							
							ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
							
						Иначе
							
							ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
							
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеJOB", 5, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'При выполнении запроса возникла ошибка '") + " " + Ответ.КодСостояния;
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = ИнформацияОбОшибке;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
	КонецПопытки;
	
КонецПроцедуры

//

Процедура ОткрытьСсылкуНаСайт(Форма, ЭлементФормы, СсылкаНаСайт) Экспорт
	
	КомандыВыбора = Новый СписокЗначений;
	КомандыВыбора.Добавить("Поделиться", НСтр("ru = 'Поделиться'"),, БиблиотекаКартинок.ПоделитьсяБелый);
	КомандыВыбора.Добавить("Перейти", НСтр("ru = 'Перейти'"),, БиблиотекаКартинок.СтрелкаВправоБелый);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаСайт", СсылкаНаСайт);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораОткрытьСсылку", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзМеню(Оповещение, КомандыВыбора, ЭлементФормы);
	
КонецПроцедуры

Процедура ПослеВыбораОткрытьСсылку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Поделиться" Тогда
		
		Поделиться(ДополнительныеПараметры.СсылкаНаСайт);
		
	ИначеЕсли Результат.Значение = "Перейти" Тогда
		
		ПерейтиПоНавигационнойСсылке(ДополнительныеПараметры.СсылкаНаСайт);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Поделиться(СсылкаНаСайт)
	
	#Если МобильноеПриложениеКлиент Тогда
		
		ЗапускПриложения = Новый ЗапускПриложенияМобильногоУстройства();
		
		ЗапускПриложения.Действие = "android.intent.action.SEND";
		ЗапускПриложения.Тип = "text/plain";
		ЗапускПриложения.ДополнительныеДанные.Добавить("android.intent.extra.TEXT", СсылкаНаСайт);
		
		ЗапускПриложения.Запустить(Ложь);
		
	#Иначе
		
		ТекстИсключения = НСтр("ru = 'Операция доступна только из мобильного приложения'");
		ВызватьИсключение ТекстИсключения;
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоказатьПредуперждениеПередЗакрытием(ТекстПредупреждения)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредуперждениеПередЗакрытиемЗавершение", ЭтотОбъект);
	
	ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения,, НСтр("ru = '1С:Фреш'"));
	
КонецПроцедуры

Процедура ПредуперждениеПередЗакрытиемЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповестить("ЗакрытьМастер");
	
КонецПроцедуры

Функция СтруктураИзСтрокиJSON(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Ответ = ПрочитатьJSON(ЧтениеJSON,,, ФорматДатыJSON.ISO); 
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСоединениеHTTP_Регистрация()
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	
	СоединениеHTTP = Новый HTTPСоединение(
			ПараметрыПодключения.Сервер,
			,
			ПараметрыПодключения.Пользователь,
			ПараметрыПодключения.Пароль,
			,,
			Новый ЗащищенноеСоединениеOpenSSL()
		);
		
	Возврат СоединениеHTTP;
	
КонецФункции

Функция ПолучитьСоединениеHTTP_Синхронизация()
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	
	Пользователь = РегистрацияВОблакеВызовСервера.ПолучитьEmailПользователя();
	Пароль = РегистрацияВОблакеВызовСервера.ПолучитьПарольПользователя();
	
	СоединениеHTTP = Новый HTTPСоединение(
			ПараметрыПодключения.Сервер,
			,
			Пользователь,
			Пароль,
			,,
			Новый ЗащищенноеСоединениеOpenSSL()
		);
		
	Возврат СоединениеHTTP;
	
КонецФункции

Функция ПолучитьПараметрыПодключения()
	
	ПараметрыПодключения = Новый Структура;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ВыгрузитьДанныеДляИнтеграции() Экспорт
	
	// файл данных
	Каталог = КаталогДокументов();
	ИмяФайлаДанных = "MobileCashboxData.json";
	ПолныйПутьФайлДанных = Каталог + ИмяФайлаДанных;
	
	РегистрацияВОблакеВызовСервера.ВыгрузитьДанныеПриложенияДляИнтеграции(ПолныйПутьФайлДанных);
	
	
	// файл manifest
	ИмяФайлаМанифест = "manifest.json";
	ПолныйПутьМанифест = Каталог + ИмяФайлаМанифест;
	
	ДанныеДляЗаписиJSON = Новый Структура;
	ДанныеДляЗаписиJSON.Вставить("file", ИмяФайлаДанных);
	ДанныеДляЗаписиJSON.Вставить("handler", "MobileCashbox");
	ДанныеДляЗаписиJSON.Вставить("version", Строка(Новый УникальныйИдентификатор));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	
	ЗаписьJSON.ОткрытьФайл(ПолныйПутьМанифест,,, ПараметрыJSON);
	
	Файлы = Новый Массив;
	Файлы.Добавить(ДанныеДляЗаписиJSON);
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("upload", Файлы);
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписи);
	
	ЗаписьJSON.Закрыть();
	
	
	// упаковка в zip
	ПолныйПутьФайлZIP = Каталог + "MobileCashboxData.zip";
	
	ФайлыДляАрхивации = Новый Массив;
	ФайлыДляАрхивации.Добавить(ПолныйПутьФайлДанных);
	ФайлыДляАрхивации.Добавить(ПолныйПутьМанифест);
	
	МобильныеУтилитыКлиент.СоздатьZIP(ФайлыДляАрхивации, ПолныйПутьФайлZIP);
	
	Возврат ПолныйПутьФайлZIP;
	
КонецФункции

Функция ОпределитьФормуМастера()
	
	Статус = РегистрацияВОблакеВызовСервера.ПолучитьСтатусРегистрации();
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВОблаке.ЗарегистрированВСервисе") Тогда
		
		Возврат "ПродолжениеРегистрацииФорма1";
		
	КонецЕсли;
	
	Возврат "МастерРегистрацииФорма1";
	
КонецФункции

Процедура ВыполнитьМетод(СоединениеHTTP, ИмяМетода)
	
	АдресРесурса = ПолучитьАдресРесурса(ИмяМетода);
	
	ДанныеДляЗаписиJSON = ПолучитьПараметрыТелаЗапроса(ИмяМетода);
	
	СтрокаJSON = ПолучитьЗаписьJSON(ДанныеДляЗаписиJSON);
	
	ОтветHTTP = ВыполнитьЗапросHTTP(СоединениеHTTP, АдресРесурса, СтрокаJSON, "POST");
	
	ОбработатьОтветHTTP(ОтветHTTP);
	
	ОтветJSON = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ОтветДанные = СтруктураИзСтрокиJSON(ОтветJSON);
	
	УспешныеКоды = ПолучитьКодыУспешногоЗапроса(ИмяМетода);
	
	ОбработатьДанныеОтвета(ОтветДанные, УспешныеКоды);
	
	ЗафиксироватьРезультатМетода(ИмяМетода, ОтветДанные);
	
КонецПроцедуры

Процедура ЗафиксироватьРезультатМетода(ИмяМетода, ОтветДанные)
	
	Если ИмяМетода = "get_app_url" Тогда
		
		РегистрацияВОблакеВызовСервера.СохранитьНомерОбластиПользователя(ОтветДанные.tenant);
		
		РегистрацияВОблакеВызовСервера.СохранитьСтатусРегистрации(
			ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВОблаке.ЗарегистрированВСервисе")
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыТелаЗапроса(ИмяМетода)
	
	ДанныеДляЗаписиJSON = Новый Структура;
	
	Если ИмяМетода = "check_user" Тогда
		
		ДанныеДляЗаписиJSON.Вставить("login", РегистрацияВОблакеВызовСервера.ПолучитьEmailПользователя());
		
	ИначеЕсли ИмяМетода = "sign_up" Тогда
		
		ДанныеДляЗаписиJSON.Вставить("email", РегистрацияВОблакеВызовСервера.ПолучитьEmailПользователя());
		ДанныеДляЗаписиJSON.Вставить("name", РегистрацияВОблакеВызовСервера.ПолучитьИмяПользователя());
		
		НомерТелефона = РегистрацияВОблакеВызовСервера.ПолучитьНомерТелефонаПользователя();
		
		Если ЗначениеЗаполнено(НомерТелефона) Тогда
			ДанныеДляЗаписиJSON.Вставить("phone", НомерТелефона);
		КонецЕсли;
		
		ДанныеДляЗаписиJSON.Вставить("tariff", "215");
		ДанныеДляЗаписиJSON.Вставить("validity", "180");
		ДанныеДляЗаписиJSON.Вставить("fast_completion", Истина);
		ДанныеДляЗаписиJSON.Вставить("send_notification", Истина);
		
	ИначеЕсли ИмяМетода = "get_app_url" Тогда
		
		ДанныеДляЗаписиJSON.Вставить("login", РегистрацияВОблакеВызовСервера.ПолучитьEmailПользователя());
		ДанныеДляЗаписиJSON.Вставить("send_notification", Истина);
		
	КонецЕсли;
	
	Возврат ДанныеДляЗаписиJSON;
	
КонецФункции

Функция ПолучитьКодыУспешногоЗапроса(ИмяМетода)
	
	УспешныеКоды = Новый Массив;
	
	Если ИмяМетода = "check_user" Тогда
		
		УспешныеКоды.Добавить(10404);
		
	ИначеЕсли ИмяМетода = "sign_up" Тогда
		
		УспешныеКоды.Добавить(10202);
		
	ИначеЕсли ИмяМетода = "get_app_url" Тогда
		
		УспешныеКоды.Добавить(10403);
		УспешныеКоды.Добавить(10201);
		УспешныеКоды.Добавить(10102);
		
	ИначеЕсли СтрНайти(ИмяМетода, "upload") > 0 Тогда
		
		УспешныеКоды.Добавить(10200);
		
	КонецЕсли;
	
	Возврат УспешныеКоды;
	
КонецФункции

Функция ПолучитьАдресРесурса(ИмяМетода)
	
	Если ИмяМетода = "check_user" ИЛИ ИмяМетода = "sign_up" 
		ИЛИ ИмяМетода = "get_app_url" Тогда
		
		Возврат "a/adm/hs/promo_reg/" + ИмяМетода;
		
	ИначеЕсли ИмяМетода = "storage/integration/setup"
		ИЛИ СтрНайти(ИмяМетода, "upload") > 0
		ИЛИ ИмяМетода = "storage/integration/post"
		ИЛИ СтрНайти(ИмяМетода, "jobs") > 0
		ИЛИ СтрНайти(ИмяМетода, "download") > 0
		Тогда
		
		АдресРесурса = "a/%ИмяБазы%/%НомерОбласти%/hs/dt/" + ИмяМетода;
		АдресРесурса = СтрЗаменить(АдресРесурса, "%ИмяБазы%", РегистрацияВОблакеКлиентСерверПовтИсп.ПолучитьИмяБазы());
		
		АдресРесурса = СтрЗаменить(АдресРесурса, "%НомерОбласти%",
			Формат(РегистрацияВОблакеВызовСервера.ПолучитьНомерОбластиПользователя(), "ЧГ=0")
		);
		
		Возврат АдресРесурса;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаписьJSON(ДанныеДляЗаписиJSON)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписиJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ВыполнитьЗапросHTTP(СоединениеHTTP, АдресРесурса, СтрокаJSON, HTTPМетод)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	ЗапросHTTP.УстановитьТелоИзСтроки(
		СтрокаJSON,,
		ИспользованиеByteOrderMark.НеИспользовать
	);
	
	ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(HTTPМетод, ЗапросHTTP);
	
	Возврат ОтветHTTP;
	
КонецФункции

Процедура ОбработатьОтветHTTP(ОтветHTTP)
	
	Если НЕ (ОтветHTTP.КодСостояния >= 200 И ОтветHTTP.КодСостояния < 300) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить запрос
			|Код ответа сервера: %1'"
		);
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОтветHTTP.КодСостояния);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеОтвета(ОтветДанные, УспешныеКоды)
	
	Если ОтветДанные.Свойство("general") Тогда
		
		ОтветДанные = ОтветДанные.general;
	КонецЕсли;
	
	Если ОтветДанные.error Тогда
		
		ВызватьИсключение ОтветДанные.message;
		
	КонецЕсли;
	
	Если УспешныеКоды.Найти(ОтветДанные.response) = Неопределено Тогда
		
		ВызватьИсключение ОтветДанные.message;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
