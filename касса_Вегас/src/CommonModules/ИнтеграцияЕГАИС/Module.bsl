
#Область ПрограммныйИнтерфейс

// Получает данные ТТН в виде структуры для последующей загрузки в базу.
//
// Параметры:
//  ТТН                     - ОбъектXDTO - загружаемая ТТН {http://fsrar.ru/WEGAIS/TTNSingle}ТТН,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура   - данные ТТН, передаваемые в переопределяемый модуль для загрузки.
//
Функция ПолучитьДанныеТТН(ТТН, ТаблицаОрганизаций = Неопределено) Экспорт
	
	Если ТаблицаОрганизаций = Неопределено Тогда
		ТаблицаОрганизаций = Новый Массив;
	КонецЕсли;
	
	ДанныеТТН = Новый Структура;
	ДанныеТТН.Вставить("Идентификатор"   , "");                                                       // Идентификатор накладной (клиентский, к заполнению необязательный)
	ДанныеТТН.Вставить("ИдентификаторТТН", "");                                                       // Идентификатор накладной в системе (присвоенный). Требуется для подтверждения ТТН
	ДанныеТТН.Вставить("Возврат"         , Ложь);                                                     // Признак накладной на возврат
	ДанныеТТН.Вставить("Упакована"       , Истина);                                                   // Признак упаковки товаров ТТН
	ДанныеТТН.Вставить("Номер"           , "");                                                       // Номер документа
	ДанныеТТН.Вставить("Дата"            , '00010101');                                               // Дата составления документа
	ДанныеТТН.Вставить("ДатаОтгрузки"    , '00010101');                                               // Дата отгрузки продукции
	
	ДанныеТТН.Вставить("Грузоотправитель", ""); // Организация-грузоотправитель
	ДанныеТТН.Вставить("Грузополучатель" , ""); // Организация-грузополучатель
	ДанныеТТН.Вставить("Поставщик"       , ""); // Организация-поставщик
	
	ДанныеТТН.Вставить("Основание"       , "");                                                       // Основание накладной
	ДанныеТТН.Вставить("Комментарий"     , "");                                                       // Комментарий к накладной
	ДанныеТТН.Вставить("ТаблицаТоваров"  , Новый Массив);                                             // Массив строк ТТН
	
	// Параметры доставки
	ДанныеТТН.Вставить("ТипДоставки"     , "");                                                       // Тип перевозки
	ДанныеТТН.Вставить("Перевозчик"      , "");                                                       // Название компании перевозчика
	ДанныеТТН.Вставить("Автомобиль"      , "");                                                       // Название транспортного средства
	ДанныеТТН.Вставить("Прицеп"          , "");                                                       // Прицеп транспортного средства
	ДанныеТТН.Вставить("Заказчик"        , "");                                                       // Название компании заказчика
	ДанныеТТН.Вставить("Водитель"        , "");                                                       // Водитель
	ДанныеТТН.Вставить("ПунктПогрузки"   , "");                                                       // Место погрузки
	ДанныеТТН.Вставить("ПунктРазгрузки"  , "");                                                       // Место разгрузки
	ДанныеТТН.Вставить("Перенаправление" , "");                                                       // Перенаправление
	ДанныеТТН.Вставить("Экспедитор"      , "");                                                       // Экспедитор
	
	// Заполнение
	
	ДанныеТТН.Идентификатор    = ТТН.Identity;
	ДанныеТТН.Дата             = ТТН.Header.Date;
	ДанныеТТН.ДатаОтгрузки     = ТТН.Header.ShippingDate;
	ДанныеТТН.Комментарий      = СокрЛП(ТТН.Header.Note);
	ДанныеТТН.Номер            = СокрЛП(ТТН.Header.NUMBER);
	ДанныеТТН.Основание        = СокрЛП(ТТН.Header.Base);
	
	// Доставка
	ДанныеТТН.ТипДоставки     = СокрЛП(ТТН.Header.Transport.TRAN_TYPE);
	ДанныеТТН.Автомобиль      = СокрЛП(ТТН.Header.Transport.TRAN_CAR);
	ДанныеТТН.Перевозчик      = СокрЛП(ТТН.Header.Transport.TRAN_COMPANY);
	ДанныеТТН.Прицеп          = СокрЛП(ТТН.Header.Transport.TRAN_TRAILER);
	ДанныеТТН.Заказчик        = СокрЛП(ТТН.Header.Transport.TRAN_CUSTOMER);
	ДанныеТТН.Водитель        = СокрЛП(ТТН.Header.Transport.TRAN_DRIVER);
	ДанныеТТН.ПунктПогрузки   = СокрЛП(ТТН.Header.Transport.TRAN_LOADPOINT);
	ДанныеТТН.ПунктРазгрузки  = СокрЛП(ТТН.Header.Transport.TRAN_UNLOADPOINT);
	ДанныеТТН.Перенаправление = СокрЛП(ТТН.Header.Transport.TRAN_REDIRECT);
	ДанныеТТН.Экспедитор      = СокрЛП(ТТН.Header.Transport.TRAN_FORWARDER);
	
	ДанныеТТН.Возврат = Найти(ВРег(ТТН.Header.Type), "RETURN") <> 0;
	ДанныеТТН.Упакована = ВРег(ТТН.Header.UnitType) = "PACKED"; 
	
	ДанныеТТН.Грузоотправитель = ЗагрузитьОрганизацию(ТТН.Header.Shipper,  ТаблицаОрганизаций);
	ДанныеТТН.Грузополучатель = ЗагрузитьОрганизацию(ТТН.Header.Consignee, ТаблицаОрганизаций);
	Если ТТН.Header.Supplier <> Неопределено Тогда
		ДанныеТТН.Поставщик = ЗагрузитьОрганизацию(ТТН.Header.Supplier, ТаблицаОрганизаций);
	КонецЕсли;
	
	Для каждого ЭлементСодержимого Из ТТН.Content.Position Цикл
		
		СтрокаТТН = Новый Структура;
		СтрокаТТН.Вставить("ИдентификаторСтроки"     , ЭлементСодержимого.Identity);                            // Идентификатор позиции внутри накладной
		СтрокаТТН.Вставить("НомерСправкиА"           , ЭлементСодержимого.InformA.RegId);                       // Номер справки "А"
		СтрокаТТН.Вставить("НомерСправкиБПоставщика" , ЭлементСодержимого.InformB.InformBItem.BRegId);          // Номер справки "Б" предыдущей поставки
		СтрокаТТН.Вставить("ИдентификаторУпаковки"   , ЭлементСодержимого.Pack_ID);                             // Идентификатор упаковки
		СтрокаТТН.Вставить("НомерПартии"             , ЭлементСодержимого.Party);                               // Номер партии продукции
		СтрокаТТН.Вставить("Цена"                    , ЭлементСодержимого.Price);                               // Цена продукции в ТТН
		
		// Алкогольная продукция
		СтрокаТТН.Вставить("Код"                , ЭлементСодержимого.Product.AlcCode);
		СтрокаТТН.Вставить("Крепость"           , ЭлементСодержимого.Product.AlcVolume);
		СтрокаТТН.Вставить("Объем"              , ЭлементСодержимого.Product.Capacity);
		СтрокаТТН.Вставить("НаименованиеПолное" , СокрЛП(ЭлементСодержимого.Product.FullName));
		СтрокаТТН.Вставить("Идентификатор"      , ЭлементСодержимого.Product.Identity);
		СтрокаТТН.Вставить("Импортер"           , ЗагрузитьОрганизацию(ЭлементСодержимого.Product.Importer, ТаблицаОрганизаций));
		СтрокаТТН.Вставить("Производитель"      , ЗагрузитьОрганизацию(ЭлементСодержимого.Product.Producer, ТаблицаОрганизаций));
		СтрокаТТН.Вставить("КодВидаПродукции"   , ЭлементСодержимого.Product.ProductVCode);
		СтрокаТТН.Вставить("Наименование"       , СокрЛП(ЭлементСодержимого.Product.ShortName));
		СтрокаТТН.Вставить("Тип"                , ЭлементСодержимого.Product.Type);
		
		СтрокаТТН.Вставить("Количество"         , ЭлементСодержимого.Quantity); // Количество продукции в ТТН
		
		
		СтрокаТТН.Вставить("ДиапазоныНомеровМарок"  , Новый Массив); // Массив диапазонов номеров
		
		Маркировка = ЭлементСодержимого.InformB.InformBItem.MarkInfo;
		
		Если Маркировка <> Неопределено Тогда
			Для каждого ЭлементДиапазона Из Маркировка.Ranges.Range Цикл
				ДиапазонНомеров = Новый Структура;
				ДиапазонНомеров.Вставить("ТипМарки",       Маркировка.Type);           // Тип марки
				ДиапазонНомеров.Вставить("Идентификатор",  ЭлементДиапазона.Identity); // Идентификатор диапазона в списке
				ДиапазонНомеров.Вставить("Серия",          ЭлементДиапазона.Rank);     // Серия
				ДиапазонНомеров.Вставить("НачальныйНомер", ЭлементДиапазона.Start);    // Начальный номер
				ДиапазонНомеров.Вставить("КонечныйНомер",  ЭлементДиапазона.Last);     // Конечный номер
				
				СтрокаТТН.ДиапазоныНомеровМарок.Добавить(ДиапазонНомеров);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеТТН.ТаблицаТоваров.Добавить(СтрокаТТН);
		
		// Заполняются при загрузке справки Б
		СтрокаТТН.Вставить("НомерСправкиБ", ""); // Номер справки "Б" текущей поставки
	КонецЦикла;
	
	ДанныеТТН.Вставить("ТаблицаОрганизаций", ТаблицаОрганизаций);
	
	Возврат ДанныеТТН;

КонецФункции

Функция ПолучитьДанныеСправкиБ(СправкаБ, ТаблицаОрганизаций) Экспорт
	
	ШапкаСправкиБ = СправкаБ.Header;
	
	ДанныеСправкиБ = Новый Структура;
	ДанныеСправкиБ.Вставить("Идентификатор");
	ДанныеСправкиБ.Вставить("НомерТТН");
	ДанныеСправкиБ.Вставить("ДатаТТН");
	ДанныеСправкиБ.Вставить("ИдентификаторТТН");
	ДанныеСправкиБ.Вставить("Грузоотправитель");
	
	ДанныеСправкиБ.Вставить("Содержимое");
	
	// Заполнение
	
	ДанныеСправкиБ.Идентификатор           = ШапкаСправкиБ.Identity;
	ДанныеСправкиБ.НомерТТН                = ШапкаСправкиБ.WBNUMBER;
	ДанныеСправкиБ.ДатаТТН                 = ШапкаСправкиБ.WBDate;
	ДанныеСправкиБ.ИдентификаторТТН        = ШапкаСправкиБ.WBRegId;
	ДанныеСправкиБ.Грузоотправитель        = ЗагрузитьОрганизацию(ШапкаСправкиБ.Shipper, ТаблицаОрганизаций);
	
	Содержимое = Новый Массив;
	
	Для каждого ЭлементСодержимого Из СправкаБ.Content.Position Цикл
		
		СодержимоеЭлемент = Новый Структура;
		СодержимоеЭлемент.Вставить("ИдентификаторСтрокиТТН", ЭлементСодержимого.Identity);
		СодержимоеЭлемент.Вставить("РегистрационныйНомер",   ЭлементСодержимого.InformBRegId);
		
		Содержимое.Добавить(СодержимоеЭлемент);
		
	КонецЦикла;
	
	ДанныеСправкиБ.Содержимое = Содержимое;
	
	Возврат ДанныеСправкиБ;
	
КонецФункции

Функция ФабрикаЕГАИС() Экспорт
	
	НаборСхемXML = ПолучитьНаборСхемXML();
	ИспользуемаяФабрика = Новый ФабрикаXDTO(НаборСхемXML);
		
	Возврат ИспользуемаяФабрика;
	
КонецФункции

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  МассивДокументов        - Массив - полученные документы из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Соответствие  - загруженные документы.
//
Функция ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Соответствие;
	
	СправкиБ = Новый ТаблицаЗначений;
	СправкиБ.Колонки.Добавить("Идентификатор"          , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("НомерТТН"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("ДатаТТН"                , Новый ОписаниеТипов("Дата"));
	СправкиБ.Колонки.Добавить("ИдентификаторТТН"       , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("Грузоотправитель"       , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(12)));
	СправкиБ.Колонки.Добавить("АдресЗапроса"           , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("ТекстXML"               , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("ВремИдентификаторПоиска", Новый ОписаниеТипов("Строка"));
	
	ТаблицаОрганизаций = Новый Массив;
	
	МассивТТН = Новый Массив;
	
	Для каждого СтруктураДокумента Из МассивДокументов Цикл
		
		РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтруктураДокумента.ТекстXML);
		
		Попытка
			
			Фабрика = ФабрикаЕГАИС();
			ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML, Фабрика.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Документы"));
			
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", СтруктураДокумента.АдресЗапроса);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			Продолжить;
		КонецПопытки;
		
		Если НЕ ОбъектXDTO.Document.TTNInformBReg = Неопределено Тогда // СправкаБ
			
			ДанныеСправкиБ = ПолучитьДанныеСправкиБ(ОбъектXDTO.Document.TTNInformBReg, ТаблицаОрганизаций);
			
			СтрокаСправокБ = СправкиБ.Добавить();
			СтрокаСправокБ.Идентификатор           = ДанныеСправкиБ.Идентификатор;
			СтрокаСправокБ.НомерТТН                = ДанныеСправкиБ.НомерТТН;
			СтрокаСправокБ.ДатаТТН                 = ДанныеСправкиБ.ДатаТТН;
			СтрокаСправокБ.ИдентификаторТТН        = ДанныеСправкиБ.ИдентификаторТТН;
			СтрокаСправокБ.Грузоотправитель        = ДанныеСправкиБ.Грузоотправитель;
			СтрокаСправокБ.ТекстXML                = СтруктураДокумента.ТекстXML;
			СтрокаСправокБ.АдресЗапроса            = СтруктураДокумента.АдресЗапроса;
			СтрокаСправокБ.ВремИдентификаторПоиска = Строка(Новый УникальныйИдентификатор);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.WayBill = Неопределено Тогда // ТТН
			
			ДанныеТТН = ПолучитьДанныеТТН(ОбъектXDTO.Document.WayBill, ТаблицаОрганизаций);
			ДанныеТТН.Вставить("АдресЗапроса", СтруктураДокумента.АдресЗапроса);
			ДанныеТТН.Вставить("ТекстXML",     СтруктураДокумента.ТекстXML);
			МассивТТН.Добавить(ДанныеТТН);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.Ticket = Неопределено Тогда // Квитанция
			
			РезультатОбработкиДокумента.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.Квитанция;
			
			Если НЕ ОбъектXDTO.Document.Ticket.Result = Неопределено Тогда
				
				РезультатXDTO = ОбъектXDTO.Document.Ticket.Result;
				
				РезультатОбработкиДокумента.ОтказЕГАИС = ВРег(РезультатXDTO.Conclusion) = ВРег("Rejected");
				РезультатОбработкиДокумента.КомментарийЕГАИС = РезультатXDTO.Comments;
				
			ИначеЕсли НЕ ОбъектXDTO.Document.Ticket.OperationResult = Неопределено Тогда
				
				РезультатXDTO = ОбъектXDTO.Document.Ticket.OperationResult;
				
				РезультатОбработкиДокумента.ОтказЕГАИС = ВРег(РезультатXDTO.OperationResult) = ВРег("Rejected");
				
				Если ВРег(РезультатXDTO.OperationName) = ВРег("UnConfirm") Тогда
					РезультатОбработкиДокумента.ОтказЕГАИС = Истина;
				КонецЕсли;
				
				РезультатОбработкиДокумента.КомментарийЕГАИС   = РезультатXDTO.OperationComment;
				
			Иначе
				
				РезультатОбработкиДокумента.КомментарийЕГАИС = НСтр("ru = 'Не удалось определить формат ответа на запрос %1'");
				РезультатОбработкиДокумента.КомментарийЕГАИС = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", СтруктураДокумента.АдресЗапроса);
				РезультатОбработкиДокумента.ОтказЕГАИС = Истина;
				
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат = Истина;
			
			ИсходящийДокумент = НайтиТТНИсходящегоЗапроса(СтруктураДокумента.ИдентификаторЗапроса);
			
			Если НЕ ИсходящийДокумент = Неопределено Тогда
				
				ИнтеграцияЕГАИСПереопределяемый.ПриПолученииКвитанцииНаЗапрос(СтруктураДокумента, ИсходящийДокумент);
				РезультатОбработкиДокумента.ДокументСсылка = ИсходящийДокумент;
				
			КонецЕсли;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyClient = Неопределено Тогда // ОтветОрганизации
		
		ИначеЕсли НЕ ОбъектXDTO.Document.ReplyAP = Неопределено Тогда // ОтветАлкогольнаяПродукция
		
		Иначе
			РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не удалось определить формат входящего документа %1'");
			РезультатОбработкиДокумента.ОписаниеОшибки = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", СтруктураДокумента.АдресЗапроса);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеТТН Из МассивТТН Цикл
		
		АдресСправкиБ = "";
		
		РезультатЗагрузкиТТН = РезультатОбработкиВходящегоДокумента();
		
		СоздатьТТН(ДанныеТТН, РезультатЗагрузкиТТН, ДополнительныеПараметры);
		
		Если РезультатЗагрузкиТТН.Результат Тогда
			
			РезультатЗагрузкиТТН.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.ТТН;
			
			Если Результат[ДанныеТТН.АдресЗапроса] = Неопределено Тогда
				Результат.Вставить(ДанныеТТН.АдресЗапроса, РезультатЗагрузкиТТН);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(АдресСправкиБ) И Результат[АдресСправкиБ] = Неопределено Тогда
				РезультатЗагрузкиСправкиБ = РезультатОбработкиВходящегоДокумента();
				ЗаполнитьЗначенияСвойств(РезультатЗагрузкиСправкиБ, РезультатЗагрузкиТТН,, "ВидОбъекта");
				РезультатЗагрузкиСправкиБ.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.СправкаБ;
				
				Результат.Вставить(АдресСправкиБ, РезультатЗагрузкиСправкиБ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СправкиБ.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СправкиБ", СправкиБ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СправкиБ.Идентификатор,
		|	СправкиБ.НомерТТН,
		|	СправкиБ.ДатаТТН,
		|	СправкиБ.Грузоотправитель,
		|	СправкиБ.ВремИдентификаторПоиска
		|ПОМЕСТИТЬ СправкиБ
		|ИЗ
		|	&СправкиБ КАК СправкиБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НакладнаяЕГАИС.Ссылка КАК НакладнаяЕГАИС,
		|	СправкиБ.ВремИдентификаторПоиска КАК ВремИдентификаторПоиска
		|ИЗ
		|	Документ.ТоварноТранспортнаяНакладнаяЕГАИС КАК НакладнаяЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкиБ КАК СправкиБ
		|		ПО НакладнаяЕГАИС.Идентификатор = СправкиБ.Идентификатор
		|			И НакладнаяЕГАИС.НомерТТН = СправкиБ.НомерТТН
		|			И (НАЧАЛОПЕРИОДА(НакладнаяЕГАИС.ДатаТТН, ДЕНЬ) = НАЧАЛОПЕРИОДА(СправкиБ.ДатаТТН, ДЕНЬ))
		|			И НакладнаяЕГАИС.КодГрузоотправителя = СправкиБ.Грузоотправитель";

		
		СправкаБ = Справочники.ВидыОбъектовЕГАИС.СправкаБ;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТТН = Выборка.НакладнаяЕГАИС.ПолучитьОбъект();
			
			НайденныеСтроки = СправкиБ.НайтиСтроки(Новый Структура("ВремИдентификаторПоиска", Выборка.ВремИдентификаторПоиска));
			
			Справка = НайденныеСтроки[0];
			
			ТТН.СправкаБТекстXML = Новый ХранилищеЗначения(Справка.ТекстXML, Новый СжатиеДанных(9));
			
			РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
			
			Попытка
				ТТН.Записать();
				
				РезультатОбработкиДокумента.Результат = Истина;
				РезультатОбработкиДокумента.ДокументСсылка = ТТН.Ссылка;
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка записи ТТН, полученной из ЕГАИС.'");
				
				РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если Результат[Справка.АдресЗапроса] = Неопределено Тогда
				РезультатОбработкиДокумента.ВидОбъекта = СправкаБ;
				
				Результат.Вставить(Справка.АдресЗапроса, РезультатОбработкиДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль  - Структура - ТМ ЕГАИС, в который требуется осуществить выгрузку,
//  ВидДокумента        - СправочникСсылка.ВидыОбъектовЕГАИС - вид выгружаемого документа,
//  ДанныеДляВыгрузки   - Структура - необходимые данные для выгрузки конкретного объекта.
//
// Возвращаемое значение:
//   Строка   - текст XML-сообщения, выгружаемого в ЕГАИС.
//
Функция ТекстXMLВыгрузкиДокумента(ВидДокумента, ДанныеДляВыгрузки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ns:Documents");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПрефиксПространстваИмен, Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Справочники.ВидыОбъектовЕГАИС.Организации.ПрефиксПространстваИмен, Справочники.ВидыОбъектовЕГАИС.Организации.ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Справочники.ВидыОбъектовЕГАИС.АлкогольнаяПродукция.ПрефиксПространстваИмен, Справочники.ВидыОбъектовЕГАИС.АлкогольнаяПродукция.ПространствоИмен);
	
	Если НЕ ПустаяСтрока(ВидДокумента.ПрефиксПространстваИмен) Тогда
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(ВидДокумента.ПрефиксПространстваИмен, ВидДокумента.ПространствоИмен);
	КонецЕсли;
	
	Фабрика = ФабрикаЕГАИС();
	
	Владелец = Фабрика.Создать(Фабрика.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Владелец"));
	
	Владелец.FSRAR_ID = ЗначениеНастроекВызовСервераПовтИсп.ИдентификаторФСРАР();
	
	Документ = Фабрика.Создать(Фабрика.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Документ"));
	
	Если ВидДокумента = Справочники.ВидыОбъектовЕГАИС.ЗапросАлкогольнойПродукции Тогда
	
	ИначеЕсли ВидДокумента = Справочники.ВидыОбъектовЕГАИС.ЗапросОрганизаций Тогда
	
	ИначеЕсли ВидДокумента = Справочники.ВидыОбъектовЕГАИС.ЗапросОстатков Тогда
	
	ИначеЕсли ВидДокумента = Справочники.ВидыОбъектовЕГАИС.АктПодтвержденияТТН Тогда
		
		Документ.WayBillAct = ПреобразоватьВXDTOАктПодтвержденияТТН(Фабрика, ВидДокумента, ДанныеДляВыгрузки);
		
	КонецЕсли;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, Владелец, "Owner");
	Фабрика.ЗаписатьXML(ЗаписьXML, Документ, "Document");
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыОбъектовЕГАИС - вид объекта Чек,
//  ШапкаЧека    - Структура - общие данные чека,
//  СтрокиЧека   - Массив - состав чека, элемент массива - Структура,
//  ТекстОшибки  - Строка - если при формировании текста XML произошла ошибка, в переменную вернется текст ошибки.
//
// Возвращаемое значение:
//   Строка - текст XML-сообщения, выгружаемого в ЕГАИС.
//
Функция ТекстXMLВыгрузкиЧека(ВидДокумента, ШапкаЧека, СтрокиЧека, ТекстОшибки = "") Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	Фабрика = ФабрикаЕГАИС();
	ЧекДляПередачи = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "Чек"));
	
	Попытка
		
		ЧекДляПередачи.address  = ШапкаЧека.АдресМагазина;
		ЧекДляПередачи.inn      = ШапкаЧека.ИНН;
		ЧекДляПередачи.kassa    = ШапкаЧека.ЗаводскойНомерККМ;
		ЧекДляПередачи.kpp      = ШапкаЧека.КПП;
		ЧекДляПередачи.name     = ШапкаЧека.НаименованиеМагазина;
		ЧекДляПередачи.number   = ШапкаЧека.НомерЧекаККМ;
		ЧекДляПередачи.shift    = ШапкаЧека.НомерСменыККМ;
		ЧекДляПередачи.datetime = Формат(ШапкаЧека.ДатаВремяЧека, "ДФ=ddMMyyHHmm");
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка формирования файла чека.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат "";
	КонецПопытки;
	
	Для Каждого СтрокаЧека Из СтрокиЧека Цикл
		
		Попытка
			
			Если ПустаяСтрока(СтрокаЧека.ШтрихкодМарки) Тогда
				
				ЭлементЧека = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "ЧекЭлементБезМарки"));
				
				ЭлементЧека.code  = СтрокаЧека.КодВидаПродукции;
				ЭлементЧека.bname = СтрокаЧека.Наименование;
				ЭлементЧека.ean   = СтрокаЧека.ШтрихкодТовара;
				
				ЭлементЧека.count = Формат(СтрокаЧека.Количество, "ЧГ=0");
				ЭлементЧека.alc   = Формат(СтрокаЧека.Крепость,   "ЧДЦ=4; ЧРД=.; ЧГ=0");
				
				ЭлементЧека.price = Формат(?(ШапкаЧека.Свойство("Возврат") И ШапкаЧека.Возврат, -1, 1) * СтрокаЧека.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
				ЭлементЧека.volume = Формат(СтрокаЧека.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
				
				ЧекДляПередачи.nopdf.Добавить(ЭлементЧека);
				
			Иначе
				
				ЭлементЧека = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "ЧекЭлемент"));
				
				ЭлементЧека.barcode = СтрокаЧека.ШтрихкодМарки;
				ЭлементЧека.ean     = СтрокаЧека.ШтрихкодТовара;
				
				ЭлементЧека.price = Формат(?(ШапкаЧека.Свойство("Возврат") И ШапкаЧека.Возврат, -1, 1) * СтрокаЧека.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
				ЭлементЧека.volume = Формат(СтрокаЧека.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
				
				ЧекДляПередачи.Bottle.Добавить(ЭлементЧека);
				
			КонецЕсли;
			
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка формирования файла чека.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат "";
		КонецПопытки;
		
	КонецЦикла;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ЧекДляПередачи, "Cheque");
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""" + ВидДокумента.ПространствоИмен + """ ", "");
	
	Возврат ТекстXML;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаписьОрганизации()
	
	ЗаписьОрганизации = Новый Структура;
	ЗаписьОрганизации.Вставить("Код");
	ЗаписьОрганизации.Вставить("Наименование");
	ЗаписьОрганизации.Вставить("НаименованиеПолное");
	ЗаписьОрганизации.Вставить("ИНН");
	ЗаписьОрганизации.Вставить("КПП");
	ЗаписьОрганизации.Вставить("КодСтраны");
	ЗаписьОрганизации.Вставить("КодРегиона");
	ЗаписьОрганизации.Вставить("ПочтовыйИндекс");
	ЗаписьОрганизации.Вставить("ПредставлениеАдреса");
	
	Возврат ЗаписьОрганизации;
	
КонецФункции

Функция ПолучитьНаборСхемXML()
	
	НаборСхем = Новый НаборСхемXML;
	
	ИменаПакетов = Новый Массив();
	ИменаПакетов.Добавить("ЕГАИСАктПодтвержденияТТН");
	ИменаПакетов.Добавить("ЕГАИСАктПостановкиНаБаланс");
	ИменаПакетов.Добавить("ЕГАИСАктПостановкиНаБалансСправкиАБ");
	ИменаПакетов.Добавить("ЕГАИСАктСписания");
	ИменаПакетов.Добавить("ЕГАИСАлкогольнаяПродукция");
	ИменаПакетов.Добавить("ЕГАИСДокументы");
	ИменаПакетов.Добавить("ЕГАИСЗапросКлассификатора");
	ИменаПакетов.Добавить("ЕГАИСЗапросСправки");
	ИменаПакетов.Добавить("ЕГАИСКвитанция");
	ИменаПакетов.Добавить("ЕГАИСОбщиеТипы");
	ИменаПакетов.Добавить("ЕГАИСОрганизация");
	ИменаПакетов.Добавить("ЕГАИСОтветАлкогольнаяПродукция");
	ИменаПакетов.Добавить("ЕГАИСОтветОрганизации");
	ИменаПакетов.Добавить("ЕГАИССправкаА");
	ИменаПакетов.Добавить("ЕГАИССправкаБ");
	ИменаПакетов.Добавить("ЕГАИСПодтверждениеАктаРасхожденийТТН");
	ИменаПакетов.Добавить("ЕГАИСРегистрацияСправокПоАктуПостановкиНаБаланс");
	ИменаПакетов.Добавить("ЕГАИСРегистрацияСправокПоТТН");
	ИменаПакетов.Добавить("ЕГАИСТТН");
	ИменаПакетов.Добавить("ЕГАИСЧек");
	
	Для Каждого ИмяПакета Из ИменаПакетов Цикл
		
		Макет = ПолучитьОбщийМакет(ИмяПакета);
		ТекстСхемыXML = Макет.ТекущаяОбласть.Текст;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстСхемыXML);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ПостроительСхемы = Новый ПостроительСхемXML;
		СхемаДанныхСервиса = ПостроительСхемы.СоздатьСхемуXML(ДокументDOM);
		
		НаборСхем.Добавить(СхемаДанныхСервиса);
		
	КонецЦикла;
	
	Возврат НаборСхем;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий акту подтверждения ТТН.
//
// Параметры:
//  ВидДокумента      - СправочникСсылка.ВидыОбъектовЕГАИС - вид объекта Акт подтверждения ТТН,
//  ДанныеДляВыгрузки - Структура - необходимые данные ИБ для получения объекта XDTO:
//       ТТН                  - ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС - ссылка на загруженную ранее ТТН,
//       Отказ                - Булево - признак отказа от ТТН,
//       ТаблицаТоваров       - Массив - массив строк с фактическим количеством.
//                                       При отсутствии расхождений или при отказе от ТТН, не содержит элементов.
//                                       Элемент массива - структура с ключами:
//             ИдентификаторСтроки - Строка - идентификатор строки ТТН,
//             КоличествоФакт      - Число  - фактически принятое количество,
//             НомерСправкиБ       - Строка - регистрационный номер справки "Б".
//       Номер                - Строка - номер акта подтверждения,
//       Дата                 - Дата   - дата акта подтверждения.
//
// Возвращаемое значение:
//   ОбъектXDTO   - преобразованный объект XDTO.
//
Функция ПреобразоватьВXDTOАктПодтвержденияТТН(Фабрика, ВидДокумента, ДанныеДляВыгрузки)
	
	АктXDTO = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "АктПодтвержденияТТН"));
	
	ШапкаАктаXDTO = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "Шапка"));
	СодержимоеАктаXDTO = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "Содержимое"));
	
	Если ДанныеДляВыгрузки.Свойство("Отказ") И ДанныеДляВыгрузки.Отказ Тогда
		ШапкаАктаXDTO.IsAccept = "Rejected";
	Иначе
		ШапкаАктаXDTO.IsAccept = "Accepted";
	КонецЕсли;
	
	ШапкаАктаXDTO.ACTNUMBER = ДанныеДляВыгрузки.Номер;
	ШапкаАктаXDTO.ActDate   = ДанныеДляВыгрузки.Дата;
	ШапкаАктаXDTO.WBRegId   = ДанныеДляВыгрузки.ИдентификаторТТН;
	
	Для каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		
		ЭлементСодержимогоXDTO = Фабрика.Создать(Фабрика.Тип(ВидДокумента.ПространствоИмен, "СодержимоеЭлемент"));
		ЭлементСодержимогоXDTO.Identity     = СтрокаТовары.ИдентификаторСтроки;
		ЭлементСодержимогоXDTO.InformBRegId = СтрокаТовары.НомерСправкиБ;
		ЭлементСодержимогоXDTO.RealQuantity = СтрокаТовары.Количество;
		
		СодержимоеАктаXDTO.Position.Добавить(ЭлементСодержимогоXDTO);
		
	КонецЦикла;
	
	АктXDTO.Header  = ШапкаАктаXDTO;
	АктXDTO.Content = СодержимоеАктаXDTO;
	
	Возврат АктXDTO;

КонецФункции

// Загружает организацию в базу.
//
// Параметры:
//  ДанныеОрганизации       - ОбъектXDTO - полученные данные по организации из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС - созданная (найденная) организация.
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизации, ТаблицаОрганизаций)
	
	Если ДанныеОрганизации = Неопределено Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	// Соответствие между реквизитами классификатора организаций (Ключ) и свойствами объекта XDTO (Значение).
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("Наименование"			, "ShortName");
	СоответствияРеквизитов.Вставить("НаименованиеПолное"	, "FullName");
	СоответствияРеквизитов.Вставить("ИНН"					, "INN");
	СоответствияРеквизитов.Вставить("КПП"					, "KPP");
	СоответствияРеквизитов.Вставить("КодСтраны"				, "address/Country");
	СоответствияРеквизитов.Вставить("КодРегиона"			, "address/RegionCode");
	СоответствияРеквизитов.Вставить("ПочтовыйИндекс"		, "address/Index");
	СоответствияРеквизитов.Вставить("ПредставлениеАдреса"	, "address/description");
	
	КодОрганизации = ДанныеОрганизации.ClientRegId;
	
	
	Организация = Неопределено;
	
	Если НЕ ТаблицаОрганизаций.Количество() = 0 Тогда
		
		Для Каждого ОрганизацияИзТаблицы Из ТаблицаОрганизаций Цикл
			Если ОрганизацияИзТаблицы.Код = КодОрганизации Тогда
				
				Организация = ОрганизацияИзТаблицы;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Организация = Неопределено Тогда
		
		Организация = ЗаписьОрганизации();
		Организация.Код = КодОрганизации;
		ТаблицаОрганизаций.Добавить(Организация);
		
	КонецЕсли;
	
	Для каждого КлючЗначение Из СоответствияРеквизитов Цикл
		
		Если Формат(Организация[КлючЗначение.Ключ], "ЧГ=0") <> Формат(ДанныеОрганизации.Получить(КлючЗначение.Значение), "ЧГ=0") Тогда
			Данные = ДанныеОрганизации.Получить(КлючЗначение.Значение);
			
			Если ЗначениеЗаполнено(Данные) Тогда
				Организация[КлючЗначение.Ключ] = ДанныеОрганизации.Получить(КлючЗначение.Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Организация.Наименование       = СокрЛП(Организация.Наименование);
	Организация.НаименованиеПолное = СокрЛП(Организация.НаименованиеПолное);
	
	Возврат КодОрганизации;
	
КонецФункции

// Процедура вызывается при загрузке ТТН.
//
Процедура СоздатьТТН(ДанныеТТН, РезультатЗагрузкиТТН, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗагрузкиТТН.Результат = Ложь;
	
	Если ДанныеТТН.ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварноТранспортнаяНакладнаяЕГАИС                     = Документы.ТоварноТранспортнаяНакладнаяЕГАИС.СоздатьДокумент();
	ТоварноТранспортнаяНакладнаяЕГАИС.ДатаТТН             = ДанныеТТН.Дата;
	ТоварноТранспортнаяНакладнаяЕГАИС.НомерТТН            = ДанныеТТН.Номер;
	ТоварноТранспортнаяНакладнаяЕГАИС.Дата                = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
	ТоварноТранспортнаяНакладнаяЕГАИС.КодГрузоотправителя = ДанныеТТН.Грузоотправитель;
	ТоварноТранспортнаяНакладнаяЕГАИС.Идентификатор       = ДанныеТТН.Идентификатор;
	ТоварноТранспортнаяНакладнаяЕГАИС.ТТНТекстXML         = Новый ХранилищеЗначения(ДанныеТТН.ТекстXML, Новый СжатиеДанных(9));
	
	Если ТоварноТранспортнаяНакладнаяЕГАИС.Модифицированность() Тогда
		Попытка
			ТоварноТранспортнаяНакладнаяЕГАИС.Записать();
		Исключение
			РезультатЗагрузкиТТН.Результат = Ложь;
			РезультатЗагрузкиТТН.ОписаниеОшибки = НСтр("ru = 'Ошибка записи ТТН, полученной из ЕГАИС.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	РезультатЗагрузкиТТН.ДокументСсылка = ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка;
	РезультатЗагрузкиТТН.Результат = Истина;
	
КонецПроцедуры 

// Заполняет структуру результата обработки ответа сервера ЕГАИС на запрос.
//
Функция РезультатОбработкиВходящегоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"        , Ложь);
	Результат.Вставить("ОписаниеОшибки"   , "");
	Результат.Вставить("ДокументСсылка"   , Неопределено);
	Результат.Вставить("ВидОбъекта"       , Неопределено);
	Результат.Вставить("ОтказЕГАИС"       , Ложь);
	Результат.Вставить("КомментарийЕГАИС" , "");
		
	Возврат Результат;
	
КонецФункции

Функция НайтиТТНИсходящегоЗапроса(ИдентификаторИсходящегоЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка КАК СсылкаТТН
		|ИЗ
		|	Документ.ТоварноТранспортнаяНакладнаяЕГАИС КАК ТоварноТранспортнаяНакладнаяЕГАИС
		|ГДЕ
		|	ТоварноТранспортнаяНакладнаяЕГАИС.ИдентификаторИсходящегоЗапросаАктаПодтверждения = &ИдентификаторИсходящегоЗапросаАктаПодтверждения";
	
	Запрос.УстановитьПараметр("ИдентификаторИсходящегоЗапросаАктаПодтверждения", ИдентификаторИсходящегоЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.СсылкаТТН;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти