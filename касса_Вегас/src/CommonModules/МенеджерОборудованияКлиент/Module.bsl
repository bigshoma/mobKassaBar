#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииПодключениеОтключенияОборудования

// Получить обработчик драйвера для устройства.
//
Функция ПолучитьОбработчикДрайвера(Устройство) Экспорт
	
	Если Устройство.ИнтеграционноеПриложение Тогда
		ОбработчикДрайвера = МенеджерОборудованияИнтеграционноеПриложениеКлиент
		Иначе
		ОбработчикДрайвера = МенеджерОборудованияВнешняяКомпонентаКлиент;
	КонецЕсли;
	
	Возврат ОбработчикДрайвера;
	
КонецФункции

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт
	
	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);
	
КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
							   ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
							   
	Результат = ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Возврат Ложь;
	КонецЕсли;
	
	КонечныйРезультат = Истина;
	Результат         = Ложь;
	ОписаниеОшибки    = "";
	СписокОборудования = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для Каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"                 , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				НовоеПодключение.Вставить("Ссылка"                  , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства" , Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("Наименование"            , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"         , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"     , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ИнтеграционноеПриложение", Устройство.ИнтеграционноеПриложение);
				НовоеПодключение.Вставить("ИдентификаторОбъекта",     Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"    , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"    , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ПараметрыПодключения"    , Устройство.Параметры);
				НовоеПодключение.Вставить("КоличествоПодключенных"  , 1);
				
				ОбработчикДрайвера = ПолучитьОбработчикДрайвера(Устройство);
				НовоеПодключение.Вставить("ОбработчикДрайвера", ОбработчикДрайвера);
				
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования"        , Устройство.ТипОборудованияИмя);
				НовоеПодключение.ПараметрыПодключения.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.ПараметрыПодключения.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.ПараметрыПодключения.Вставить("ПакетнаяПечать"         , Устройство.ПакетнаяПечать);
				НовоеПодключение.ПараметрыПодключения.Вставить("ДрайверОборудованияИмя" , Устройство.ДрайверОборудованияИмя);
					
				ВыходныеПараметры = Неопределено;
				Результат = ОбработчикДрайвера.ПодключитьУстройство(НовоеПодключение.ПараметрыПодключения, ВыходныеПараметры);
				
				Если Результат Тогда
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru = 'Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки%'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);	
				КонецЕсли;
			Иначе // Устройство было подключено ранее
				//Увеличим количество пользователей данного соединения
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
				Результат = Истина;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
		
	ИначеЕсли ИдентификаторУстройства = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Выбранное устройство не может использоваться для подключения.
		|Укажите другое устройство.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Функция отключает устройства по типу оборудовани
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт
	
	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = МенеджерОборудованияВызовСервера.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				 
				 Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					 
					ПодключенноеУстройство.КоличествоПодключенных = 0;
					ВыходныеПараметры = Неопределено;
					// Вызов метода выполнения команды у обработчика.
					ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
					Результат = ОбработчикДрайвера.ОтключитьУстройство(ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
									   + НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки%'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
					
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
				
			КонецЕсли;
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции  

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;
		ВыходныеПараметры = Неопределено;
		ОбработчикДрайвера = ПодключенноеУстройство.ОбработчикДрайвера;
		Результат = ОбработчикДрайвера.ОтключитьУстройство(ПодключенноеУстройство.ПараметрыПодключения, ВыходныеПараметры);
		Если НЕ Результат Тогда
			ОписаниеОшибки = НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры.ТекстОшибки);
		КонецЕсли;
		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
	Возврат КонечныйРезультат;
	
КонецФункции

//Поиск по идентификатору подключенного ранее устройства
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор) Экспорт
	
	ПодключенноеУстройство = Неопределено;
	
	Для каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРабочиеМеста

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента".
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИдентификаторКлиента", ВРег(СистемнаяИнформация.ИдентификаторКлиента));
			РабочееМесто = МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСОборудованием

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыСистемы() Экспорт
	
	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура();
		глПодключаемоеОборудование.Вставить("ПараметрыПодключенияПО"           , Новый Массив());
		глПодключаемоеОборудование.Вставить("ДрайвераПодключаемогоОборудования", Новый Соответствие());
	КонецЕсли;
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
	ОтключитьВсеОборудование();
	
КонецФункции

// Функция осуществляет выбор устройства из списка доступных
// по типу подключаемого оборудования
//
Функция ВыбратьУстройство(ТипПО) Экспорт
	
	ВыходныеПараметры = Новый Структура("Результат, Идентификатор, ТекстОшибки", Ложь);
	
	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ВыходныеПараметры.ТекстОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");
		Возврат ВыходныеПараметры;
	КонецЕсли;
	
	ДоступныеУстройства = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипПО);
	
	Если ДоступныеУстройства.Количество() = 0 Тогда
		ВыходныеПараметры.ТекстОшибки = НСтр("ru='Оборудование для операции не подключено.'");
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для Каждого Устройства Из ДоступныеУстройства Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;
		
		Если СписокУстройств.Количество() = 1 Тогда
			ВыходныеПараметры.Идентификатор = СписокУстройств[0].Значение;
			ВыходныеПараметры.Результат = Истина;
		Иначе
			Идентификатор = СписокУстройств.ВыбратьЭлемент(НСтр("ru='Выберите оборудование'"));
			Если Идентификатор <> Неопределено Тогда
				ВыходныеПараметры.Идентификатор = Идентификатор.Значение;
				ВыходныеПараметры.Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ВыходныеПараметры;
	
КонецФункции

// Направляет команду обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
//
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	Если ПодключенноеУстройство <> Неопределено Тогда
		ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
		// Вызов метода выполнения команды у обработчика
		ОбработчикДрайвера   = ПодключенноеУстройство.ОбработчикДрайвера;
		Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры); 
	Иначе
		// Сообщение об ошибке, что устройство не подключено.
		ТекстОшибки = НСтр("ru = 'Устройство не подключено. Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполнить команду на экземпляре оборудовании
//
Функция ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, Знач ИдентификаторОборудования, Команда, ВходныеПараметры, ВыходныеПараметры) 
	
	Результат = Ложь;
	
	Если (ИдентификаторОборудования = Неопределено) Или ИдентификаторОборудования.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Устройство не выбрано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеОборудования = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не может быть использовано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторОборудования, ТекстОшибки) Тогда
		Результат = ВыполнитьКоманду(ИдентификаторОборудования, Команда, ВходныеПараметры, ВыходныеПараметры);
	Иначе
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
//
Функция ВыполнитьДополнительнуюКоманду(ИдентификаторОборудования, Команда, ВходныеПараметры, ВыходныеПараметры, ПараметрыПодключения = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	
	Если ДанныеОборудования = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не может быть использовано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ОбработчикДрайвера = ПолучитьОбработчикДрайвера(ДанныеОборудования);
	
	Если ПараметрыПодключения = Неопределено Тогда
		времПараметрыПодключения = ДанныеОборудования.Параметры;
	Иначе
		времПараметрыПодключения = ПараметрыПодключения;
	КонецЕсли;
	
	времПараметрыПодключения.Вставить("ТипОборудования"         , ДанныеОборудования.ТипОборудованияИмя);
	времПараметрыПодключения.Вставить("ДрайверОборудования"     , ДанныеОборудования.ДрайверОборудования);
	времПараметрыПодключения.Вставить("ИдентификаторОбъекта"    , ДанныеОборудования.ИдентификаторОбъекта);
	времПараметрыПодключения.Вставить("ДрайверОборудованияИмя"  , ДанныеОборудования.ДрайверОборудованияИмя);
	времПараметрыПодключения.Вставить("ИнтеграционноеПриложение", ДанныеОборудования.ИнтеграционноеПриложение);
	времПараметрыПодключения.Вставить("ОбработчикДрайвера"      , ОбработчикДрайвера);
	
	// Вызов метода выполнения команды у обработчика.
	Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда, времПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры); 
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию драйвера
//  
Функция ПолучитьВерсиюДрайвера(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат = Ложь;
	
	ДанныеОборудования = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеОборудования = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не может быть использовано.'");
		ВыходныеПараметры = Новый Структура("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ОбработчикДрайвера = ПолучитьОбработчикДрайвера(ДанныеОборудования);
	
	времПараметрыПодключения = Новый Структура();
	времПараметрыПодключения.Вставить("ТипОборудования"         , ДанныеОборудования.ТипОборудованияИмя);
	времПараметрыПодключения.Вставить("ДрайверОборудования"     , ДанныеОборудования.ДрайверОборудования);
	времПараметрыПодключения.Вставить("ИдентификаторОбъекта"    , ДанныеОборудования.ИдентификаторОбъекта);
	времПараметрыПодключения.Вставить("ДрайверОборудованияИмя"  , ДанныеОборудования.ДрайверОборудованияИмя);
	времПараметрыПодключения.Вставить("ИнтеграционноеПриложение", ДанныеОборудования.ИнтеграционноеПриложение);
	времПараметрыПодключения.Вставить("ОбработчикДрайвера"      , ОбработчикДрайвера);
	
	// Вызов метода выполнения команды у обработчика
	Результат = ОбработчикДрайвера.ВыполнитьКоманду("ПолучитьВерсиюДрайвера", времПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры); 
	
	ВыходныеПараметры.Вставить("ВерсияДрайвераВМакете", ДанныеОборудования.ВерсияДрайвераВМакете);
	
	Возврат Результат;
	
КонецФункции

// Выполнить настройку оборудования
// 
Процедура ВыполнитьНастройкуОборудования(ИдентификаторОборудования) Экспорт
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеУстройства = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не определено.'");
		Сообщить(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор"      , ИдентификаторОборудования);       
	ПараметрыФормы.Вставить("ДрайверОборудования", ДанныеУстройства.ДрайверОборудования);  
	ПараметрыФормы.Вставить("ПакетнаяПечать"     , ДанныеУстройства.ПакетнаяПечать);
	ПараметрыФормы.Вставить("ТипОборудованияИмя" , ДанныеУстройства.ТипОборудованияИмя);
	
	ФормаНастройки = "ФормаНастройкиУниверсальныйДрайвер";
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудования_Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Завершение настройки оборудования.
//
Процедура ВыполнитьНастройкуОборудования_Завершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования, Результат.ПакетнаяПечать);
	КонецЕсли;
	
КонецПроцедуры

// Устанавить драйвер из макета
//
Процедура УстановитьДрайверИзМакета(ИдентификаторДрайвера) Экспорт
	
	ДанныеДрайверов = МенеджерОборудованияВызовСервера.ПолучитьДанныеДрайвера(ИдентификаторДрайвера);
	
	Если ДанныеДрайверов.Количество() > 0 Тогда
		
		ДанныеДрайвера = ДанныеДрайверов[0];
		
		Если Не ДанныеДрайвера.УстановкаИзМакета Тогда
			ТекстОшибки = НСтр("ru='Установка драйвера производиться с помощью дистрибутива поставщика.'");
			Сообщить(ТекстОшибки); 
			Возврат;
		КонецЕсли;
		
		ИмяМакета = ДанныеДрайвера.ИмяПредопределенныхДанных;
		
		Если ДанныеДрайвера.ИнтеграционноеПриложение Тогда
			// Получение макета с сервера
			СсылкаНаФайл = МенеджерОборудованияВызовСервера.ПолучитьМакетДрайвера(ИмяМакета);
			ИмяФайлаВрем = ИмяМакета + ".apk";
			ВременныйКаталог = КаталогДокументов();
			Если ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + ИмяФайлаВрем, Ложь) Тогда
				Сообщить(НСтр("ru='Начата установка интеграционного приложения.'"));
				ЗапуститьПриложение(ВременныйКаталог + ИмяФайлаВрем, , Истина);
				Результат = Истина;
			Иначе
				ТекстОшибки = НСтр("ru='Ошибка установки интеграционного приложения.'");
				Сообщить(ТекстОшибки); 
			КонецЕсли;
		Иначе
			ОповещенияПриЗавершении = Новый ОписаниеОповещения("УстановитьДрайверИзМакетаПриЗавершении", ЭтотОбъект);
			НачатьУстановкуВнешнейКомпоненты(ОповещенияПриЗавершении, "ОбщийМакет." + ИмяМакета); 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДрайверИзМакетаПриЗавершении(Результат) Экспорт 
	
	ТекстСообщения = НСтр("ru='Установка драйвера завершена.'");
	Сообщить(ТекстСообщения); 
	
КонецПроцедуры 

// Выполнить установку драйвера
// 
Процедура ВыполнитьУстановкуДрайвера(ИдентификаторОборудования) Экспорт
	
	ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(ИдентификаторОборудования);
	Если ДанныеУстройства = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Устройство не определено.'");
		Сообщить(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	УстановитьДрайверИзМакета(ДанныеУстройства.ДрайверОборудования);
	
КонецПроцедуры

// Производит обработку данных события, полученных от клиента.
//
Процедура ОбработатьСобытиеОтУстройства(ОписаниеСобытия) Экспорт
	
	Событие = ОписаниеСобытия.Событие;
	Данные  = ОписаниеСобытия.Данные;
	
	Если Событие = "ШтрихкодBase64" Или Событие = "BarcodeBase64" Тогда
		Если МенеджерОборудованияКлиентПереопределяемый.ПреобразованиеШтрихкодаBase64() Тогда
			// Данные с устройства ввода приходят закодированные в Base64.
			ШтрихкодBase64 = "";
			СимволыШтрихкодBase64 = Base64Значение(Данные); // Декодируем строку
 			// Преобразуем в строку символов
			МассивСимволов = СтрРазделить(СимволыШтрихкодBase64, " "); 
			Для Каждого СимволШтрихкода Из МассивСимволов Цикл
				Если СимволШтрихкода = "1D" Тогда // Код символа GS в HEX, экранируем его.
					ШтрихкодBase64 = ШтрихкодBase64 + МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
				Иначе
					ШтрихкодBase64 = ШтрихкодBase64 + МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВСтроку(СимволШтрихкода);
				КонецЕсли;
			КонецЦикла;
			Данные  = ШтрихкодBase64;
			Событие = "Штрихкод";
		КонецЕсли;
	КонецЕсли; 
	
	Оповестить(Событие, Данные, "ПодключаемоеОборудование");
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Выполнить проверку готовности устройства.
//
Функция ВыполнитьПроверкуГотовностиУстройства(ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьДополнительнуюКоманду(ИдентификаторОборудования, "GetAvailable", Неопределено, ВыходныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыФЗ54

// Выполнить печать ценника.
//
Функция ВыполнитьОткрытиеСменыНаФискальномУстройстве(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "OpenShift", ВходныеПараметры, ВыходныеПараметры); ; 
	
КонецФункции

// Выполнить печать ценника.
//
Функция ВыполнитьЗакрытиеСменыНаФискальномУстройстве(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "CloseShift", ВходныеПараметры, ВыходныеПараметры); ; 
	
КонецФункции

// Производить фискализацию чека на фискальном устройстве.
// УникальныйИдентификатор - идентификатор формы.
// ИдентификаторУстройства - идентификатор устройства, если неопределенно - будет предложен выбор.
// ОповещениеПриЗавершении - оповещение при завершении завершении.
//
Функция ВыполнитьФискализациюЧекаНаФискальномУстройстве(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "CheckFiscalization", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Печать текстового документа. 
//
Функция ВыполнитьПечатьТекста(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintText", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Сформировать чек внесения или выемки на фискальном устройстве.
//
Функция ВыполнитьВнесениеВыемку(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "Encash", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Сформировать отчет о текущем состоянии расчетов.
//
Функция ВыполнитьФормированиеОтчетаОТекущемСостоянииРасчетов(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "ReportCurrentStatusOfSettlements",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Сформировать отчет о без гашения.
//
Функция ВыполнитьФормированиеОтчетаБезГашения(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintXReport",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Выполнить фискализацию чека коррекции на фискальном устройстве.
//
Функция ВыполнитьФискализациюЧекаКоррекцииНаФискальномУстройстве(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintReceiptCorrection",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Выполнить получение текущего состояния фискального устройства.
//
Функция ВыполнитьПолучениеТекущегоСостоянияФискальногоУстройства(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "GetCurrentStatus",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Выполнить получение параметров фискального устройства.
//
Функция ВыполнитьПолучениеПараметровФискальногоУстройства(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "GetDataKKT",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Выполнить операцию ФН для фискального устройства.
//
Функция ВыполнитьОперациюФНДляФискальногоУстройства(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "OperationFN",  ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСФискальнымиУстройствами

// Открыть денежный ящик.
//
Функция ВыполнитьОткрытиеДенежногоЯщика(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "OpenCashDrawer", Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтрокиПечатающегоУстройства(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	                                                                 
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования,  "GetLineLength", Неопределено, ВыходныеПараметры);    
	
КонецФункции

// Выполнить печать ценника.
//
Функция ВыполнитьПечатьЭтикеток(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "PrintLabels", ВходныеПараметры, ВыходныеПараметры); ; 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСПлатежнымиСистемами

// Выполнить сверку итогов на платежной системе
//
Функция ВыполнитьСверкуИтоговПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "Settlement", Неопределено, ВыходныеПараметры); 
	
КонецФункции

// Функция оплаты по платежной карте
//
Функция ВыполнитьОплатуПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "AuthorizeSales", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Функция возврата по платежной карте
//
Функция ВыполнитьВозвратПлатежаПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "AuthorizeRefund", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Функция отмены по платежной карте
//
Функция ВыполнитьОтменуПлатежаПоПлатежнойСистеме(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "AuthorizeVoid", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСДисплеямиПокупателя

// Функция вывода тестовых строк на подключенные дисплеи покупателя.
//
Функция ВыполнитьВыводИнформацииНаДисплейПокупателя(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВходныеПараметры, ВыходныеПараметры) Экспорт 
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "DisplayText", ВходныеПараметры, ВыходныеПараметры); 
	
КонецФункции

// Функция вывода тестовых строк на подключенные дисплеи покупателя.
//
Функция ВыполнитьОчисткуДисплеяПокупателя(ИдентификаторКлиента, Знач ИдентификаторОборудования,  ВыходныеПараметры) Экспорт 
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "ClearText", Неопределено, ВыходныеПараметры); 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭлектроннымиВесами

// Получает вес с электронных весов.
//
Функция ВыполнитьПолучениеВесаСЭлектронныхВесов(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "GetWeight", Неопределено, ВыходныеПараметры); 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСУстройствамиВвода

// Выполнить ввод данных на устройстве ввода.
//
Функция ВыполнитьВводДанных(ИдентификаторКлиента, Знач ИдентификаторОборудования, ВыходныеПараметры) Экспорт
	
	Возврат ВыполнитьКомандуНаОборудовании(ИдентификаторКлиента, ИдентификаторОборудования, "GetData", Неопределено, ВыходныеПараметры); 
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСШтрихкодами

// Функция определяет тип штрихкода по значение кода.
// 
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ВремТипШтрихкода = "";	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если ДлинаШтрихкода = 0 Тогда
		Возврат ВремТипШтрихкода;
	КонецЕсли;
	
	Сумма = 0;
	
	Если ДлинаШтрихкода = 13 Тогда // EAN13
		
		EAN13 = Истина;
		Коэффициент = 1;
		Для Сч = 1 По 12 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN13 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		ПроверочныйСимвол = Символ(Сумма + 48);
		Если EAN13 И ПроверочныйСимвол = Прав(Штрихкод, 1) Тогда
			ВремТипШтрихкода = "EAN13";
		КонецЕсли;
		
	ИначеЕсли ДлинаШтрихкода = 8 Тогда // EAN8
		
		EAN8 = Истина;
		Коэффициент = 3;
		Для Сч = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				EAN8 = Ложь;
				Прервать;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма = (10 - Сумма % 10) % 10;
		Если EAN8 И (КодСимвола(Штрихкод, 8) = Сумма + 48) Тогда
			ВремТипШтрихкода = "EAN8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВремТипШтрихкода= "" Тогда // CODE39
		
		CODE39 = Истина;
		Для Сч = 1 По ДлинаШтрихкода Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Сч);
			Если (ВремКодСимвола <> 32)
				И (ВремКодСимвола < 36 Или ВремКодСимвола > 37)
				И (ВремКодСимвола <> 43)
				И (ВремКодСимвола < 45 Или ВремКодСимвола > 57)
				И (ВремКодСимвола < 65 Или ВремКодСимвола > 90) Тогда
				CODE39 = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если CODE39 Тогда
			ВремТипШтрихкода = "CODE39";
		КонецЕсли                                                     
		
	КонецЕсли;
	
	Если ВремТипШтрихкода= ""  Тогда // QR По умолчанию
		ВремТипШтрихкода = "QR";
	КонецЕсли;
	
	Возврат ВремТипШтрихкода;
	
КонецФункции

#КонецОбласти

#КонецОбласти
