
#Область ПрограммныйИнтерфейс

Функция ЗапуститьОбменВФоне() Экспорт
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("Синхронизация.ВыполнитьСинхронизациюВФоне");
	
	Возврат ФоновоеЗадание.УникальныйИдентификатор;
	
КонецФункции

Процедура ВыполнитьСинхронизациюВФоне() Экспорт
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	УстановитьПодключение = Истина;
	
	ПроверитьУстановитьПодключение(Отказ, СообщениеОбОшибке, УстановитьПодключение);
	
	Если НЕ Отказ Тогда
		ПолучитьВерсиюФорматаОбмена(Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	Если НЕ Отказ И ЗначениеНастроекПовтИсп.ЗагружатьНастройки() Тогда
		ПолучитьНастройки(Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ИдентификаторПередачи = ПолучитьИдентификаторПередачиПрайсЛиста(Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	ЗагрузкаЗавершена = Ложь;
	
	Если НЕ Отказ Тогда
		
		Пока НЕ ЗагрузкаЗавершена Цикл
			
			ЗадержатьНаТаймаут(3); // секунды
			
			ПолучитьПакетПрайсЛиста(ИдентификаторПередачи, Ложь, ЗагрузкаЗавершена, Отказ, СообщениеОбОшибке);
			
			Если Отказ Тогда
				ЗагрузкаЗавершена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Отказ И ЗначениеНастроекПовтИсп.ЗагружатьЗаказы() Тогда
		ПолучитьЗаказы(Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	//ВыгрузитьОтчетыОПродажах
	Если НЕ Отказ Тогда
		ВыгрузитьОтчетыОПродажах(Отказ, СообщениеОбОшибке);
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключение СообщениеОбОшибке;
	Иначе
		Константы.ДатаПоследнейСинхронизации.Установить(
			ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату()
		);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ПолучитьИмяМакетаСхемы(ВерсияФормата) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = 3001;
	КонецЕсли;
	
	Если ВерсияФормата = 1005 Тогда
		
		Возврат "EquipmentService";
		
	ИначеЕсли ВерсияФормата = 1006 Тогда
		
		Возврат "EquipmentService_1_0_0_6";
		
	ИначеЕсли ВерсияФормата = 1007 Тогда
		
		Возврат "EquipmentService_1_0_0_7";
	
	ИначеЕсли ВерсияФормата = 2003 Тогда
		
		Возврат "EquipmentService_2_0_0_3";
		
	ИначеЕсли ВерсияФормата = 3000 Тогда
		
		Возврат "EquipmentService_3_0_0_0";
		
	ИначеЕсли ВерсияФормата = 3001 Тогда
		
		Возврат "EquipmentService_3_0_0_1";

	Иначе
		
		ВерсияФорматаСтрокой = Формат(ВерсияФормата, "ЧГ=0");
		ВерсияФорматаСтрокой = СтрЗаменить(ВерсияФорматаСтрокой, "00", ".");
		
		ТекстСообщения = НСтр("ru = 'Текущая версия приложения ""1С:Мобильная касса"" не поддерживает формат обмена %ВерсияФорматаОбмена%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияФорматаОбмена%", ВерсияФорматаСтрокой);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецФункции

// Connect
//
Процедура ПроверитьУстановитьПодключение(Отказ, СообщениеОбОшибке, УстановитьПодключение = Ложь) Экспорт
	
	Попытка
		
		СообщенияОшибок = СинхронизацияПовтИсп.ИнициализацияСообщенийОшибок();
		
		Если ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
			
			СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
			ТаймАут = 20;
			WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, СообщениеОбОшибке, ТаймАут);
			
			Если УстановитьПодключение И НЕ Отказ Тогда // проверка по ИДУстройства
				ЕстьСоединениеПоИД = WSПрокси.Connect(СтруктураНастроек.ИдентификаторМобильногоУстройства);
				
				Если НЕ ЕстьСоединениеПоИД Тогда
					КодОшибки = 21;
					Отказ = Истина;
					СообщениеОбОшибке = СообщенияОшибок[КодОшибки];
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			КодОшибки = 0;
			
			FILEКаталогОбменаИнформацией = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КаталогФайловогоОбмена");
			КаталогОбменаИнформацией = Новый Файл(FILEКаталогОбменаИнформацией);
			
			Если ПустаяСтрока(FILEКаталогОбменаИнформацией) Тогда
				КодОшибки = 1;
			ИначеЕсли НЕ КаталогОбменаИнформацией.Существует() Тогда
				КодОшибки = 2;
			ИначеЕсли НЕ СоздатьФайлПроверки(FILEКаталогОбменаИнформацией) Тогда
				КодОшибки = 8;
			ИначеЕсли НЕ УдалитьФайлПроверки(FILEКаталогОбменаИнформацией) Тогда
				КодОшибки = 9;
			КонецЕсли;
			
			Если НЕ КодОшибки = 0 Тогда
				Отказ = Истина;
				СообщениеОбОшибке = СообщенияОшибок[КодОшибки];
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		СообщениеОбОшибке = ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

// GetVersion
//
Процедура ПолучитьВерсиюФорматаОбмена(Отказ, Лог) Экспорт
	
	ТекстСообщения ="";
	
	Если НЕ ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Операция получения пакета прайс-листа поддерживается только при обмене через Web-сервис.'");
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
	ТаймАут = 20;
	WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
	
	Версия = 0;
	
	Попытка
		
		Версия = WSПрокси.GetVersion(СтруктураНастроек.ИдентификаторМобильногоУстройства);
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ПодстрокаПоиска = "(GetVersion)";
		
		Если НЕ СтрНайти(ОписаниеОшибки, ПодстрокаПоиска) = 0 Тогда
			// Операция не найдена, версия 1005
			Версия = 1005;
		Иначе
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
	ПараметрыСеанса.ВерсияФорматаОбмена = Версия;
	
КонецПроцедуры

// GetSettings
//
Процедура ПолучитьНастройки(Отказ, Лог, ЕстьИзменения = Ложь, ИнфоТекст = "") Экспорт
	
	ТекстСообщения ="";
	
	Если ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		
		СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
		ТаймАут = 60;
		WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
		
		Попытка
			
			ТекстСообщения = WSПрокси.GetSettings(СтруктураНастроек.ИдентификаторМобильногоУстройства);
			
		Исключение
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			ЗагрузитьНастройки(Отказ, ТекстСообщения, Неопределено, ЕстьИзменения, Лог);
		КонецЕсли;
		
	Иначе
		
		ПутьКФайламОбмена = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КаталогФайловогоОбмена");
		ИмяФайлаНастроек  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИмяФайлаНастроек");
		ПутьКФайламОбмена = ОбщегоНазначенияКлиентСервер.ДополнитьИмяКаталогаСлешем(ПутьКФайламОбмена);
		
		ПолныйПутьФайла = ПутьКФайламОбмена + ИмяФайлаНастроек + ".xml";
		Файлы = НайтиФайлы(ПолныйПутьФайла,,Ложь);
		
		Если Файлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Отказ Тогда
			ЗагрузитьНастройки(Отказ, Неопределено, Файлы[0], ЕстьИзменения, Лог);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// GetPriceList
//
Процедура ПолучитьПрайсЛист(Отказ, Лог, ЕстьИзменения = Ложь, ИнфоТекст = "") Экспорт
	
	ТекстСообщения ="";
	
	Если ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		
		СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
		ТаймАут = 180;
		WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
		
		Попытка
			
			XMLТекстСообщения = WSПрокси.GetPriceList(СтруктураНастроек.ИдентификаторМобильногоУстройства);
			
		Исключение
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			ЗагрузитьПрайсЛист(XMLТекстСообщения, Неопределено, Отказ, Лог);
		КонецЕсли;
		
	Иначе
		
		ПутьКФайламОбмена 		= ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КаталогФайловогоОбмена");
		МаскаФайловПрайсЛиста 	= ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("МаскаФайловПрайсЛиста");
		
		ПутьКФайламОбмена = ОбщегоНазначенияКлиентСервер.ДополнитьИмяКаталогаСлешем(ПутьКФайламОбмена);
		
		Файлы = НайтиФайлы(ПутьКФайламОбмена, МаскаФайловПрайсЛиста + "*.xml", Ложь);
		
		Если Файлы.Количество() = 0 Тогда
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Прайс-лист: файлы не найдены'");
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
		Иначе
			
			Файл = Файлы[0];
			
			Если НЕ Файл = Неопределено Тогда
				ПолноеИмяФайла = Файл.ПолноеИмя;
				ИмяФайла = Файл.Имя;
				
				ВерсияФорматаОбмена = ОпределитьВерсиюФорматаФайла(ПолноеИмяФайла);
				УстановитьВерсиюФорматаПоследнейЗагрузки(ВерсияФорматаОбмена);
			КонецЕсли;
			
			Если ВерсияФорматаОбмена > 2000 Тогда
				
				ЗагрузитьДанныеИзФайла(Файл, Отказ, Лог, ВерсияФорматаОбмена);
				
			Иначе
				
				Для Каждого Файл Из Файлы Цикл
					Если Не Отказ Тогда
						
						ЗагрузитьПрайсЛист(Неопределено, Файл, Отказ, Лог);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// PreparePriceList
//
Функция ПолучитьИдентификаторПередачиПрайсЛиста(Отказ, Лог) Экспорт
	
	Если НЕ ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
	ТаймАут = 180;
	WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
	
	Попытка
		ТекстСообщения = WSПрокси.PreparePriceList(СтруктураНастроек.ИдентификаторМобильногоУстройства);
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекстСообщения;
	
КонецФункции

// GetPriceListPackage
//
Процедура ПолучитьПакетПрайсЛиста(ИдентификаторПередачи,
		Рестарт, ЗагрузкаЗавершена, Отказ, Лог, ЕстьИзменения = Ложь, ИнфоТекст = "") Экспорт
	
	ТекстСообщения ="";
	
	Если НЕ ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		Отказ = Истина;
		ТекстСообщения =
			НСтр("ru = 'Операция получения пакета прайс-листа поддерживается только при обмене через Web-сервис.'");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
	ТаймАут = 180;
	WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
	
	Попытка
		
		XMLТекстСообщения = WSПрокси.GetPriceListPackage(
			СтруктураНастроек.ИдентификаторМобильногоУстройства,
			ИдентификаторПередачи,
			Рестарт
		);
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		ЗагрузитьПакетПрайсЛиста(XMLТекстСообщения, ЗагрузкаЗавершена, Отказ, Лог);
	КонецЕсли;
	
КонецПроцедуры

// PostDocs
//
Процедура ВыгрузитьОтчетыОПродажах(Отказ, Лог, ЕстьИзменения = Ложь, ИнфоТекст = "") Экспорт
	
	Попытка
		
		ТекстСообщения ="";
		ОтчетыДляВыгрузки = Документы.ОтчетОРозничныхПродажах.ОтчетыОПродажахКВыгрузке();
		
		Если ОтчетыДляВыгрузки.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет отчетов для выгрузки'");
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
			
			ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
			
			Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
			
			СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
			ТаймАут = 180;
			WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
			
			ОтчетXDTO = ПолучитьОтчетОПродажах(ВерсияФорматаОбмена, ОтчетыДляВыгрузки, Фабрика, Отказ, Лог);
			ТекстXML = ПолучитьТекстXMLОбъектаXDTO(Фабрика, ОтчетXDTO, Отказ, Лог);
			
			Если НЕ Отказ Тогда
				
				Если ВерсияФорматаОбмена > 2000 Тогда
					
					ТипДокумента = "SaleReport";
				Иначе
					
					ТипДокумента = "SalesReport";
				КонецЕсли;
				
				ТекстСообщения = WSПрокси.PostDocs(СтруктураНастроек.ИдентификаторМобильногоУстройства, ТипДокумента, ТекстXML);
				ОбработатьОтветОтправкиДокумента(Отказ, ТекстСообщения, Лог);
			КонецЕсли;
			
		Иначе
			
			ПутьКФайламОбмена 		= ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КаталогФайловогоОбмена");
			ИмяФайлаОтчетаОПродажах = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИмяФайлаОтчетаОПродажах");
			
			ПутьКФайламОбмена = ОбщегоНазначенияКлиентСервер.ДополнитьИмяКаталогаСлешем(ПутьКФайламОбмена);
			ПолноеИмяФайла = ПутьКФайламОбмена + ИмяФайлаОтчетаОПродажах + ".xml";
			
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				
				
				ВерсияФорматаФайла = ОпределитьВерсиюФорматаФайла(ПолноеИмяФайла);
				
				Если ВерсияФорматаФайла > 2000 Тогда
					
					ИмяТипаXDTO = "ImportData";
				Иначе
					
					ИмяТипаXDTO = "SalesReports";
				КонецЕсли;
				
				Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаФайла, ИмяТипаXDTO, Неопределено, ПолноеИмяФайла);
				
				СвойстваXDTO = Данные.Свойства();
				Если НЕ СвойстваXDTO.Получить("Processed") = Неопределено Тогда
					Обработан = Данные.Processed;
					Если НЕ ЗначениеЗаполнено(Обработан) Тогда
						
						ТекстСообщения = НСтр("ru = 'Отчеты о продажах: ""%ИмяФайла%"" не был обработан при предыдущей выгрузке.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайлаОтчетаОПродажах);
						ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
						
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ВерсияФорматаОбмена = ВерсияФорматаОбменаПоследнейЗагрузки();
			Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
			
			Если НЕ Отказ Тогда
				
				ОтчетыXDTO = ПолучитьОтчетОПродажах(ВерсияФорматаОбмена, ОтчетыДляВыгрузки, Фабрика, Отказ, Лог, Истина);
				
				Если ВерсияФорматаОбмена > 2000 Тогда
					
					ИмяТипаXDTO = "ImportData";
					ОбъектВыгрузкиXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, ИмяТипаXDTO);
					
					ОбъектВыгрузкиXDTO.SaleReports = ОтчетыXDTO;
					ОбъектВыгрузкиXDTO.FormatVersion = ВерсияФорматаОбмена;
					
				Иначе
					
					ОбъектВыгрузкиXDTO = ОтчетыXDTO;
					ОбъектВыгрузкиXDTO.FormatVersion = ВерсияФорматаОбмена;
				КонецЕсли;
				
				
				Если НЕ Отказ Тогда
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
					ЗаписьXML.ЗаписатьОбъявлениеXML();
					
					Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектВыгрузкиXDTO);
					ЗаписьXML.Закрыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			
			Для Каждого Отчет Из ОтчетыДляВыгрузки Цикл
				
				ОтчетОбъект = Отчет.ПолучитьОбъект();
				ОтчетОбъект.СтатусОбмена = Перечисления.СтатусыОбмена.Синхронизирован;
				ОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
			ТекстСообщения = НСтр("ru = 'Отчеты о продажах: выгружено %КоличествоОтчетов%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОтчетов%", ОтчетыДляВыгрузки.Количество());
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьСовместимостьФорматовОбмена(Отказ, Лог) Экспорт
	
	Версии = СинхронизацияПовтИсп.ВерсииПоддерживаемыхФорматовОбмена();
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	
	Если Версии.Найти(ВерсияФорматаОбмена) = Неопределено Тогда
		Отказ = Истина;
		
		ВерсияФорматаСтрокой = Формат(ВерсияФорматаОбмена, "ЧГ=0");
		ВерсияФорматаСтрокой = СтрЗаменить(ВерсияФорматаСтрокой, "00", ".");
		
		ТекстСообщения = НСтр("ru = 'Текущая версия приложения ""1С:Мобильная касса"" не поддерживает формат обмена %ВерсияФорматаОбмена%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияФорматаОбмена%", ВерсияФорматаСтрокой);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗаказы(Отказ, Лог, ЕстьИзменения = Ложь, ИнфоТекст = "") Экспорт
	
	ТекстСообщения ="";
	
	Если ЗначениеНастроекПовтИсп.ТранспортСинхронизацииЧерезWS() Тогда
		
		СтруктураНастроек = СинхронизацияПовтИсп.СтруктураПараметровWS();
		ТаймАут = 180;
		WSПрокси = ПолучитьWSПрокси(Отказ, СтруктураНастроек,, Лог, ТаймАут);
		
		Попытка
			
			XMLТекстСообщения = WSПрокси.GetDocs(СтруктураНастроек.ИдентификаторМобильногоУстройства, "Order");
			
		Исключение
			
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			ЗагрузитьЗаказы(Отказ, XMLТекстСообщения, Неопределено, ЕстьИзменения, ИнфоТекст, Лог);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуПоследнейСинхронизации() Экспорт
	
	Возврат Константы.ДатаПоследнейСинхронизации.Получить();
	
КонецФункции

Функция ОтносительнаяДатаСинхронизации(Знач ДатаСинхронизации) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		
		Возврат НСтр("ru = 'Никогда'");
		
	КонецЕсли;
	
	ДатаТекущая = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
	
	Интервал = ДатаТекущая - ДатаСинхронизации;
	
	ВремяСинхронизации = "";
	
	Если Интервал < 0 Тогда // 0 мин
		
		Результат = Формат(ДатаСинхронизации, "ДЛФ=DDT");
		
	ИначеЕсли Интервал < 60 * 5 Тогда // 5 мин
		
		Результат = НСтр("ru = 'Сейчас'");
		
	ИначеЕсли Интервал < 60 * 15 Тогда // 15 мин
		
		Результат = НСтр("ru = '5 мин. назад'");
		
	ИначеЕсли Интервал < 60 * 30 Тогда // 30 мин
		
		Результат = НСтр("ru = '15 мин. назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 1 Тогда // 1 час
		
		Результат = НСтр("ru = '30 мин. назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 2 Тогда // 2 часа
		
		Результат = НСтр("ru = '1 час назад'");
		
	ИначеЕсли Интервал < 60 * 60 * 3 Тогда // 3 часа
		
		Результат = НСтр("ru = '2 часа назад'");
		
	Иначе
		
		КоличествоДнейРазницы = КоличествоДнейРазницы(ДатаСинхронизации, ДатаТекущая);
		
		Если КоличествоДнейРазницы = 0 Тогда // сегодня
			
			Результат = НСтр("ru = 'Сегодня'");
			
		ИначеЕсли КоличествоДнейРазницы = 1 Тогда // вчера
			
			Результат = НСтр("ru = 'Вчера'");
			
		ИначеЕсли КоличествоДнейРазницы = 2 Тогда // позавчера
			
			Результат = НСтр("ru = 'Позавчера'");
			
		Иначе // давно
			
			Если Год(ДатаСинхронизации) = Год(ДатаТекущая) Тогда
				
				Результат = Формат(ДатаСинхронизации, "ДФ='dd MMM'; ДЛФ=DDT");
			Иначе
				
				Результат = Формат(ДатаСинхронизации, "ДФ='dd MMM yyyy'; ДЛФ=DDT");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗадержатьНаТаймаут(Сек = 1)
	
	СтартДата = ТекущаяДата();
	
	ТекДата = СтартДата;
	
	Пока ТекДата <= (СтартДата + Сек) цикл
		ТекДата = ТекущаяДата();
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоДнейРазницы(Знач Дата1, Знач Дата2)
	
	Возврат Цел((НачалоДня(Дата2) - НачалоДня(Дата1)) / 86400);
	
КонецФункции

Процедура ОбработатьОтветОтправкиДокумента(Отказ, XMLТекстСообщения, Лог)
	
	ИмяТипаXDTO = "Response";
	Если ПараметрыСеанса.ВерсияФорматаОбмена >= 1006 Тогда
		ИмяТипаXDTO = "PostDocsResponse";
	КонецЕсли;
	
	Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ПараметрыСеанса.ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения, Неопределено);
	
	Если (НЕ Данные.Свойства().Получить("IsFormed") = Неопределено
			И (Данные.IsFormed = "false" ИЛИ Данные.IsFormed = Ложь)) ИЛИ
		(НЕ Данные.Свойства().Получить("Succeeded") = Неопределено
			И (Данные.Succeeded = "false" ИЛИ Данные.Succeeded = Ложь)) ИЛИ
		(НЕ Данные.Свойства().Получить("IsSuccess") = Неопределено
			И (Данные.IsSuccess = "false" ИЛИ Данные.IsSuccess = Ложь))
			Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Description) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, НСтр("ru = 'Ответ принимающего сервера:'"));
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, Данные.Description);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОтчетОПродажах(ВерсияФорматаОбмена, ОтчетыДляВыгрузки, Фабрика, Отказ, Лог, ПолучитьОбъектXDTO = Ложь, ИнфоТекст = "")
	
	Если ОтчетыДляВыгрузки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет не выгруженных отчетов о продажах.'");
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		ИмяТипа = "SaleReports";
	Иначе
		ИмяТипа = "SalesReports";
	КонецЕсли;
	
	ОтчетыОПродажахXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, ИмяТипа);
	
	Если ВерсияФорматаОбмена > 1005 И НЕ ВерсияФорматаОбмена > 2000 Тогда
		
		ОтчетыОПродажахXDTO.FormatVersion = ВерсияФорматаОбмена;
		
	КонецЕсли;
	
	ВыгрузитьОтчет(ВерсияФорматаОбмена, Фабрика, ОтчетыДляВыгрузки, ОтчетыОПродажахXDTO);
	
	Если НЕ ОтчетыОПродажахXDTO.Свойства().Получить("SalesReport") = Неопределено Тогда
		ОтчетыXDTO = ОтчетыОПродажахXDTO.SalesReport;
		
	ИначеЕсли НЕ ОтчетыОПродажахXDTO.Свойства().Получить("Report") = Неопределено Тогда
		ОтчетыXDTO = ОтчетыОПродажахXDTO.Report;
		
	ИначеЕсли НЕ ОтчетыОПродажахXDTO.Свойства().Получить("SaleReport") = Неопределено Тогда
		ОтчетыXDTO = ОтчетыОПродажахXDTO.SaleReport;
		
	КонецЕсли;
	
	Если ОтчетыXDTO.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Выгружаемые отчеты не содержат данных для выгрузки.'");
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
		Отказ = Истина;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		ОтчетыОПродажахXDTO.Проверить();
	Исключение
		
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
		Отказ = Истина;
	КонецПопытки;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОтчетыОПродажахXDTO;
	
КонецФункции

Процедура ВыгрузитьОтчет(ВерсияФорматаОбмена, Фабрика, ОтчетыДляВыгрузки, ОтчетыОПродажахXDTO)
	
	Если ВерсияФорматаОбмена >= 2000 Тогда
		
		ВыгрузитьОтчет2000(ВерсияФорматаОбмена, Фабрика, ОтчетыДляВыгрузки, ОтчетыОПродажахXDTO);
		
	Иначе
		
		Для Каждого Отчет Из ОтчетыДляВыгрузки Цикл
			ВыгрузитьОтчет100Х(ВерсияФорматаОбмена, Фабрика, Отчет, ОтчетыОПродажахXDTO);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьОтчет100Х(ВерсияФорматаОбмена, Фабрика, Отчет, ОтчетыОПродажахXDTO)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Ссылка.ВидОперации,
	|	Док.Количество,
	|	Док.Сумма / Док.Количество КАК Цена,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	Док.СуммаНДС КАК СуммаНДС,
	|	Док.Сумма КАК Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.Чек.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка.КассоваяСмена = &КассоваяСмена
	|	И Док.Ссылка.Проведен
	|	И Док.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОбщие.Номенклатура,
	|	ТоварыОбщие.Количество,
	|	ТоварыОбщие.Цена,
	|	ТоварыОбщие.СтавкаНДС,
	|	ТоварыОбщие.СуммаНДС,
	|	ТоварыОбщие.Сумма
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Номенклатура КАК Номенклатура,
	|		СУММА(ВЫБОР
	|				КОГДА Товары.ВидОперации = &ВидОперацииПродажа
	|					ТОГДА Товары.Количество
	|				ИНАЧЕ -Товары.Количество
	|			КОНЕЦ) КАК Количество,
	|		Товары.Цена КАК Цена,
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(ВЫБОР
	|				КОГДА Товары.ВидОперации = &ВидОперацииПродажа
	|					ТОГДА Товары.СуммаНДС
	|				ИНАЧЕ -Товары.СуммаНДС
	|			КОНЕЦ) КАК СуммаНДС,
	|		СУММА(ВЫБОР
	|				КОГДА Товары.ВидОперации = &ВидОперацииПродажа
	|					ТОГДА Товары.Сумма
	|				ИНАЧЕ -Товары.Сумма
	|			КОНЕЦ) КАК Сумма
	|	ИЗ
	|		Товары КАК Товары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Номенклатура,
	|		Товары.СтавкаНДС,
	|		Товары.Цена
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВЫБОР
	|				КОГДА Товары.ВидОперации = &ВидОперацииПродажа
	|					ТОГДА Товары.Количество
	|				ИНАЧЕ -Товары.Количество
	|			КОНЕЦ) <> 0) КАК ТоварыОбщие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаТовары.Количество) КАК Quantity,
	|	ТаблицаТовары.Цена КАК Price,
	|	СУММА(ТаблицаТовары.Сумма) КАК Amount,
	|	ТаблицаТовары.Номенклатура.КодПоиска КАК Code
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Номенклатура.КодПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекОплаты.ТипОплаты КАК ТипОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекОплаты.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА ЧекОплаты.Сумма
	|			ИНАЧЕ -ЧекОплаты.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	ЧекОплаты.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	Документ.Чек.Оплаты КАК ЧекОплаты
	|ГДЕ
	|	ЧекОплаты.Ссылка.КассоваяСмена = &КассоваяСмена
	|	И ЧекОплаты.Ссылка.Проведен
	|	И ЧекОплаты.Ссылка.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Пробит), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Архивный))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекОплаты.ТипОплаты,
	|	ЧекОплаты.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОплат.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Наличные)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК PaymentType,
	|	ТаблицаОплат.Сумма КАК Amount,
	|	ЕСТЬNULL(ТаблицаОплат.ВидОплаты.КодПоиска, &ПустаяСтрока) КАК CodePaymentSort,
	|	ЕСТЬNULL(ТаблицаОплат.ВидОплаты.КодПоиска, &ПустаяСтрока) КАК CodePaymentKind
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	ТаблицаОплат.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассоваяСмена.Номер,
	|	КассоваяСмена.НомерСмены,
	|	КассоваяСмена.НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", Отчет.КассоваяСмена);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ВидОперацииПродажа", 0);
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатСведенияОСмене = РезультатЗапроса[5];
	
	ОтчетXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ОтчетОПродажах");
	
	ВыборкаСведенияОСмене = РезультатСведенияОСмене.Выбрать();
	ВыборкаСведенияОСмене.Следующий();
	
	Номер = ?(ЗначениеЗаполнено(ВыборкаСведенияОСмене.НомерСмены), ВыборкаСведенияОСмене.НомерСмены, ВыборкаСведенияОСмене.Номер);
	
	ОтчетXDTO.SessionNumber = Число(Номер);
	ОтчетXDTO.DateClose     = ВыборкаСведенияОСмене.ОкончаниеКассовойСмены;
	ОтчетXDTO.DateOpen     = ВыборкаСведенияОСмене.НачалоКассовойСмены;
	
	// Товары
	РезультатТовары = РезультатЗапроса[2];
	ТаблицаТовары = РезультатТовары.Выгрузить();
	
	ТаблицаТоваровXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ОтчетОПродажахТовары");
	
	Для каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		ЗаписьТаблицыТоваровXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ОтчетОПродажахТоварыЗапись");
		ЗаполнитьЗначенияСвойств(ЗаписьТаблицыТоваровXDTO, СтрокаТаблицы);
		
		ТаблицаТоваровXDTO.RecordGood.Добавить(ЗаписьТаблицыТоваровXDTO);
		
	КонецЦикла;
	
	ОтчетXDTO.Goods = ТаблицаТоваровXDTO;
	
	// Оплаты
	РезультатОплаты = РезультатЗапроса[4];
	ТаблицаОплаты = РезультатОплаты.Выгрузить();

	ТаблицаОплатыXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ОтчетОПродажахОплаты");
	
	Для каждого СтрокаТаблицы Из ТаблицаОплаты Цикл
		ЗаписьТаблицыТоваровXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ОтчетОПродажахОплатыЗапись");
		ЗаполнитьЗначенияСвойств(ЗаписьТаблицыТоваровXDTO, СтрокаТаблицы);
		
		ТаблицаОплатыXDTO.RecordPayment.Добавить(ЗаписьТаблицыТоваровXDTO);
	
	КонецЦикла;
	
	ОтчетXDTO.Payments = ТаблицаОплатыXDTO;
	
	ОтчетыОПродажахXDTO.Report.Добавить(ОтчетXDTO);
	
КонецПроцедуры

Процедура ВыгрузитьОтчет2000(ВерсияФорматаОбмена, Фабрика, ОтчетыДляВыгрузки, ОтчетыОПродажахXDTO)
	
	#Область Запрос
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОПродажах,
	|	ОтчетОРозничныхПродажах.СтатусОбмена КАК СтатусОбмена,
	|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена,
	|	ОтчетОРозничныхПродажах.КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены,
	|	ОтчетОРозничныхПродажах.КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены,
	|	ОтчетОРозничныхПродажах.КассоваяСмена.Номер КАК Номер,
	|	ОтчетОРозничныхПродажах.КассоваяСмена.НомерСмены КАК НомерСмены,
	|	ОтчетОРозничныхПродажах.Дата КАК Дата
	|ПОМЕСТИТЬ ОтчетыОПродажах
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&ОтчетыДляВыгрузки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КассоваяСмена,
	|	ОтчетОПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Чек.Ссылка КАК Чек,
	|	Чек.Номер КАК Номер,
	|	Чек.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА Чек.ВидОперации = &ВидОперацииПродажа
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств)
	|	КОНЕЦ КАК ТипРасчетаДенежнымиСредствами,
	|	Чек.СистемаНалогообложенияККТ КАК СистемаНалогообложения,
	|	Чек.ЗаказКлиента КАК Заказ,
	|	Чек.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета,
	|	ОтчетыОПРодажах.ОтчетОПродажах КАК ОтчетОПродажах,
	|	ОтчетыОПРодажах.КассоваяСмена КАК КассоваяСмена,
	|	Чек.ЧекПродажи КАК ЧекПродажи
	|ПОМЕСТИТЬ Чеки
	|ИЗ
	|	ОтчетыОПродажах КАК ОтчетыОПРодажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек КАК Чек
	|		ПО ОтчетыОПРодажах.КассоваяСмена = Чек.КассоваяСмена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Чек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетыОПРодажах.ОтчетОПродажах КАК ОтчетОПродажах,
	|	ОтчетыОПРодажах.КассоваяСмена КАК КассоваяСмена,
	|	ОтчетыОПРодажах.НачалоКассовойСмены КАК НачалоКассовойСмены,
	|	ОтчетыОПРодажах.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены,
	|	ОтчетыОПРодажах.Номер КАК Номер,
	|	ОтчетыОПРодажах.НомерСмены КАК НомерСмены,
	|	ОтчетыОПРодажах.Дата КАК Дата
	|ИЗ
	|	ОтчетыОПродажах КАК ОтчетыОПРодажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Чеки.Чек КАК Чек,
	|	Чеки.Номер КАК Номер,
	|	Чеки.Дата КАК Дата,
	|	Чеки.ТипРасчетаДенежнымиСредствами КАК ТипРасчетаДенежнымиСредствами,
	|	Чеки.СистемаНалогообложения КАК СистемаНалогообложения,
	|	Чеки.Заказ КАК Заказ,
	|	Чеки.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета,
	|	Чеки.КассоваяСмена КАК КассоваяСмена,
	|	Чеки.ОтчетОПродажах КАК ОтчетОПродажах,
	|	Чеки.ЧекПродажи КАК ЧекПродажи
	|ИЗ
	|	Чеки КАК Чеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекТовары.Ссылка КАК Чек,
	|	ЧекТовары.Номенклатура КАК Номенклатура,
	|	ЧекТовары.Номенклатура.КодПоиска КАК КодПоиска,
	|	ЧекТовары.Количество КАК Количество,
	|	ЧекТовары.Цена КАК Цена,
	|	ЧекТовары.Сумма КАК Сумма,
	|	ЧекТовары.СтавкаНДС КАК СтавкаНДС,
	|	Чеки.КассоваяСмена КАК КассоваяСмена,
	|	Чеки.ОтчетОПродажах КАК ОтчетОПродажах,
	|	ЧекТовары.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.Чек.Товары КАК ЧекТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Чеки КАК Чеки
	|		ПО ЧекТовары.Ссылка = Чеки.Чек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекОплаты.Ссылка КАК Чек,
	|	ЧекОплаты.Сумма КАК Сумма,
	|	ЧекОплаты.ТипОплаты КАК ТипОплаты,
	|	ЧекОплаты.ВидОплаты КАК ВидОплаты,
	|	ЧекОплаты.ВидОплаты.КодПоиска КАК ВидОплатыКод,
	|	Чеки.КассоваяСмена КАК КассоваяСмена,
	|	Чеки.ОтчетОПродажах КАК ОтчетОПродажах
	|ИЗ
	|	Чеки КАК Чеки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Чек.Оплаты КАК ЧекОплаты
	|		ПО Чеки.Чек = ЧекОплаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнесениеИзъятиеНаличных.ВидДвиженияНаличных КАК ВидДвиженияНаличных,
	|	ВнесениеИзъятиеНаличных.Сумма КАК Сумма,
	|	ВнесениеИзъятиеНаличных.Ссылка КАК ВнесениеВыемкаСсылка,
	|	ВнесениеИзъятиеНаличных.КассоваяСмена КАК КассоваяСмена,
	|	ВнесениеИзъятиеНаличных.Номер КАК Номер,
	|	ВнесениеИзъятиеНаличных.Дата КАК Дата
	|ИЗ
	|	Документ.ВнесениеИзъятиеНаличных КАК ВнесениеИзъятиеНаличных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтчетыОПродажах КАК ОтчетыОПродажах
	|		ПО ВнесениеИзъятиеНаличных.КассоваяСмена = ОтчетыОПродажах.КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекМарки.КодМаркировки КАК КодМаркировки,
	|	ЧекМарки.КлючСвязи КАК КлючСвязи,
	|	ЧекМарки.Ссылка КАК Чек
	|ИЗ
	|	Документ.Чек.Марки КАК ЧекМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Чеки КАК Чеки
	|		ПО ЧекМарки.Ссылка = Чеки.Чек";
	
	Запрос.УстановитьПараметр("ВидОперацииПродажа", 0);
	Запрос.УстановитьПараметр("ОтчетыДляВыгрузки",  ОтчетыДляВыгрузки);
	
	#КонецОбласти
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ОтчетыОПРодажах = РезультатЗапроса[2].Выгрузить();
	Чеки 			= РезультатЗапроса[3].Выгрузить();
	ЧекТовары 		= РезультатЗапроса[4].Выгрузить();
	ЧекОплаты 		= РезультатЗапроса[5].Выгрузить();
	ВнесенияВыемки 	= РезультатЗапроса[6].Выгрузить();
	Марки 			= РезультатЗапроса[7].Выгрузить();
	
	Для Каждого ЗаписьОтчетОПродажах Из ОтчетыОПРодажах Цикл
		
		Номер = ?(ЗначениеЗаполнено(ЗаписьОтчетОПродажах.НомерСмены), ЗаписьОтчетОПродажах.НомерСмены, ЗаписьОтчетОПродажах.Номер);
		
		ОтчетXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ОтчетОПродажах");
		ОтчетXDTO.ShiftNumber = ЗаписьОтчетОПродажах.Номер;
		ОтчетXDTO.OpeningDate = ЗаписьОтчетОПродажах.НачалоКассовойСмены;
		ОтчетXDTO.UUID = ЗаписьОтчетОПродажах.ОтчетОПродажах.УникальныйИдентификатор();
		
		Если ВерсияФорматаОбмена >= 3000 Тогда
			
			Если ЗначениеЗаполнено(ЗаписьОтчетОПродажах.ОкончаниеКассовойСмены) Тогда
				
				ОтчетXDTO.ClosingDate = ЗаписьОтчетОПродажах.ОкончаниеКассовойСмены;
				ОтчетXDTO.ShiftState = 1; // закрыта
			Иначе
				ОтчетXDTO.ShiftState = 2; // открыта
			КонецЕсли;
		Иначе
			ОтчетXDTO.ClosingDate = ЗаписьОтчетОПродажах.ОкончаниеКассовойСмены;
		КонецЕсли;
		
		// Чеки
		#Область Чеки
		
		ПараметрыОтбораЧеков = Новый Структура;
		ПараметрыОтбораЧеков.Вставить("КассоваяСмена", ЗаписьОтчетОПродажах.КассоваяСмена);
		ПараметрыОтбораЧеков.Вставить("ОтчетОПродажах", ЗаписьОтчетОПродажах.ОтчетОПродажах);
		
		НайденныеЧеки = Чеки.НайтиСтроки(ПараметрыОтбораЧеков);
		
		ЧекиXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "Чеки");
		
		Для Каждого ЗаписьЧек Из НайденныеЧеки Цикл
			
			ЧекXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "Чек");
			
			ЧекXDTO.Date 	= ЗаписьЧек.Дата;
			ЧекXDTO.Number 	= ЗаписьЧек.Номер;
			ЧекXDTO.UUID 	= ЗаписьЧек.Чек.УникальныйИдентификатор();
			
			ЧекXDTO.TaxationSystem = ОбщегоНазначенияПовтИсп.ПолучитьКодТипаСистемыНалогообложенияККТ(
				ЗаписьЧек.СистемаНалогообложения
			);
			
			Если ЗначениеЗаполнено(ЗаписьЧек.ЧекПродажи) Тогда
				ЧекXDTO.RefDocumentUUID = ЗаписьЧек.ЧекПродажи.УникальныйИдентификатор();
				ЧекXDTO.RefDocumentType = "Check";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗаписьЧек.Заказ) Тогда
				ЧекXDTO.RefDocumentUUID = ЗаписьЧек.Заказ.УникальныйИдентификатор();
				ЧекXDTO.RefDocumentType = "Order";
			КонецЕсли;
		
			ЧекXDTO.OperationType = МенеджерОборудованияКлиентСервер.КодРасчетаДенежнымиСредствами(
				ЗаписьЧек.ТипРасчетаДенежнымиСредствами
			);
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Чек", ЗаписьЧек.Чек);
			ПараметрыОтбора.Вставить("КассоваяСмена", ЗаписьЧек.КассоваяСмена);
			ПараметрыОтбора.Вставить("ОтчетОПродажах", ЗаписьЧек.ОтчетОПродажах);
			
			// Товары чека
			НайденныеТовары = ЧекТовары.НайтиСтроки(ПараметрыОтбора);
			
			ЕстьТовары = Ложь;
			Если НЕ НайденныеТовары.Количество() = 0 Тогда
				ТоварыЧекаXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ЧекТовары");
				ЕстьТовары = Истина;
			КонецЕсли;
			
			КодПризнакаСпособаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаСпособаРасчета(
				ЗаписьЧек.ПризнакСпособаРасчета
			);
			
			Для Каждого ЗаписьТовар Из НайденныеТовары Цикл
				
				ЗаписьТоварXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ЧекТовар");
				ЗаписьТоварXDTO.Code 		= ЗаписьТовар.КодПоиска;
				ЗаписьТоварXDTO.Quantity 	= ЗаписьТовар.Количество;
				ЗаписьТоварXDTO.Price 		= ЗаписьТовар.Цена;
				ЗаписьТоварXDTO.Sum 		= ЗаписьТовар.Сумма;
				
				
				// Маркировка
				
				Если ЗначениеЗаполнено(ЗаписьТовар.КлючСвязи) Тогда
					
					Если ВерсияФорматаОбмена >= 3001 Тогда 
						
						ПараметрыПоиска = Новый Структура;
						ПараметрыПоиска.Вставить("КлючСвязи", ЗаписьТовар.КлючСвязи);
						ПараметрыПоиска.Вставить("Чек", ЗаписьТовар.Чек);
						
						НайденныеМарки = Марки.НайтиСтроки(ПараметрыПоиска);
						
						МаркиXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ШтрихкодыМаркированнойПродукции");
												
						Для Каждого Марка Из НайденныеМарки Цикл
							МаркиXDTO.ExciseStamp.Добавить(Марка.КодМаркировки);
						КонецЦикла;
						
						Если НайденныеМарки.Количество() > 0 Тогда
							ЗаписьТоварXDTO.ExciseStamps = МаркиXDTO;
						КонецЕсли;
					Иначе
						
						ПараметрыПоиска = Новый Структура;
						ПараметрыПоиска.Вставить("КлючСвязи", ЗаписьТовар.КлючСвязи);
						ПараметрыПоиска.Вставить("Чек", ЗаписьТовар.Чек);
						
						НайденныеМарки = Марки.НайтиСтроки(ПараметрыПоиска);
												
						КодАкцизнойМарки = "";
						
						Для Каждого Марка Из НайденныеМарки Цикл
							
							Если НЕ КодАкцизнойМарки = "" Тогда
								КодАкцизнойМарки = КодАкцизнойМарки + ",";
							КонецЕсли;
							
							КодАкцизнойМарки = КодАкцизнойМарки + Марка.КодМаркировки 
							
						КонецЦикла;
						
						Если НайденныеМарки.Количество() > 0 Тогда
							ЗаписьТоварXDTO.AlcoholExciseStamp = КодАкцизнойМарки;
						КонецЕсли;

					КонецЕсли;
					
				КонецЕсли;
				
				ЗаписьТоварXDTO.TaxRate = ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСККТ(ЗаписьТовар.СтавкаНДС);
				
				ЗаписьТоварXDTO.PaymentMethod = КодПризнакаСпособаРасчета;
				
				ТоварыЧекаXDTO.Good.Добавить(ЗаписьТоварXDTO);
				
			КонецЦикла;
			
			Если ЕстьТовары Тогда
				ЧекXDTO.Goods = ТоварыЧекаXDTO;
			КонецЕсли;
			
			// оплаты чека
			НайденныеОплаты = ЧекОплаты.НайтиСтроки(ПараметрыОтбора);
			
			ЕстьОплаты = Ложь;
			Если НЕ НайденныеОплаты.Количество() = 0 Тогда
				ОплатыЧекаXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "Оплаты");
				ЕстьОплаты = Истина;
				
				ЗаписьОплатаXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "Оплата");
				ЗаписьОплатаXDTO.Cash 				= 0;
				ЗаписьОплатаXDTO.ElectronicPayment 	= 0;
				ЗаписьОплатаXDTO.PrePayment 		= 0;
				ЗаписьОплатаXDTO.PostPayment 		= 0;
				ЗаписьОплатаXDTO.Barter 			= 0;
				
				Для Каждого ЗаписьОплата Из НайденныеОплаты Цикл
					
					Если ЗначениеЗаполнено(ЗаписьОплата.ВидОплатыКод) Тогда
						ЗаписьОплатаXDTO.ElectronicPaymentOptionCode = ЗаписьОплата.ВидОплатыКод;
					КонецЕсли;
					
					Если ЗаписьОплата.ТипОплаты = Перечисления.ТипыОплаты.Наличные Тогда
						
						ЗаписьОплатаXDTO.Cash = ЗаписьОплатаXDTO.Cash + ЗаписьОплата.Сумма;
						
					ИначеЕсли ЗаписьОплата.ТипОплаты = Перечисления.ТипыОплаты.ПлатежнаяКарта Тогда
						
						ЗаписьОплатаXDTO.ElectronicPayment = ЗаписьОплатаXDTO.ElectronicPayment + ЗаписьОплата.Сумма;
						
					ИначеЕсли ЗаписьОплата.ТипОплаты = Перечисления.ТипыОплаты.ВстречноеПредоставление Тогда
						
						ЗаписьОплатаXDTO.Barter = ЗаписьОплатаXDTO.Barter + ЗаписьОплата.Сумма;
						
					ИначеЕсли ЗаписьОплата.ТипОплаты = Перечисления.ТипыОплаты.Постоплата Тогда
						
						ЗаписьОплатаXDTO.PostPayment = ЗаписьОплатаXDTO.PostPayment + ЗаписьОплата.Сумма;
						
					ИначеЕсли ЗаписьОплата.ТипОплаты = Перечисления.ТипыОплаты.Предоплата Тогда
						
						ЗаписьОплатаXDTO.PrePayment = ЗаписьОплатаXDTO.PrePayment + ЗаписьОплата.Сумма;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ОплатыЧекаXDTO.Payment.Добавить(ЗаписьОплатаXDTO);
				
			КонецЕсли;
			
			Если ЕстьОплаты Тогда
				ЧекXDTO.Payments = ОплатыЧекаXDTO;
			КонецЕсли;
			
			ЧекиXDTO.Check.Добавить(ЧекXDTO);
		КонецЦикла;
		
		ОтчетXDTO.Checks = ЧекиXDTO;
		ОтчетыОПродажахXDTO.SaleReport.Добавить(ОтчетXDTO);
		
		#КонецОбласти //Чеки
		
		// Внесения и выемки
		
		#Область ВнесенияВыемки
		
		ПараметрыОтбораВнесенияВыемок = Новый Структура;
		ПараметрыОтбораВнесенияВыемок.Вставить("КассоваяСмена", ЗаписьОтчетОПродажах.КассоваяСмена);
		
		НайденныеВнесенияВыемки = ВнесенияВыемки.НайтиСтроки(ПараметрыОтбораВнесенияВыемок);
		
		ЕстьВнесенияВыемки = Ложь;
		Если НЕ НайденныеВнесенияВыемки.Количество() = 0 Тогда
			ВнесенияВыемкиXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ДвиженияДС");
			ЕстьВнесенияВыемки = Истина;
		КонецЕсли;
		
		Для Каждого ЗаписьВнесениеВыемка Из НайденныеВнесенияВыемки Цикл
			
			ЗаписьВнесениеВыемкаXDTO = ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, "ДвижениеДС");
			
			ЗаписьВнесениеВыемкаXDTO.UUID 	= ЗаписьВнесениеВыемка.ВнесениеВыемкаСсылка.УникальныйИдентификатор();
			ЗаписьВнесениеВыемкаXDTO.Date 	= ЗаписьВнесениеВыемка.Дата;
			ЗаписьВнесениеВыемкаXDTO.Number = ЗаписьВнесениеВыемка.Номер;
			ЗаписьВнесениеВыемкаXDTO.Sum 	= ЗаписьВнесениеВыемка.Сумма;
			
			Если ЗаписьВнесениеВыемка.ВидДвиженияНаличных = Перечисления.ВидыДвиженияДС.Внесение Тогда
				ЗаписьВнесениеВыемкаXDTO.Type = "Income";
			Иначе
				ЗаписьВнесениеВыемкаXDTO.Type = "Outcome";
			КонецЕсли;
			
			ВнесенияВыемкиXDTO.IncomeOutcomeCheck.Добавить(ЗаписьВнесениеВыемкаXDTO);
			
		КонецЦикла;
		
		Если ЕстьВнесенияВыемки Тогда
			ОтчетXDTO.IncomeOutcomeChecks = ВнесенияВыемкиXDTO;
		КонецЕсли;
		
		#КонецОбласти //Чеки
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНастройки(Отказ, XMLТекстСообщения, Файл, ЕстьИзменения, Лог)
	
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	
	Если ВерсияФорматаОбмена > 2000 Тогда
		
		ЗагрузитьНастройки2000(Отказ, XMLТекстСообщения, Файл, ЕстьИзменения, Лог);
	Иначе
		
		ЗагрузитьНастройки1000(Отказ, XMLТекстСообщения, Файл, ЕстьИзменения, Лог);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНастройки1000(Отказ, XMLТекстСообщения, Файл, ЕстьИзменения, Лог)
	
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	
	Если НЕ Файл = Неопределено Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ИмяФайла = Файл.Имя;
		
		ВерсияФорматаОбмена = ОпределитьВерсиюФорматаФайла(ПолноеИмяФайла);
		УстановитьВерсиюФорматаПоследнейЗагрузки(ВерсияФорматаОбмена);
	КонецЕсли;
	
	Попытка
		
		ИмяТипаXDTO = "Settings";
		Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения, ПолноеИмяФайла);
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	СвойстваXDTO = Данные.Свойства();
	Если НЕ СвойстваXDTO.Получить("Processed") = Неопределено Тогда
		Обработан = Данные.Processed;
		Если ЗначениеЗаполнено(Обработан) Тогда
			
			ТекстСообщения = НСтр("ru = 'Настройки: ""%ИмяФайла%"" был загружен ранее %ДатаОбработки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОбработки%", Формат(Дата(Обработан), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	НаборКонстант = Константы.СоздатьНабор("НаименованиеОрганизации, ИНН, СистемаНалогообложения, ИспользоватьСкидкиНаценки, ИспользоватьОплатуПлатежнымиКартами");
	НаборКонстант.Прочитать();
	
	Если НЕ НаборКонстант.НаименованиеОрганизации = Данные.CompanyName Тогда;
		
		ЕстьИзменения = Истина;
		НаборКонстант.НаименованиеОрганизации = Данные.CompanyName;
		
	КонецЕсли;
	
	Если ВерсияФорматаОбмена = 1005 Тогда
		ИНН = Формат(Данные.VATIN, "ЧГ=0");
	Иначе
		ИНН = Формат(Данные.INN, "ЧГ=0");
	КонецЕсли;
	
	Если НЕ НаборКонстант.ИНН = ИНН И ЗначениеЗаполнено(ИНН) Тогда
		
		ЕстьИзменения = Истина;
		НаборКонстант.ИНН = ИНН;
		
	КонецЕсли;
	
	Если НЕ СвойстваXDTO.Получить("Taxation") = Неопределено Тогда
		
		Если Данные.Taxation = "Общая" Тогда
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		ИначеЕсли Данные.Taxation = "Упрощенная" Тогда
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.УпрощеннаяДоход;
		КонецЕсли;
		
		Если НЕ НаборКонстант.СистемаНалогообложения = СистемаНалогообложения Тогда
			
			ЕстьИзменения = Истина;
			НаборКонстант.СистемаНалогообложения = СистемаНалогообложения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СвойстваXDTO.Получить("TaxVariants") = Неопределено
		И ЗначениеЗаполнено(Данные.TaxVariants) Тогда
		
		СистемыНалогообложенияМассив = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(Данные.TaxVariants,,,Истина);
		
		Если НЕ СистемыНалогообложенияМассив.Количество() = 0 Тогда
			
			СистемаНалогообложения = ОбщегоНазначенияПовтИсп.ПолучитьСистемуНалогообложенияПоКоду(СистемыНалогообложенияМассив.Получить(0));
			
		КонецЕсли;
		
		Если НЕ НаборКонстант.СистемаНалогообложения = СистемаНалогообложения Тогда
			
			
			ЕстьИзменения = Истина;
			НаборКонстант.СистемаНалогообложения = СистемаНалогообложения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НаборКонстант.ИспользоватьСкидкиНаценки = Булево(Данные.UseDiscounts) Тогда
		
		ЕстьИзменения = Истина;
		НаборКонстант.ИспользоватьСкидкиНаценки = Булево(Данные.UseDiscounts);
		
	КонецЕсли;
	
	Если НЕ НаборКонстант.ИспользоватьОплатуПлатежнымиКартами = Булево(Данные.UseBankingCard) Тогда
		
		ЕстьИзменения = Истина;
		НаборКонстант.ИспользоватьОплатуПлатежнымиКартами = Булево(Данные.UseBankingCard);
		
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		НаборКонстант.Записать();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	// Виды оплаты
	ЕстьИзмененияВидыОплаты = Ложь;
	
	Если ВерсияФорматаОбмена = 1005
		И НЕ СвойстваXDTO.Получить("PaymentSorts") = Неопределено Тогда
		
		ДанныеВидыОплаты = Данные.PaymentSorts;
		ИмяСпискаЗаписей = "RecordSort"
		
	ИначеЕсли ВерсияФорматаОбмена > 1005 И ВерсияФорматаОбмена < 2000
		И НЕ СвойстваXDTO.Получить("PaymentKinds") = Неопределено Тогда
		
		ДанныеВидыОплаты = Данные.PaymentKinds;
		ИмяСпискаЗаписей = "RecordKind"
		
	ИначеЕсли ВерсияФорматаОбмена >= 2000
		И НЕ СвойстваXDTO.Получить("PaymentKinds") = Неопределено Тогда
		
		ДанныеВидыОплаты = Данные.PaymentKinds;
		ИмяСпискаЗаписей = "PaymentKind"
		
	КонецЕсли;
	
	Если НЕ ДанныеВидыОплаты = Неопределено И ДанныеВидыОплаты[ИмяСпискаЗаписей].Количество() > 0 Тогда
		
		ЗагрузитьВидыОплаты(ДанныеВидыОплаты[ИмяСпискаЗаписей], ЕстьИзмененияВидыОплаты);
		
	КонецЕсли;
	
	ЕстьИзменения = ЕстьИзменения ИЛИ ЕстьИзмененияВидыОплаты;
	
	Если НЕ ПолноеИмяФайла = Неопределено Тогда
		
		Данные.Processed = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
		
		Фабрика.ЗаписатьXML(ЗаписьXML, Данные);
		ЗаписьXML.Закрыть();
		
		ТекстСообщения = НСтр("ru = 'Настройки: ""%ИмяФайла%"" успешно загружен'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНастройки2000(Отказ, XMLТекстСообщения, Файл, ЕстьИзменения, Лог)
	
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	
	Если НЕ Файл = Неопределено Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ИмяФайла = Файл.Имя;
		
		ВерсияФорматаОбмена = ОпределитьВерсиюФорматаФайла(ПолноеИмяФайла);
		УстановитьВерсиюФорматаПоследнейЗагрузки(ВерсияФорматаОбмена);
	КонецЕсли;
	
	Попытка
		
		ИмяТипаXDTO = "Settings";
		Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения, ПолноеИмяФайла);
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	ЗагрузитьНастройкиИзXDTO(Данные, ВерсияФорматаОбмена, ЕстьИзменения, Лог);
	
	Если НЕ ПолноеИмяФайла = Неопределено Тогда
		
		Данные.Processed = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
		
		Фабрика.ЗаписатьXML(ЗаписьXML, Данные);
		ЗаписьXML.Закрыть();
		
		ТекстСообщения = НСтр("ru = 'Настройки: ""%ИмяФайла%"" успешно загружен'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьЗаказы(Отказ, XMLТекстСообщения, Файл, ЕстьИзменения, ИнфоТекст, Лог)
	
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	
	Если НЕ Файл = Неопределено Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ИмяФайла = Файл.Имя;
		
		ВерсияФорматаОбмена = ОпределитьВерсиюФорматаФайла(ПолноеИмяФайла);
		УстановитьВерсиюФорматаПоследнейЗагрузки(ВерсияФорматаОбмена);
	КонецЕсли;
	
	Попытка
		
		ИмяТипаXDTO = "Orders";
		Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения, ПолноеИмяФайла);
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, НСтр("ru = 'Заказы:'") + " " + ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	ЗагрузитьЗаказыИзXDTO(Данные, ВерсияФорматаОбмена, ЕстьИзменения, Лог);
	
КонецПроцедуры

Процедура ЗагрузитьПакетПрайсЛиста(XMLТекстСообщения, ЗагрузкаЗавершена, Отказ, Лог, ЕстьИзменения = Неопределено, ИнфоТекст = Неопределено)
	
	Попытка
		
		ИмяТипаXDTO = "PriceListPackage";
		Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ПараметрыСеанса.ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения);
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	Если (НЕ Данные.Свойства().Получить("IsFormed") = Неопределено И Данные.IsFormed) ИЛИ
		(НЕ Данные.Свойства().Получить("Succeeded") = Неопределено И Данные.Succeeded)
		
		Тогда
		
		ПакетнаяЗагрузка = Истина;
		ЗагрузитьПрайсЛист(XMLТекстСообщения, Неопределено, Отказ, Лог, ПакетнаяЗагрузка, ЗагрузкаЗавершена);
		
	Иначе
		// Если Succeeded = Ложь, данные еще не готовы на сервере.
		
		ТекстСообщения = НСтр("ru = 'Данные не готовы'");
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПрайсЛист(XMLТекстСообщения, Файл, Отказ, Лог, ПакетнаяЗагрузка = Ложь, ЗагрузкаЗавершена = Ложь, ЕстьИзменения = Неопределено, ИнфоТекст = Неопределено)
	
	ВерсияФорматаОбмена = ПараметрыСеанса.ВерсияФорматаОбмена;
	
	Если НЕ Файл = Неопределено Тогда
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ИмяФайла = Файл.Имя;
	КонецЕсли;
	
	Попытка
		
		НомерПакета = Неопределено;
		ПакетовВсего = Неопределено;
		
		Если ПакетнаяЗагрузка Тогда
			ИмяТипаXDTO = "PriceListPackage";
			Данные = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения, ПолноеИмяФайла);
			ДанныеПрайсЛиста = Данные.PriceList;
			
			НомерПакета = 1;
			ПакетовВсего = 1;
			
			Если ВерсияФорматаОбмена > 2000 Тогда
				
				Если НЕ Данные.Свойства().Получить("PackageNumber") = Неопределено Тогда
					НомерПакета = Данные.PackageNumber;
				КонецЕсли;
				
				Если НЕ Данные.Свойства().Получить("PackageTotal") = Неопределено Тогда
					ПакетовВсего = Данные.PackageTotal;
				КонецЕсли;
				
			Иначе
				
				Если НЕ ДанныеПрайсЛиста.Свойства().Получить("PackageNumber") = Неопределено Тогда
					НомерПакета = ДанныеПрайсЛиста.PackageNumber;
				КонецЕсли;
				
				Если НЕ ДанныеПрайсЛиста.Свойства().Получить("PackageTotalNumber") = Неопределено Тогда
					ПакетовВсего = ДанныеПрайсЛиста.PackageTotalNumber;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ИмяТипаXDTO = "PriceList";
			ДанныеПрайсЛиста = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаОбмена, ИмяТипаXDTO, XMLТекстСообщения, ПолноеИмяФайла);
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	СвойстваXDTO = ДанныеПрайсЛиста.Свойства();
	
	Если НЕ НомерПакета = Неопределено И НЕ ПакетовВсего = Неопределено Тогда
		
		Если НомерПакета = ПакетовВсего Тогда
			ЗагрузкаЗавершена = Истина;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Прайс-лист: загрузка пакета %НомерПакета% из %ПакетовВсего%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерПакета%", НомерПакета);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПакетовВсего%", ПакетовВсего);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
	Иначе
		ЗагрузкаЗавершена = Истина;
	КонецЕсли;
	
	Если НЕ СвойстваXDTO.Получить("Processed") = Неопределено Тогда
		Обработан = ДанныеПрайсЛиста.Processed;
		Если ЗначениеЗаполнено(Обработан) Тогда
			ТекстСообщения = НСтр("ru = 'Прайс-лист: ""%ИмяФайла%"" был загружен ранее %ДатаОбработки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОбработки%", Формат(Дата(Обработан), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьПрайсЛистИзXDTO(ДанныеПрайсЛиста, ВерсияФорматаОбмена, ЕстьИзменения);
	
	Если НЕ ПолноеИмяФайла = Неопределено Тогда
		
		ДанныеПрайсЛиста.Processed = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
		
		Фабрика.ЗаписатьXML(ЗаписьXML, ДанныеПрайсЛиста);
		ЗаписьXML.Закрыть();
		
		ТекстСообщения = НСтр("ru = 'Прайс-лист: ""%ИмяФайла%"" успешно загружен'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
	КонецЕсли;
	
	Если НЕ ПакетнаяЗагрузка ИЛИ ЗагрузкаЗавершена Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзФайла(Файл, Отказ, Лог, ВерсияФорматаОбмена)
	
	ПолноеИмяФайла = Файл.ПолноеИмя;
	ИмяФайла = Файл.Имя;
	
	Попытка
		
		ИмяТипаXDTO = "ExportData";
		ДанныеXDTO = ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсияФорматаОбмена, ИмяТипаXDTO, Неопределено, ПолноеИмяФайла);
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	СвойстваXDTO = ДанныеXDTO.Свойства();
	
	Если НЕ СвойстваXDTO.Получить("Processed") = Неопределено Тогда
		Обработан = ДанныеXDTO.Processed;
		Если ЗначениеЗаполнено(Обработан) Тогда
			ТекстСообщения = НСтр("ru = 'Прайс-лист: ""%ИмяФайла%"" был загружен ранее %ДатаОбработки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОбработки%", Формат(Дата(Обработан), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Попытка
		
		// Настройки
		Если ЗначениеНастроекПовтИсп.ЗагружатьНастройки() Тогда
			
			ЗагрузитьНастройкиИзXDTO(ДанныеXDTO.Settings, ВерсияФорматаОбмена, ЕстьИзменения, Лог);
			
			ТекстСообщения = НСтр("ru = 'Настройки: данные загружены'");
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
		КонецЕсли;
		
		// Прайс-лист
		ЗагрузитьПрайсЛистИзXDTO(ДанныеXDTO.PriceList, ВерсияФорматаОбмена, ЕстьИзменения);
		
		ТекстСообщения = НСтр("ru = 'Прайс-лист: данные загружены'");
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
		
		// Заказы
		Если ЗначениеНастроекПовтИсп.ЗагружатьЗаказы() Тогда
			
			ЗагрузитьЗаказыИзXDTO(ДанныеXDTO.Orders, ВерсияФорматаОбмена, ЕстьИзменения, Лог);
			
			ТекстСообщения = НСтр("ru = 'Заказы: данные загружены'");
			ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
			
		КонецЕсли;
		
		// Установка флага обработанности
		ДанныеXDTO.Processed = ОбщегоНазначенияКлиентСервер.ПолучитьТекущуюДату();
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсияФорматаОбмена);
		
		Фабрика.ЗаписатьXML(ЗаписьXML, ДанныеXDTO);
		ЗаписьXML.Закрыть();

	Исключение
		
		Отказ = Истина;
		
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
		Возврат;
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Загрузка успешно завершена'");
	ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
	
КонецПроцедуры

Процедура ЗагрузитьПрайсЛистИзXDTO(ДанныеПрайсЛиста, ВерсияФорматаОбмена, ЕстьИзменения)
	
	Если ДанныеПрайсЛиста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваXDTO = ДанныеПрайсЛиста.Свойства();
	
	// группы товаров
	Если НЕ СвойстваXDTO.Получить("Groups") = Неопределено И НЕ ДанныеПрайсЛиста.Groups = Неопределено Тогда
		
		Если ВерсияФорматаОбмена > 2000 Тогда
			ЗагрузитьГруппыТоваров2000(ДанныеПрайсЛиста.Groups, ВерсияФорматаОбмена, ЕстьИзменения);
		Иначе
			ЗагрузитьГруппыТоваров(ДанныеПрайсЛиста.Groups, ВерсияФорматаОбмена, ЕстьИзменения);
		КонецЕсли;
	КонецЕсли;
	
	// данные агента
	Если НЕ СвойстваXDTO.Получить("AgentsData") = Неопределено И НЕ ДанныеПрайсЛиста.AgentsData = Неопределено Тогда
		
		ЗагрузитьДанныеАгента(ДанныеПрайсЛиста.AgentsData, ЕстьИзменения);
		
	КонецЕсли;
	
	// данные поставщика
	Если НЕ СвойстваXDTO.Получить("VendorsData") = Неопределено И НЕ ДанныеПрайсЛиста.VendorsData = Неопределено Тогда
		
		ЗагрузитьДанныеПоставщика(ДанныеПрайсЛиста.VendorsData, ЕстьИзменения);
		
	КонецЕсли;
	
	// Единицы измерения
	Если НЕ СвойстваXDTO.Получить("Units") = Неопределено И НЕ ДанныеПрайсЛиста.Units = Неопределено Тогда
		
		ЗагрузитьЕдиницыИзмерения(ДанныеПрайсЛиста.Units, ЕстьИзменения);
		
	КонецЕсли;
	
	// товары
	Если НЕ СвойстваXDTO.Получить("Goods") = Неопределено И НЕ ДанныеПрайсЛиста.Goods = Неопределено Тогда
		
		Если ВерсияФорматаОбмена > 2000 Тогда
			ЗагрузитьТовары2000(ДанныеПрайсЛиста.Goods, ВерсияФорматаОбмена, ЕстьИзменения);
		Иначе
			ЗагрузитьТовары(ДанныеПрайсЛиста.Goods, ВерсияФорматаОбмена, ЕстьИзменения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиИзXDTO(Данные, ВерсияФорматаОбмена, ЕстьИзменения, Лог)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваXDTO = Данные.Свойства();
	
	НаборКонстант = Константы.СоздатьНабор(
		"НаименованиеОрганизации,
		|ИНН,
		|КПП,
		|СистемаНалогообложения,
		|ИспользоватьСкидкиНаценки,
		|ИспользоватьОплатуПлатежнымиКартами,
		|НаименованиеМагазина,
		|АдресМагазина
		|"
	);
	НаборКонстант.Прочитать();
	
	
	ЕстьИзменения = Ложь;
	
	// НаименованиеОрганизации
	Если НЕ СвойстваXDTO.Получить("CompanyName") = Неопределено И НЕ Данные.CompanyName = Неопределено Тогда
		
		Если НЕ НаборКонстант.НаименованиеОрганизации = Данные.CompanyName Тогда;
			
			ЕстьИзменения = Истина;
			НаборКонстант.НаименованиеОрганизации = Данные.CompanyName;
		КонецЕсли;
	КонецЕсли;
	
	// НаименованиеМагазина
	Если НЕ СвойстваXDTO.Получить("StoreName") = Неопределено И НЕ Данные.StoreName = Неопределено Тогда
		
		Если НЕ НаборКонстант.НаименованиеМагазина = Данные.StoreName Тогда;
			
			ЕстьИзменения = Истина;
			НаборКонстант.НаименованиеМагазина = Данные.StoreName;
		КонецЕсли;
	КонецЕсли;
	
	// ИНН
	Если НЕ СвойстваXDTO.Получить("INN") = Неопределено И НЕ Данные.INN = Неопределено Тогда
		
		Если НЕ НаборКонстант.ИНН = Данные.INN Тогда;
			
			Попытка
				ИННЧислом = Число(Данные.INN);
				
				ЕстьИзменения = Истина;
				НаборКонстант.ИНН = Данные.INN;
				
			Исключение
				НаборКонстант.ИНН = "";
				ЕстьИзменения = Истина;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	//КПП
	Если НЕ СвойстваXDTO.Получить("KPP") = Неопределено И НЕ Данные.KPP = Неопределено Тогда
		
		Если НЕ НаборКонстант.КПП = Данные.KPP Тогда;
			
			Попытка
				КППЧислом = Число(Данные.KPP);
				
				ЕстьИзменения = Истина;
				НаборКонстант.КПП = Данные.KPP;
				
			Исключение
				НаборКонстант.КПП = "";
				ЕстьИзменения = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	//АдресМагазина
	Если НЕ СвойстваXDTO.Получить("SaleAddress") = Неопределено И НЕ Данные.SaleAddress = Неопределено Тогда
		
		Если НЕ НаборКонстант.АдресМагазина = Данные.SaleAddress Тогда;
			
			ЕстьИзменения = Истина;
			НаборКонстант.АдресМагазина = Данные.SaleAddress;
		КонецЕсли;
	КонецЕсли;
	
	// СистемаНалогообложения
	Если НЕ СвойстваXDTO.Получить("TaxationSystems") = Неопределено И НЕ Данные.TaxationSystems = Неопределено Тогда
		
		СистемаНалогообложения = Неопределено;
		
		Для Каждого ВариантСистемыНалогообложения Из Данные.TaxationSystems.TaxationSystem Цикл
			
			КодВарианта = ВариантСистемыНалогообложения.__content;
			
			СистемаНалогообложения = ОбщегоНазначенияПовтИсп.ПолучитьСистемуНалогообложенияПоКоду(КодВарианта);
			
			Прервать;
		КонецЦикла;
		
		
		Если НЕ НаборКонстант.СистемаНалогообложения = СистемаНалогообложения Тогда
			НаборКонстант.СистемаНалогообложения = СистемаНалогообложения;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// ИспользоватьОплатуПлатежнымиКартами
	Если НЕ СвойстваXDTO.Получить("AllowPaymentCards") = Неопределено И НЕ Данные.AllowPaymentCards = Неопределено Тогда
		
		Если НЕ НаборКонстант.ИспользоватьОплатуПлатежнымиКартами = Данные.AllowPaymentCards Тогда;
			
			ЕстьИзменения = Истина;
			НаборКонстант.ИспользоватьОплатуПлатежнымиКартами = Данные.AllowPaymentCards;
		КонецЕсли;
	КонецЕсли;
	
	// ИспользоватьСкидкиНаценки
	Если НЕ СвойстваXDTO.Получить("AllowDiscounts") = Неопределено И НЕ Данные.AllowDiscounts = Неопределено Тогда
		
		Если НЕ НаборКонстант.ИспользоватьСкидкиНаценки = Данные.AllowDiscounts Тогда;
			
			ЕстьИзменения = Истина;
			НаборКонстант.ИспользоватьСкидкиНаценки = Данные.AllowDiscounts;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		НаборКонстант.Записать();
		
	КонецЕсли;
	
	// пока не хранятся в МК
	//SaleLocation
	//SenderEmail
	
	// Виды оплаты
	ЕстьИзмененияВидыОплаты = Ложь;
	
	Если НЕ СвойстваXDTO.Получить("ElectronicPaymentOptions") = Неопределено
		И НЕ Данные.ElectronicPaymentOptions = Неопределено Тогда
		
		ДанныеВидыОплаты = Данные.ElectronicPaymentOptions;
		ИмяСпискаЗаписей = "ElectronicPaymentOption"
		
	КонецЕсли;
	
	Если НЕ ДанныеВидыОплаты = Неопределено И ДанныеВидыОплаты[ИмяСпискаЗаписей].Количество() > 0 Тогда
		ЗагрузитьВидыОплаты(ДанныеВидыОплаты[ИмяСпискаЗаписей], ЕстьИзмененияВидыОплаты);
	КонецЕсли;
	
	
	ЕстьИзменения = ЕстьИзменения ИЛИ ЕстьИзмененияВидыОплаты;
	
КонецПроцедуры

Процедура ЗагрузитьЗаказыИзXDTO(Данные, ВерсияФорматаОбмена, ЕстьИзменения, Лог)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваXDTO = Данные.Свойства();
	
	// заказы
	Если НЕ СвойстваXDTO.Получить("Order") = Неопределено
		И НЕ Данные.Order = Неопределено
		И ТипЗнч(Данные.Order) = Тип("СписокXDTO") Тогда
		
		Для Каждого Order Из Данные.Order Цикл
			
			СвойстваЗаказаXDTO = Order.Свойства();
			
			ЗаказОбъект = Неопределено;
			
			// поиск по UUID
			Если НЕ СвойстваЗаказаXDTO.Получить("UUID") = Неопределено Тогда
				
				УИ = Новый УникальныйИдентификатор(Order.UUID);
				ЗаказСсылка = Документы.ЗаказКлиента.ПолучитьСсылку(УИ);
				
				Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
					ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаказОбъект = Неопределено Тогда
				
				ЗаказОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
				
				УИ = Новый УникальныйИдентификатор(Order.UUID);
				ЗаказСсылка = Документы.ЗаказКлиента.ПолучитьСсылку(УИ);
				
				Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
					ЗаказОбъект.УстановитьСсылкуНового(ЗаказСсылка);
				КонецЕсли;
				
			КонецЕсли;
			
			// ЦенаВключаетНДС
			ЗаказОбъект.ЦенаВключаетНДС = ЗначениеНастроекПовтИсп.ЦенаВключаетНДС();
			
			СвойстваXDTO = Order.Свойства();
			
			// Номер заказа
			Если НЕ СвойстваXDTO.Получить("Number") = Неопределено Тогда
				
				ЗаказОбъект.НомерЗаказа = Order.Number;
			КонецЕсли;
			
			// Дата заказа
			Если НЕ СвойстваXDTO.Получить("Date") = Неопределено Тогда
				
				ЗаказОбъект.Дата = Order.Date;
			КонецЕсли;
			
			// Город доставки
			Если НЕ СвойстваXDTO.Получить("AddressCity") = Неопределено Тогда
				
				ЗаказОбъект.АдресДоставкиГород = Order.AddressCity;
			КонецЕсли;
			
			// Улица доставки
			Если НЕ СвойстваXDTO.Получить("AddressStreet") = Неопределено Тогда
				
				ЗаказОбъект.АдресДоставкиУлица = Order.AddressStreet;
			КонецЕсли;
			
			// Номер дома доставки
			Если НЕ СвойстваXDTO.Получить("AddressBuilding") = Неопределено Тогда
				
				ЗаказОбъект.АдресДоставкиДом = Order.AddressBuilding;
			КонецЕсли;
			
			// Номер квартиры/офиса доставки
			Если НЕ СвойстваXDTO.Получить("AddressApartment") = Неопределено Тогда
				
				ЗаказОбъект.АдресДоставкиКвартира = Order.AddressApartment;
			КонецЕсли;
			
			// Номер подъезда доставки
			Если НЕ СвойстваXDTO.Получить("AddressEntrance") = Неопределено Тогда
				
				ЗаказОбъект.АдресДоставкиПодъезд = Order.AddressEntrance;
			КонецЕсли;
			
			// Номер этажа доставки
			Если НЕ СвойстваXDTO.Получить("AddressFloor") = Неопределено Тогда
				
				ЗаказОбъект.АдресДоставкиЭтаж = Order.AddressFloor;
			КонецЕсли;
			
			// Номер телефона клиента
			Если НЕ СвойстваXDTO.Получить("Phone") = Неопределено Тогда
				
				ЗаказОбъект.Телефон = Order.Phone;
			КонецЕсли;
			
			// Email
			Если НЕ СвойстваXDTO.Получить("Email") = Неопределено Тогда
				
				ЗаказОбъект.АдресЭлектроннойПочты = Order.Email;
			КонецЕсли;
			
			// Дата доставки
			Если НЕ СвойстваXDTO.Получить("DeliveryDate") = Неопределено Тогда
				
				ЗаказОбъект.ЖелаемаяДатаПокупки = Order.DeliveryDate;
			КонецЕсли;
			
			// Статус заказа
			Если НЕ СвойстваXDTO.Получить("Status") = Неопределено Тогда
				
				Если НЕ ЗаказОбъект.СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Выполнен Тогда
					ЗаказОбъект.СтатусЗаказа = ОбщегоНазначенияПовтИсп.ПолучитьСтатусЗаказаПоНаименованию(Order.Status);
				КонецЕсли;
			КонецЕсли;
			
			// Комментарий
			Если НЕ СвойстваXDTO.Получить("Comment") = Неопределено Тогда
				
				ЗаказОбъект.Комментарий = Order.Comment;
			КонецЕсли;
			
			// Фамилия клиента
			Если НЕ СвойстваXDTO.Получить("LastName") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(Order.LastName) Тогда
					
					Если НЕ ЗаказОбъект.ФИО = Order.LastName Тогда
						
						ЗаказОбъект.ФИО = Order.LastName;
						ЕстьИзмененияЭлемента = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Имя клиента
			Если НЕ СвойстваXDTO.Получить("FirstName") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(Order.FirstName) Тогда
					
					Если НЕ ЗаказОбъект.ФИО = Order.FirstName Тогда
						
						ЗаказОбъект.ФИО = ЗаказОбъект.ФИО + " " + Order.FirstName;
						ЕстьИзмененияЭлемента = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Товары
			Если НЕ СвойстваXDTO.Получить("Goods") = Неопределено
				И НЕ Order.Goods = Неопределено
				И ТипЗнч(Order.Goods.Good) = Тип("СписокXDTO") Тогда
				
				ЗаказОбъект.Товары.Очистить();
				
				Для каждого Good Из Order.Goods.Good Цикл
					
					СтрокаТовары = ЗаказОбъект.Товары.Добавить();
					СтрокаТовары.Номенклатура = ПолучитьНоменклатуруПоКодуПоиска(Good.Code);
					СтрокаТовары.Количество   = Good.Quantity;
					СтрокаТовары.Цена         = Good.Price;
					СтрокаТовары.Сумма        = Good.Sum;
					
					Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
						СтавкаНДС = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "СтавкаНДС");
						СтрокаТовары.СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавку_18_20(СтавкаНДС);
					КонецЕсли;
					
					Если ЗаказОбъект.ЦенаВключаетНДС Тогда
						
						ПроцентНДС = 0;
						
						Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
							ПроцентНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС);
						КонецЕсли;
						
						СтрокаТовары.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТовары.Сумма, ПроцентНДС);
						
					Иначе
						СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					КонецЕсли;
					
					СуммаБезСкидки = Окр(СтрокаТовары.Цена*СтрокаТовары.Количество, 2);
					
					Если НЕ СуммаБезСкидки = СтрокаТовары.Сумма Тогда
						СтрокаТовары.СкидкаНаценкаСумма = СтрокаТовары.Сумма - СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Оплата
			Если НЕ СвойстваXDTO.Получить("Payments") = Неопределено
				И НЕ Order.Payments = Неопределено
				И ТипЗнч(Order.Payments.Payment) = Тип("СписокXDTO") Тогда
				
				ЗаказОбъект.Оплаты.Очистить();
				
				Для Каждого Payment Из Order.Payments.Payment Цикл
					
					СтрокаОплаты = ЗаказОбъект.Оплаты.Добавить();
					
					Если НЕ Payment.Свойства().Получить("ElectronicPaymentOptionCode") = Неопределено Тогда
						СтрокаОплаты.ВидОплаты = ПолучитьВидОплаты(Payment.ElectronicPaymentOptionCode, Payment.ElectronicPaymentOptionUUID);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Payment.Cash) Тогда
						
						СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплаты.Наличные;
						СтрокаОплаты.Сумма     = Payment.Cash;
						
					ИначеЕсли ЗначениеЗаполнено(Payment.ElectronicPayment) Тогда
						
						СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплаты.ПлатежнаяКарта;
						СтрокаОплаты.Сумма     = Payment.ElectronicPayment;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаказОбъект.ЗагруженПриОбмене = Истина;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Заказы: загружено %КоличествоЗаказов%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоЗаказов%", Данные.Order.Количество());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
	
КонецПроцедуры

Процедура ЗагрузитьГруппыТоваров2000(Группы, ВерсияФорматаОбмена, ЕстьИзменения)
	
	ГруппыXDTO = Группы.Group;
	
	Для Каждого ГруппаXDTO Из ГруппыXDTO Цикл
		
		ЕстьИзменения = Ложь;
		
		УУИД = Неопределено;
		СвойстваXDTO = ГруппаXDTO.Свойства();
		
		Если НЕ СвойстваXDTO.Получить("UUID") = Неопределено И ЗначениеЗаполнено(ГруппаXDTO.UUID) Тогда
			УУИД = ГруппаXDTO.UUID;
		КонецЕсли;
		
		ГруппаТоваровСсылка = ПолучитьГруппуТоваров(ГруппаXDTO.Code, УУИД);
		
		Если ЗначениеЗаполнено(ГруппаТоваровСсылка) Тогда
			
			ГруппаТоваровОбъект = ГруппаТоваровСсылка.ПолучитьОбъект();
		Иначе
			
			ГруппаТоваровОбъект = Справочники.Номенклатура.СоздатьГруппу();
			
			Если НЕ УУИД = Неопределено Тогда
				ГруппаТоваровСсылка = Справочники.Номенклатура.ПолучитьСсылку(УУИД);
				ГруппаТоваровОбъект.УстановитьСсылкуНового(ГруппаТоваровСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ГруппаТоваровОбъект.КодПоиска = ГруппаXDTO.Code Тогда
			ГруппаТоваровОбъект.КодПоиска = ГруппаXDTO.Code;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если НЕ ГруппаТоваровОбъект.Наименование = ГруппаXDTO.Name Тогда
			ГруппаТоваровОбъект.Наименование = ГруппаXDTO.Name;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если НЕ СвойстваXDTO.Получить("ParentGroupCode") = Неопределено И ЗначениеЗаполнено(ГруппаXDTO.ParentGroupCode) Тогда
			
			УУИДГруппы = Неопределено;
			Если НЕ СвойстваXDTO.Получить("ParentGroupUUID") = Неопределено И ЗначениеЗаполнено(ГруппаXDTO.ParentGroupUUID) Тогда
				УУИДГруппы = ГруппаXDTO.ParentGroupUUID;
			КонецЕсли;
			
			РодительскаяГруппаСсылка = ПолучитьГруппуТоваров(ГруппаXDTO.ParentGroupCode, УУИДГруппы);
			
			Если ЗначениеЗаполнено(РодительскаяГруппаСсылка) Тогда
				
				Если НЕ ГруппаТоваровОбъект.Родитель = РодительскаяГруппаСсылка Тогда
					ГруппаТоваровОбъект.Родитель= РодительскаяГруппаСсылка;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			Иначе
				
				РодительскаяГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
				
				Если НЕ УУИДГруппы = Неопределено Тогда
					РодительскаяГруппаСсылка = Справочники.Номенклатура.ПолучитьСсылку(УУИДГруппы);
					РодительскаяГруппаОбъект.УстановитьСсылкуНового(РодительскаяГруппаСсылка);
				КонецЕсли;
				
				РодительскаяГруппаОбъект.КодПоиска = ГруппаXDTO.ParentGroupCode;
				
				РодительскаяГруппаОбъект.Наименование = ГруппаXDTO.ParentGroupCode;
				РодительскаяГруппаОбъект.Записать();
				
				ГруппаТоваровОбъект.Родитель = РодительскаяГруппаОбъект.Ссылка;
				ЕстьИзменения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			ГруппаТоваровОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьТовары2000(Товары, ВерсияФорматаОбмена, ЕстьИзменения)
	
	ТоварыXDTO = Товары.Good;
	
	Для Каждого ТоварXDTO Из ТоварыXDTO Цикл
		
		СвойстваXDTO = ТоварXDTO.Свойства();
		
		Если НЕ СвойстваXDTO.Получить("HasCharacteristics") = Неопределено
			И НЕ ТоварXDTO.HasCharacteristics = Неопределено
			И ТоварXDTO.HasCharacteristics Тогда
			
			ХарактеристикиXDTO = ТоварXDTO.Characteristics.Characteristic;
			
			Если ТипЗнч(ХарактеристикиXDTO) = Тип("СписокXDTO") Тогда
				
				Для Каждого ХарактеристикаXDTO Из ХарактеристикиXDTO Цикл
					ОбработатьХарактеристикуНоменклатуры2000(ТоварXDTO, ХарактеристикаXDTO, ЕстьИзменения);
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли НЕ СвойстваXDTO.Получить("HasPacks") = Неопределено
			И НЕ ТоварXDTO.HasPacks = Неопределено
			И ТоварXDTO.HasPacks Тогда
			
			Если ЗначениеЗаполнено(ТоварXDTO.Code) Тогда
				ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO, ТоварXDTO.Code, ТоварXDTO.Name, ТоварXDTO.Price, ТоварXDTO.Barcodes, ЕстьИзменения);
			КонецЕсли;
			
			УпаковкиXDTO = ТоварXDTO.Packs.Pack;
			
			Для Каждого УпаковкаXDTO Из УпаковкиXDTO Цикл
				Наименование = ТоварXDTO.Name + ", " + УпаковкаXDTO.Name;
				ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO, УпаковкаXDTO.Code, Наименование, УпаковкаXDTO.Price, УпаковкаXDTO.Barcodes, ЕстьИзменения);
			КонецЦикла;
			
		Иначе
			
			ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO, ТоварXDTO.Code, ТоварXDTO.Name, ТоварXDTO.Price, ТоварXDTO.Barcodes, ЕстьИзменения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO, КодПоиска, Наименование, Цена, Штрихкоды, ЕстьИзменения)
	
	СвойстваТовараXDTO = ТоварXDTO.Свойства();
	
	НоменклатураСсылка = ПолучитьНоменклатуруПоКодуПоиска(КодПоиска);
	
	ЕстьИзмененияЭлемента = Ложь;
	
	Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	Иначе
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	КонецЕсли;
	
	// КодПоиска
	Если НЕ НоменклатураОбъект.КодПоиска = КодПоиска Тогда
		
		НоменклатураОбъект.КодПоиска = КодПоиска;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// Артикул
	Если НЕ НоменклатураОбъект.Артикул = ТоварXDTO.Article Тогда
		
		НоменклатураОбъект.Артикул = ТоварXDTO.Article;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// Цена
	Если НЕ НоменклатураОбъект.Цена = Цена Тогда
		
		НоменклатураОбъект.Цена = Цена;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;

	// СтавкаНДС
	СтавкаНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДС(ТоварXDTO.TaxRate);
	Если НЕ НоменклатураОбъект.СтавкаНДС = СтавкаНДС Тогда
		
		НоменклатураОбъект.СтавкаНДС = СтавкаНДС;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// ЕдиницаИзмерения
	ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(ТоварXDTO.UnitCode, ТоварXDTO.UnitUUID, Истина);
	
	Если НЕ НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения Тогда
		НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// Группа
	Группа = ПолучитьГруппуТоваров(ТоварXDTO.GroupCode, ТоварXDTO.GroupUUID);
	
	Если НЕ НоменклатураОбъект.Родитель = Группа Тогда
		
		НоменклатураОбъект.Родитель = Группа;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	Если НЕ НоменклатураОбъект.Наименование = Наименование Тогда
		
		НоменклатураОбъект.Наименование = Наименование;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	
	// АЛКОГОЛЬНЫЕ РЕКВИЗИТЫ
	
	// АлкогольнаяПродукция
	Если НЕ СвойстваТовараXDTO.Получить("IsAlcohol") = Неопределено И НЕ ТоварXDTO.IsAlcohol = Неопределено Тогда
		
		Если НЕ НоменклатураОбъект.АлкогольнаяПродукция = ТоварXDTO.IsAlcohol Тогда
			
			НоменклатураОбъект.АлкогольнаяПродукция = ТоварXDTO.IsAlcohol;
			ЕстьИзмененияЭлемента = Истина;
		КонецЕсли;
		
		Если НЕ СвойстваТовараXDTO.Получить("Alcohol") = Неопределено И НЕ ТоварXDTO.Alcohol = Неопределено Тогда
			
			АлкогольныеРеквизитыXDTO = ТоварXDTO.Alcohol;
			
			// МаркируемаяАлкогольнаяПродукция
			Если НЕ АлкогольныеРеквизитыXDTO.IsExcisable = Неопределено Тогда
				
				Если НЕ НоменклатураОбъект.МаркируемаяАлкогольнаяПродукция = АлкогольныеРеквизитыXDTO.IsExcisable Тогда
					
					НоменклатураОбъект.МаркируемаяАлкогольнаяПродукция = АлкогольныеРеквизитыXDTO.IsExcisable;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// ОбъемАлкогольнойПродукции
			Если НЕ АлкогольныеРеквизитыXDTO.AlcoholContainerSize = Неопределено Тогда
				
				Если НЕ НоменклатураОбъект.ОбъемАлкогольнойПродукции = АлкогольныеРеквизитыXDTO.AlcoholContainerSize Тогда
					
					НоменклатураОбъект.ОбъемАлкогольнойПродукции = АлкогольныеРеквизитыXDTO.AlcoholContainerSize;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			
			// Крепость
			Если НЕ АлкогольныеРеквизитыXDTO.AlcoholStrength = Неопределено Тогда
				
				Если НЕ НоменклатураОбъект.Крепость = АлкогольныеРеквизитыXDTO.AlcoholStrength Тогда
					
					НоменклатураОбъект.Крепость = АлкогольныеРеквизитыXDTO.AlcoholStrength;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// ИННПроизводителя
			Если НЕ АлкогольныеРеквизитыXDTO.VendorINN = Неопределено Тогда
				
				Если НЕ НоменклатураОбъект.ИННПроизводителя = АлкогольныеРеквизитыXDTO.VendorINN Тогда
					
					НоменклатураОбъект.ИННПроизводителя = АлкогольныеРеквизитыXDTO.VendorINN;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// КПППроизводителя
			Если НЕ АлкогольныеРеквизитыXDTO.VendorKPP = Неопределено Тогда
				
				Если НЕ НоменклатураОбъект.КПППроизводителя = АлкогольныеРеквизитыXDTO.VendorKPP Тогда
					
					НоменклатураОбъект.КПППроизводителя = АлкогольныеРеквизитыXDTO.VendorKPP;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// КодВидаАлкогольнойПродукции
			Если НЕ АлкогольныеРеквизитыXDTO.AlcoholKindCode = Неопределено Тогда
				
				Если НЕ НоменклатураОбъект.КодВидаАлкогольнойПродукции = АлкогольныеРеквизитыXDTO.AlcoholKindCode Тогда
					
					НоменклатураОбъект.КодВидаАлкогольнойПродукции = АлкогольныеРеквизитыXDTO.AlcoholKindCode;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// ВидАлкогольнойПродукции
			Если ЗначениеЗаполнено(НоменклатураОбъект.КодВидаАлкогольнойПродукции) Тогда
				
				ВидАлкогольнойПродукции = ОбщегоНазначенияПовтИсп.ПолучитьВидАлкогольнойПродукцииПоКоду(НоменклатураОбъект.КодВидаАлкогольнойПродукции);
				
				Если НЕ НоменклатураОбъект.ВидАлкогольнойПродукции = ВидАлкогольнойПродукции Тогда
					
					НоменклатураОбъект.ВидАлкогольнойПродукции = ВидАлкогольнойПродукции;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Маркировка
	Если НЕ СвойстваТовараXDTO.Получить("IsMarked") = Неопределено И НЕ ТоварXDTO.IsMarked = Неопределено Тогда
		
		Если НЕ ТоварXDTO.IsMarked И ЗначениеЗаполнено(НоменклатураОбъект.ТипМаркировки) Тогда
			
			НоменклатураОбъект.ТипМаркировки = Неопределено; 
			ЕстьИзмененияЭлемента = Истина;
			
		ИначеЕсли ТоварXDTO.IsMarked Тогда
			
			Если НЕ СвойстваТовараXDTO.Получить("MarkedGoodTypeCode") = Неопределено 
				И НЕ ТоварXDTO.MarkedGoodTypeCode = Неопределено Тогда
				
				
				ТипМаркировки = ПолучитьТипМаркировкиПоКоду(ТоварXDTO.MarkedGoodTypeCode);
				
				Если НЕ НоменклатураОбъект.ТипМаркировки = ТипМаркировки Тогда  
					НоменклатураОбъект.ТипМаркировки = ТипМаркировки;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	// Секция
	Если НЕ СвойстваТовараXDTO.Получить("Department") = Неопределено И НЕ ТоварXDTO.Department = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТоварXDTO.Department) Тогда
			
			Если НЕ НоменклатураОбъект.Секция = ТоварXDTO.Department Тогда
				
				НоменклатураОбъект.Секция = ТоварXDTO.Department;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Признак предмета расчета
	Если НЕ СвойстваТовараXDTO.Получить("CalculationSubject") = Неопределено И НЕ ТоварXDTO.CalculationSubject = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТоварXDTO.CalculationSubject) Тогда
			
			ПризнакПредметаРасчета = ОбщегоНазначенияПовтИсп.ПолучитьПризнакПредметаРасчетаПоКоду(ТоварXDTO.CalculationSubject);
			
			Если НЕ НоменклатураОбъект.ПризнакПредметаРасчета = ПризнакПредметаРасчета Тогда
				
				НоменклатураОбъект.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьИзмененияЭлемента Тогда
		НоменклатураОбъект.Записать();
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	// Штрихкоды
	ЗаписатьШтрихкодыНоменклатуры2000(НоменклатураОбъект.Ссылка, Штрихкоды);
	
КонецПроцедуры

Процедура ОбработатьХарактеристикуНоменклатуры2000(ТоварXDTO, ХарактеристикаXDTO, ЕстьИзменения)
	
	СвойстваXDTO = ХарактеристикаXDTO.Свойства();
	
	Если НЕ СвойстваXDTO.Получить("HasPacks") = Неопределено
			И НЕ ХарактеристикаXDTO.HasPacks = Неопределено
			И ХарактеристикаXDTO.HasPacks Тогда
			
			Если ЗначениеЗаполнено(ХарактеристикаXDTO.Code) Тогда
				Наименование = ТоварXDTO.Name + " (" + ХарактеристикаXDTO.Name + ")";
				
				ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO,
					ХарактеристикаXDTO.Code,
					Наименование,
					ХарактеристикаXDTO.Price,
					ХарактеристикаXDTO.Barcodes,
					ЕстьИзменения
				);
				
			КонецЕсли;
			
			УпаковкиXDTO = ХарактеристикаXDTO.Packs.Pack;
			
			Для Каждого УпаковкаXDTO Из УпаковкиXDTO Цикл
				
				Наименование = ТоварXDTO.Name + " (" + ХарактеристикаXDTO.Name + ")" + ", " + УпаковкаXDTO.Name;
				
				ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO,
					УпаковкаXDTO.Code,
					Наименование,
					УпаковкаXDTO.Price,
					УпаковкаXDTO.Barcodes,
					ЕстьИзменения
				);
				
			КонецЦикла;
			
	Иначе
		
		Наименование = ТоварXDTO.Name + " (" + ХарактеристикаXDTO.Name + ")";
		
		ЗаполнитьРеквизитыНоменклатуры2000(ТоварXDTO,
			ХарактеристикаXDTO.Code,
			Наименование,
			ХарактеристикаXDTO.Price,
			ХарактеристикаXDTO.Barcodes,
			ЕстьИзменения
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьШтрихкодыНоменклатуры2000(Номенклатура, ШтрихкодыXDTO)
	
	Если ШтрихкодыXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодыXDTO.Свойства().Получить("Barcode") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого ДанныеШтрихкодаXDTO ИЗ ШтрихкодыXDTO.Barcode Цикл
		
		Штрихкод = ДанныеШтрихкодаXDTO.Value;
		
		Запись = НаборЗаписей.Добавить();
		Запись.Номенклатура = Номенклатура;
		Запись.Штрихкод = СокрЛП(Штрихкод);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьГруппуТоваров(КодПоиска, УУИД = Неопределено)
	
	Если НЕ УУИД = Неопределено Тогда
		
		ГруппаСсылка = Справочники.Номенклатура.ПолучитьСсылку(УУИД);
		
		ГруппаОбъект = ГруппаСсылка.ПолучитьОбъект();
		
		Если НЕ ГруппаОбъект = Неопределено Тогда
			Возврат ГруппаСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.КодПоиска = &КодПоиска
	|	И Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("КодПоиска", КодПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидОплаты(КодПоиска, УУИД = Неопределено)
	
	Если НЕ УУИД = Неопределено Тогда
		
		ВидОплатыСсылка = Справочники.ВидыОплаты.ПолучитьСсылку(УУИД);
		
		ВидОплатыОбъект = ВидОплатыСсылка.ПолучитьОбъект();
		
		Если НЕ ВидОплатыОбъект = Неопределено Тогда
			Возврат ВидОплатыСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплаты.Ссылка
	|ИЗ
	|	Справочник.ВидыОплаты КАК ВидыОплаты
	|ГДЕ
	|	ВидыОплаты.КодПоиска = &КодПоиска";
	
	Запрос.УстановитьПараметр("КодПоиска", КодПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ВидыОплаты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(КодПоиска, УУИД = Неопределено, ВозвращатьЗначениеПоУмолчанию)
	
	Если НЕ УУИД = Неопределено Тогда
		
		ЕдиницаИзмеренияСсылка = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(УУИД);
		
		ЕдиницаИзмеренияОбъект = ЕдиницаИзмеренияСсылка.ПолучитьОбъект();
		
		Если НЕ ЕдиницаИзмеренияОбъект = Неопределено Тогда
			Возврат ЕдиницаИзмеренияСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код = &КодПоиска";
	
	Запрос.УстановитьПараметр("КодПоиска", КодПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ВозвращатьЗначениеПоУмолчанию Тогда
		
		Штука = ОбщегоНазначенияПовтИсп.ПолучитьСоздатьЕдиницуИзмерения("шт");
		
		Возврат Штука;
	Иначе
		
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьГруппыТоваров(Группы, ВерсияФорматаОбмена, ЕстьИзменения, ИнфоТекст = "")
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("Код");
	ТаблицаГрупп.Колонки.Добавить("КодГруппы");
	ТаблицаГрупп.Колонки.Добавить("Наименование");
	
	СписокГруппXDTO = Неопределено;
	
	Если НЕ Группы.Свойства().Получить("Group") = Неопределено Тогда
		
		ГруппыXDTO = Группы.Group;
		
	ИначеЕсли НЕ Группы.Свойства().Получить("RecordGroup") = Неопределено Тогда
		
		ГруппыXDTO = Группы.RecordGroup;
		
	КонецЕсли;
	
	Если ТипЗнч(ГруппыXDTO) = Тип("СписокXDTO") Тогда
		
		Для Каждого Группа Из ГруппыXDTO Цикл
			
			СтрокаТаблицы              = ТаблицаГрупп.Добавить();
			СтрокаТаблицы.Код          = Группа.Code;
			СтрокаТаблицы.КодГруппы    = Группа.GroupCode;
			СтрокаТаблицы.Наименование = Группа.Name;
			
		КонецЦикла;
		
		ТаблицаГрупп.Сортировать("КодГруппы");
		
	Иначе
		
		СтрокаТаблицы              = ТаблицаГрупп.Добавить();
		СтрокаТаблицы.Код          = ГруппыXDTO.Code;
		СтрокаТаблицы.КодГруппы    = ГруппыXDTO.GroupCode;
		СтрокаТаблицы.Наименование = ГруппыXDTO.Name;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.КодПоиска = &КодПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.КодПоиска = &КодПоискаГруппы";
	
	
	Для Каждого Группа Из ТаблицаГрупп Цикл
		
		Запрос.УстановитьПараметр("КодПоиска", Группа.Код);
		Запрос.УстановитьПараметр("КодПоискаГруппы", Группа.КодГруппы);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		РезультатЭлемент = РезультатЗапроса[0];
		РезультатГруппаЭлемента = РезультатЗапроса[1];
		
		ГруппаЭлемента = Неопределено;
		Если ЗначениеЗаполнено(Группа.КодГруппы) Тогда
			Если РезультатГруппаЭлемента.Пустой() Тогда
				
				НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();
				НоваяГруппа.Наименование = Группа.КодГруппы;
				НоваяГруппа.КодПоиска    = Группа.КодГруппы;
				НоваяГруппа.Записать();
				ЕстьИзменения = Истина;
				ГруппаЭлемента = НоваяГруппа.Ссылка;
			Иначе
				
				Выборка = РезультатГруппаЭлемента.Выбрать();
				Выборка.Следующий();
				ГруппаЭлемента = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатЭлемент.Пустой() Тогда
			
			НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();
			НоваяГруппа.Наименование = Группа.Наименование;
			НоваяГруппа.КодПоиска    = Группа.Код;
			НоваяГруппа.Родитель     = ГруппаЭлемента;
			
			НоваяГруппа.Записать();
			ЕстьИзменения = Истина;
		Иначе
			ЕстьИзмененияЭлемента = Ложь;
			
			Выборка = РезультатЭлемент.Выбрать();
			Выборка.Следующий();
			Элемент = Выборка.Ссылка;
			ЭлементОбъект = Элемент.ПолучитьОбъект();
			
			Если НЕ Элемент.Наименование = Группа.Наименование Тогда
				ЭлементОбъект.Наименование = Группа.Наименование;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
			Если НЕ ГруппаЭлемента = Неопределено И НЕ Элемент.Родитель = ГруппаЭлемента Тогда
				ЭлементОбъект.Родитель = ГруппаЭлемента;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
			Если ЕстьИзмененияЭлемента Тогда
				ЭлементОбъект.Записать();
				ЕстьИзменения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеАгента(ДанныеАгентов, ЕстьИзменения)
	
	Если НЕ ТипЗнч(ДанныеАгентов.AgentData) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеАгентаXDTO Из ДанныеАгентов.AgentData Цикл
		
		ЕстьИзмененияЭлемента = Ложь;
		
		СвойстваДанныеАгентаXDTO = ДанныеАгентаXDTO.Свойства();
		
		ДанныеАгентаОбъект = Неопределено;
		
		// поиск по УУИД
		Если НЕ СвойстваДанныеАгентаXDTO.Получить("UUID") = Неопределено И ЗначениеЗаполнено(ДанныеАгентаXDTO.UUID) Тогда
			
			УУИД = ДанныеАгентаXDTO.UUID;
			ДанныеАгентаСсылка = Справочники.ДанныеАгентов.ПолучитьСсылку(УУИД);
			
			Если ЗначениеЗаполнено(ДанныеАгентаСсылка) Тогда
				ДанныеАгентаОбъект = ДанныеАгентаСсылка.ПолучитьОбъект();
			КонецЕсли;
			
		КонецЕсли;
		
		// поиск по коду
		КодПоиска = ДанныеАгентаXDTO.Code; // обязательный реквизит
		
		Если ДанныеАгентаОбъект = Неопределено Тогда
			
			ДанныеАгентаСсылка = ПолучитьДанныеАгентаПоКодуПоиска(КодПоиска);
			
			Если ЗначениеЗаполнено(ДанныеАгентаСсылка) Тогда
				
				ДанныеАгентаОбъект = ДанныеАгентаСсылка.ПолучитьОбъект();
				
			Иначе
				
				ДанныеАгентаОбъект = Справочники.ДанныеАгентов.СоздатьЭлемент();
				
				Если НЕ СвойстваДанныеАгентаXDTO.Получить("UUID") = Неопределено Тогда
					
					УУИД = Новый УникальныйИдентификатор(ДанныеАгентаXDTO.UUID);
					ДанныеАгентаОбъект.УстановитьСсылкуНового(Справочники.ДанныеАгентов.ПолучитьСсылку(УУИД));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Код поиска
		Если НЕ ДанныеАгентаXDTO.Получить("Code") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.Code) Тогда
				
				Если НЕ ДанныеАгентаОбъект.КодПоиска = ДанныеАгентаXDTO.Code Тогда
					
					ДанныеАгентаОбъект.КодПоиска = ДанныеАгентаXDTO.Code;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Признак агента по предмету расчета
		Если НЕ ДанныеАгентаXDTO.Получить("AgentType") = Неопределено Тогда
			
			ПризнакАгента = ОбщегоНазначенияПовтИсп.ПолучитьПризнакАгентаПоКоду(ДанныеАгентаXDTO.AgentType);
			
			Если НЕ ДанныеАгентаОбъект.ПризнакАгента = ПризнакАгента Тогда
				
				ДанныеАгентаОбъект.ПризнакАгента = ПризнакАгента;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		// Операция платежного агента
		Если НЕ ДанныеАгентаXDTO.Получить("AgentOperation") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.AgentOperation) Тогда
				
				Если НЕ ДанныеАгентаОбъект.ОперацияПлатежногоАгента = ДанныеАгентаXDTO.AgentOperation Тогда
					
					ДанныеАгентаОбъект.ОперацияПлатежногоАгента = ДанныеАгентаXDTO.AgentOperation;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Телефон платежного агента
		Если НЕ ДанныеАгентаXDTO.Получить("AgentPhone") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.AgentPhone) Тогда
				
				Если НЕ ДанныеАгентаОбъект.ТелефонПлатежногоАгента = ДанныеАгентаXDTO.AgentPhone Тогда
					
					ДанныеАгентаОбъект.ТелефонПлатежногоАгента = ДанныеАгентаXDTO.AgentPhone;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Телефон оператора по приему платежей
		Если НЕ ДанныеАгентаXDTO.Получить("PaymentProcessorPhone") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.PaymentProcessorPhone) Тогда
				
				Если НЕ ДанныеАгентаОбъект.ТелефонОператораПоПриемуПлатежей = ДанныеАгентаXDTO.PaymentProcessorPhone Тогда
					
					ДанныеАгентаОбъект.ТелефонОператораПоПриемуПлатежей = ДанныеАгентаXDTO.PaymentProcessorPhone;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Телефон оператора перевода
		Если НЕ ДанныеАгентаXDTO.Получить("AcquirerOperatorPhone") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.AcquirerOperatorPhone) Тогда
				
				Если НЕ ДанныеАгентаОбъект.ТелефонОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorPhone Тогда
					
					ДанныеАгентаОбъект.ТелефонОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorPhone;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Наименование оператора перевода
		Если НЕ ДанныеАгентаXDTO.Получить("AcquirerOperatorName") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.AcquirerOperatorName) Тогда
				
				Если НЕ ДанныеАгентаОбъект.НаименованиеОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorName Тогда
					
					ДанныеАгентаОбъект.НаименованиеОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorName;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Адрес оператора перевода
		Если НЕ ДанныеАгентаXDTO.Получить("AcquirerOperatorAddress") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.AcquirerOperatorAddress) Тогда
				
				Если НЕ ДанныеАгентаОбъект.АдресОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorAddress Тогда
					
					ДанныеАгентаОбъект.АдресОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorAddress;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// ИНН оператора перевода
		Если НЕ ДанныеАгентаXDTO.Получить("AcquirerOperatorINN") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеАгентаXDTO.AcquirerOperatorINN) Тогда
				
				Если НЕ ДанныеАгентаОбъект.ИННОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorINN Тогда
					
					ДанныеАгентаОбъект.ИННОператораПеревода = ДанныеАгентаXDTO.AcquirerOperatorINN;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьИзмененияЭлемента Тогда
			ДанныеАгентаОбъект.Записать();
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеПоставщика(ДанныеПоставщиков, ЕстьИзменения)
	
	Если НЕ ТипЗнч(ДанныеПоставщиков.VendorData) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеПоставщикаXDTO Из ДанныеПоставщиков.VendorData Цикл
		
		ЕстьИзмененияЭлемента = Ложь;
		
		СвойстваДанныеПоставщикаXDTO = ДанныеПоставщикаXDTO.Свойства();
		
		ДанныеПоставщикаОбъект = Неопределено;
		
		// поиск по UUID
		Если НЕ СвойстваДанныеПоставщикаXDTO.Получить("UUID") = Неопределено Тогда
			
			УУИД = Новый УникальныйИдентификатор(ДанныеПоставщикаXDTO.UUID);
			ДанныеПоставщикаСсылка = Справочники.ДанныеПоставщиков.ПолучитьСсылку(УУИД);
			
			Если ЗначениеЗаполнено(ДанныеПоставщикаСсылка) Тогда
				ДанныеПоставщикаОбъект = ДанныеПоставщикаСсылка.ПолучитьОбъект();
			КонецЕсли;
			
		КонецЕсли;
		
		// поиск по коду
		КодПоиска = ДанныеПоставщикаXDTO.Code; // обязательный реквизит
		
		Если ДанныеПоставщикаОбъект = Неопределено Тогда
			
			ДанныеПоставщикаСсылка = ПолучитьДанныеПоставщикаПоКодуПоиска(КодПоиска);
			
			Если ЗначениеЗаполнено(ДанныеПоставщикаСсылка) Тогда
				
				ДанныеПоставщикаОбъект = ДанныеПоставщикаСсылка.ПолучитьОбъект();
				
			Иначе
				
				ДанныеПоставщикаОбъект = Справочники.ДанныеПоставщиков.СоздатьЭлемент();
				
				Если НЕ СвойстваДанныеПоставщикаXDTO.Получить("UUID") = Неопределено Тогда
					
					УУИД = Новый УникальныйИдентификатор(ДанныеПоставщикаXDTO.UUID);
					ДанныеПоставщикаОбъект.УстановитьСсылкуНового(Справочники.ДанныеПоставщиков.ПолучитьСсылку(УУИД));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Код поиска
		Если НЕ ДанныеПоставщикаXDTO.Получить("Code") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеПоставщикаXDTO.Code) Тогда
				
				Если НЕ ДанныеПоставщикаОбъект.КодПоиска = ДанныеПоставщикаXDTO.Code Тогда
					
					ДанныеПоставщикаОбъект.КодПоиска = ДанныеПоставщикаXDTO.Code;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Телефон поставщика
		Если НЕ ДанныеПоставщикаXDTO.Получить("VendorPhone") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеПоставщикаXDTO.VendorPhone) Тогда
				
				Если НЕ ДанныеПоставщикаОбъект.ТелефонПоставщика = ДанныеПоставщикаXDTO.VendorPhone Тогда
					
					ДанныеПоставщикаОбъект.ТелефонПоставщика = ДанныеПоставщикаXDTO.VendorPhone;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// ИНН поставщика услуг
		Если НЕ ДанныеПоставщикаXDTO.Получить("VendorINN") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеПоставщикаXDTO.VendorINN) Тогда
				
				Если НЕ ДанныеПоставщикаОбъект.ИННПоставщикаУслуг = ДанныеПоставщикаXDTO.VendorINN Тогда
					
					ДанныеПоставщикаОбъект.ИННПоставщикаУслуг = ДанныеПоставщикаXDTO.VendorINN;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Наименование поставщика
		Если НЕ ДанныеПоставщикаXDTO.Получить("VendorName") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеПоставщикаXDTO.VendorName) Тогда
				
				Если НЕ ДанныеПоставщикаОбъект.ПоставщикУслуг = ДанныеПоставщикаXDTO.VendorName Тогда
					
					ДанныеПоставщикаОбъект.ПоставщикУслуг = ДанныеПоставщикаXDTO.VendorName;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьИзмененияЭлемента Тогда
			ДанныеПоставщикаОбъект.Записать();
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЕдиницыИзмерения(ЕдиницыИзмеренияXDTO, ЕстьИзменения)
	
	Если НЕ ТипЗнч(ЕдиницыИзмеренияXDTO.Unit) = Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЕдиницаИзмеренияXDTO Из ЕдиницыИзмеренияXDTO.Unit Цикл
		
		ЕстьИзмененияЭлемента = Ложь;
		
		СвойстваXDTO = ЕдиницаИзмеренияXDTO.Свойства();
		
		УУИД = Неопределено;
		
		Если НЕ СвойстваXDTO.Получить("UUID") = Неопределено И ЗначениеЗаполнено(ЕдиницаИзмеренияXDTO.UUID) Тогда
			УУИД = ЕдиницаИзмеренияXDTO.UUID;
		КонецЕсли;
		
		ЕдиницаИзмеренияСсылка = ПолучитьЕдиницуИзмерения(ЕдиницаИзмеренияXDTO.Code, УУИД, Ложь);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияСсылка) Тогда
			ЕдиницаИзмеренияОбъект = ЕдиницаИзмеренияСсылка.ПолучитьОбъект();
			
		Иначе
			
			ЕдиницаИзмеренияОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			
			Если НЕ УУИД = Неопределено Тогда
				ЕдиницаИзмеренияСсылка = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(УУИД);
				ЕдиницаИзмеренияОбъект.УстановитьСсылкуНового(ЕдиницаИзмеренияСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
		// Код поиска
		Если НЕ СвойстваXDTO.Получить("Code") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияXDTO.Code) Тогда
				
				Если НЕ ЕдиницаИзмеренияОбъект.Код = ЕдиницаИзмеренияXDTO.Code Тогда
					
					ЕдиницаИзмеренияОбъект.Код = ЕдиницаИзмеренияXDTO.Code;
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Наименование
		Если НЕ СвойстваXDTO.Получить("Name") = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияXDTO.Name) Тогда
				
				Если НЕ ЕдиницаИзмеренияОбъект.Наименование = ЕдиницаИзмеренияXDTO.Name Тогда
					
					ЕдиницаИзмеренияОбъект.Наименование = ЕдиницаИзмеренияXDTO.Name;
					ЕдиницаИзмеренияОбъект.НаименованиеПолное = ЕдиницаИзмеренияОбъект.Наименование;
					
					ЕстьИзмененияЭлемента = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьИзмененияЭлемента Тогда
			ЕдиницаИзмеренияОбъект.Записать();
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьТовары(Товары, ВерсияФорматаОбмена, ЕстьИзменения, ИнфоТекст = "")
	
	Если НЕ Товары.Свойства().Получить("Good") = Неопределено Тогда
		ТоварыXDTO = Товары.Good;
	ИначеЕсли НЕ Товары.Свойства().Получить("RecordGood") = Неопределено Тогда
		ТоварыXDTO = Товары.RecordGood;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из ТоварыXDTO Цикл
		
		Если Булево(СтрокаТовар.HavingCharacteristic) Тогда
			
			Если НЕ СтрокаТовар.Свойства().Получить("Characteristics") = Неопределено Тогда
				ХарактеристикиXDTO = СтрокаТовар.Characteristics.Characteristic;
			ИначеЕсли НЕ СтрокаТовар.Свойства().Получить("Characteristic") = Неопределено Тогда
				ХарактеристикиXDTO = СтрокаТовар.Characteristic.RecordCharacteristic;
			КонецЕсли;
			
			Если ТипЗнч(ХарактеристикиXDTO) = Тип("СписокXDTO") Тогда
				
				Для Каждого СтрокаХарактеристика Из ХарактеристикиXDTO Цикл
					ОбработатьХарактеристикуНоменклатуры(СтрокаТовар, СтрокаХарактеристика, ЕстьИзменения);
				КонецЦикла;
			Иначе
				
				ОбработатьХарактеристикуНоменклатуры(СтрокаТовар, ХарактеристикиXDTO, ЕстьИзменения);
			КонецЕсли;
			
		ИначеЕсли Булево(СтрокаТовар.HavingPacking) Тогда
			
			Если НЕ СтрокаТовар.Свойства().Получить("Packings") = Неопределено Тогда
				УпаковкиXDTO = СтрокаТовар.Packings.Packing;
			ИначеЕсли НЕ СтрокаТовар.Свойства().Получить("Packing") = Неопределено Тогда
				УпаковкиXDTO = СтрокаТовар.Packing.RecordPacking;
			КонецЕсли;
			
			Если ТипЗнч(УпаковкиXDTO) = Тип("СписокXDTO") Тогда
				Для Каждого СтрокаУпаковка Из УпаковкиXDTO Цикл
					Наименование = СтрокаТовар.Name + " (" + СтрокаУпаковка.Name + ")";
					ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, СтрокаУпаковка.Code, Наименование, СтрокаУпаковка.Price, СтрокаУпаковка.BarCode, ЕстьИзменения);
				КонецЦикла;
			Иначе
				Запись = УпаковкиXDTO;
				Наименование = СтрокаТовар.Name + " (" + Запись.Name + ")";
				ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, Запись.Code, Наименование, Запись.Price, Запись.BarCode, ЕстьИзменения);
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, СтрокаТовар.Code, СтрокаТовар.Name, СтрокаТовар.Price, СтрокаТовар.BarCode, ЕстьИзменения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьХарактеристикуНоменклатуры(СтрокаТовар, СтрокаХарактеристика, ЕстьИзменения)
	
	Если Булево(СтрокаХарактеристика.HavingPacking) Тогда
		
		Если НЕ СтрокаХарактеристика.Свойства().Получить("Packings") = Неопределено Тогда
			УпаковкиXDTO = СтрокаХарактеристика.Packings.Packing;
		ИначеЕсли НЕ СтрокаХарактеристика.Свойства().Получить("Packing") = Неопределено Тогда
			УпаковкиXDTO = СтрокаХарактеристика.Packing.RecordPacking;
		КонецЕсли;
		
		Если ТипЗнч(УпаковкиXDTO) = Тип("СписокXDTO") Тогда
			
			Для Каждого СтрокаУпаковка Из УпаковкиXDTO Цикл
				Наименование = СтрокаТовар.Name + " (" + СтрокаХарактеристика.Name + ")" + " (" + СтрокаУпаковка.Name + ")";
				ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, СтрокаУпаковка.Code, Наименование, СтрокаУпаковка.Price, СтрокаУпаковка.BarCode, ЕстьИзменения);
			КонецЦикла;
			
		Иначе
			Запись = УпаковкиXDTO;
			Наименование = СтрокаТовар.Name + " (" + СтрокаХарактеристика.Name + ")" + " (" + Запись.Name + ")";
			ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, Запись.Code, Наименование, Запись.Price, Запись.BarCode, ЕстьИзменения);
		КонецЕсли;
		
	Иначе
		
		Наименование = СтрокаТовар.Name + " (" + СтрокаХарактеристика.Name + ")";
		ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, СтрокаХарактеристика.Code, Наименование, СтрокаХарактеристика.Price, СтрокаХарактеристика.BarCode, ЕстьИзменения);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНоменклатуры(СтрокаТовар, КодПоиска, Наименование, Цена, Штрихкод, ЕстьИзменения)
	
	СвойстваТовараXDTO = СтрокаТовар.Свойства();
	
	НоменклатураСсылка = ПолучитьНоменклатуруПоКодуПоиска(КодПоиска);
	
	ЕстьИзмененияЭлемента = Ложь;
	
	Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	Иначе
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	КонецЕсли;
	
	// КодПоиска
	Если НЕ НоменклатураОбъект.КодПоиска = КодПоиска Тогда
		
		НоменклатураОбъект.КодПоиска = КодПоиска;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// Артикул
	Если НЕ НоменклатураОбъект.Артикул = СтрокаТовар.Article Тогда
		
		НоменклатураОбъект.Артикул = СтрокаТовар.Article;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// Цена
	Если НЕ НоменклатураОбъект.Цена = Цена Тогда
		
		НоменклатураОбъект.Цена = Цена;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;

	// СтавкаНДС
	СтавкаНДС = ЦенообразованиеКлиентСерверПовтИсп.ПолучитьСтавкуНДС(СтрокаТовар.Tax);
	Если НЕ НоменклатураОбъект.СтавкаНДС = СтавкаНДС Тогда
		
		НоменклатураОбъект.СтавкаНДС = СтавкаНДС;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// ЕдиницаИзмерения
	ЕдиницаИзмерения = ОбщегоНазначенияПовтИсп.ПолучитьСоздатьЕдиницуИзмерения(СтрокаТовар.UnitOfMeasurement);
	Если НЕ НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения Тогда
		
		НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	// Группа
	Группа = ПолучитьНоменклатуруПоКодуПоиска(СтрокаТовар.GroupCode, Истина);
	
	Если НЕ НоменклатураОбъект.Родитель = Группа Тогда
		
		НоменклатураОбъект.Родитель = Группа;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	Если НЕ НоменклатураОбъект.Наименование = Наименование Тогда
		
		НоменклатураОбъект.Наименование = Наименование;
		ЕстьИзмененияЭлемента = Истина;
	КонецЕсли;
	
	
	// АЛКОГОЛЬНЫЕ РЕКВИЗИТЫ
	
	// АлкогольнаяПродукция
	Если НЕ СвойстваТовараXDTO.Получить("Alcohol") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.Alcohol) Тогда
			
			Если НЕ НоменклатураОбъект.АлкогольнаяПродукция = СтрокаТовар.Alcohol Тогда
				
				НоменклатураОбъект.АлкогольнаяПродукция = СтрокаТовар.Alcohol;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// МаркируемаяАлкогольнаяПродукция
	Если НЕ СвойстваТовараXDTO.Получить("AlcoholExcisable") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.AlcoholExcisable) Тогда
			
			Если НЕ НоменклатураОбъект.МаркируемаяАлкогольнаяПродукция = СтрокаТовар.AlcoholExcisable Тогда
				
				НоменклатураОбъект.МаркируемаяАлкогольнаяПродукция = СтрокаТовар.AlcoholExcisable;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// ОбъемАлкогольнойПродукции
	Если НЕ СвойстваТовараXDTO.Получить("AlcoholContainerSize") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.AlcoholContainerSize) Тогда
			
			Если НЕ НоменклатураОбъект.ОбъемАлкогольнойПродукции = СтрокаТовар.AlcoholContainerSize Тогда
				
				НоменклатураОбъект.ОбъемАлкогольнойПродукции = СтрокаТовар.AlcoholContainerSize;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Крепость
	Если НЕ СвойстваТовараXDTO.Получить("AlcoholStrength") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.AlcoholStrength) Тогда
			
			Если НЕ НоменклатураОбъект.Крепость = СтрокаТовар.AlcoholStrength Тогда
				
				НоменклатураОбъект.Крепость = СтрокаТовар.AlcoholStrength;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// ИННПроизводителя
	Если НЕ СвойстваТовараXDTO.Получить("VendorINNCode") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.VendorINNCode) Тогда
			
			Если НЕ НоменклатураОбъект.ИННПроизводителя = СтрокаТовар.VendorINNCode Тогда
				
				НоменклатураОбъект.ИННПроизводителя = СтрокаТовар.VendorINNCode;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// КПППроизводителя
	Если НЕ СвойстваТовараXDTO.Получить("VendorKPPCode") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.VendorKPPCode) Тогда
			
			Если НЕ НоменклатураОбъект.КПППроизводителя = СтрокаТовар.VendorKPPCode Тогда
				
				НоменклатураОбъект.КПППроизводителя = СтрокаТовар.VendorKPPCode;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// КодВидаАлкогольнойПродукции
	Если НЕ СвойстваТовараXDTO.Получить("AlcoholKindCode") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.AlcoholKindCode) Тогда
			
			Если НЕ НоменклатураОбъект.КодВидаАлкогольнойПродукции = СтрокаТовар.AlcoholKindCode Тогда
				
				НоменклатураОбъект.КодВидаАлкогольнойПродукции = СтрокаТовар.AlcoholKindCode;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// ВидАлкогольнойПродукции
	Если ЗначениеЗаполнено(НоменклатураОбъект.КодВидаАлкогольнойПродукции) Тогда
		
		ВидАлкогольнойПродукции = ОбщегоНазначенияПовтИсп.ПолучитьВидАлкогольнойПродукцииПоКоду(НоменклатураОбъект.КодВидаАлкогольнойПродукции);
		
		Если НЕ НоменклатураОбъект.ВидАлкогольнойПродукции = ВидАлкогольнойПродукции Тогда
			
			НоменклатураОбъект.ВидАлкогольнойПродукции = ВидАлкогольнойПродукции;
			ЕстьИзмененияЭлемента = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Секция
	Если НЕ СвойстваТовараXDTO.Получить("Department") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.Department) Тогда
			
			Если НЕ НоменклатураОбъект.Секция = СтрокаТовар.Department Тогда
				
				НоменклатураОбъект.Секция = СтрокаТовар.Department;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Признак предмета расчета
	Если НЕ СвойстваТовараXDTO.Получить("SignCalculationObject") = Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТовар.SignCalculationObject) Тогда
			
			ПризнакПредметаРасчета = ОбщегоНазначенияПовтИсп.ПолучитьПризнакПредметаРасчетаПоКоду(СтрокаТовар.SignCalculationObject);
			
			Если НЕ НоменклатураОбъект.ПризнакПредметаРасчета = ПризнакПредметаРасчета Тогда
				
				НоменклатураОбъект.ПризнакПредметаРасчета = ПризнакПредметаРасчета;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьИзмененияЭлемента Тогда
		НоменклатураОбъект.Записать();
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	// Штрихкоды
	ЗаписатьШтрихкодыНоменклатуры(НоменклатураОбъект.Ссылка, Штрихкод);
	
КонецПроцедуры

Процедура ЗаписатьШтрихкодыНоменклатуры(Номенклатура, СтрокаШтрихкоды)
	
	// Штрихкоды
	Если ЗначениеЗаполнено(СтрокаШтрихкоды) Тогда
		МассивШтрихкодов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаШтрихкоды,",");
		
		НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Для Каждого Штрихкод Из МассивШтрихкодов Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Номенклатура = Номенклатура;
			Запись.Штрихкод = СокрЛП(Штрихкод);
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьВидыОплаты(СписокВидовОплаты, ЕстьИзмененияВидыОплаты)
	
	Для Каждого ВидОплатыXDTO Из СписокВидовОплаты Цикл
		
		ЕстьИзмененияЭлемента = Ложь;
		
		СвойстваXDTO = ВидОплатыXDTO.Свойства();
		
		УУИД = Неопределено;
		
		Если НЕ СвойстваXDTO.Получить("UUID") = Неопределено И ЗначениеЗаполнено(ВидОплатыXDTO.UUID) Тогда
			УУИД = ВидОплатыXDTO.UUID;
		КонецЕсли;
		
		ВидОплатыСсылка = ПолучитьВидОплаты(ВидОплатыXDTO.Code, УУИД);
		
		Если ЗначениеЗаполнено(ВидОплатыСсылка) Тогда
			ВидОплатыОбъект = ВидОплатыСсылка.ПолучитьОбъект();
			
		Иначе
			
			ВидОплатыОбъект = Справочники.ВидыОплаты.СоздатьЭлемент();
			
			Если НЕ УУИД = Неопределено Тогда
				ВидОплатыСсылка = Справочники.ВидыОплаты.ПолучитьСсылку(УУИД);
				ВидОплатыОбъект.УстановитьСсылкуНового(ВидОплатыСсылка);
			КонецЕсли;
			
		КонецЕсли;
		
		// КодПоиска
		Если НЕ ВидОплатыОбъект.КодПоиска = ВидОплатыXDTO.Code Тогда
			
			ВидОплатыОбъект.КодПоиска = ВидОплатыXDTO.Code;
			ЕстьИзмененияЭлемента = Истина;
		КонецЕсли;
		
		// ТипОплаты
		ТипОплатыКод = 0;
		
		Если НЕ СвойстваXDTO.Получить("ElectronicPaymentType") = Неопределено Тогда
			
			ТипОплатыКод = ВидОплатыXDTO.ElectronicPaymentType;
			
		ИначеЕсли НЕ СвойстваXDTO.Получить("PaymentType") = Неопределено Тогда
			
			ТипОплатыКод = ВидОплатыXDTO.PaymentType;
		КонецЕсли;
		
		Если ТипОплатыКод = 1 Тогда
			ТипОплаты = Перечисления.ТипыОплаты.ПлатежнаяКарта;
			
			Если НЕ ВидОплатыОбъект.ТипОплаты = ТипОплаты Тогда
				
				ВидОплатыОбъект.ТипОплаты = ТипОплаты;
				ЕстьИзмененияЭлемента = Истина;
			КонецЕсли;
		Иначе
			//Тип оплаты не поддерживается.
			Продолжить;
		КонецЕсли;
	
		// Наименование
		Если НЕ ВидОплатыОбъект.Наименование = ВидОплатыXDTO.Name Тогда
			
			ВидОплатыОбъект.Наименование = ВидОплатыXDTO.Name;
			ЕстьИзмененияЭлемента = Истина;
		КонецЕсли;
		
		Если ЕстьИзмененияЭлемента Тогда
			ВидОплатыОбъект.Записать();
			ЕстьИзмененияВидыОплаты = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеИзXMLТекстаИлиФайла(ВерсииФорматаСообщения,
		ИмяТипаОбъектаXDTO, XMLТекстСообщения = Неопределено, ИмяФайла = Неопределено)
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Если НЕ XMLТекстСообщения = Неопределено Тогда
		ЧтениеXML.УстановитьСтроку(XMLТекстСообщения);
	ИначеЕсли НЕ ИмяФайла = Неопределено Тогда
		НаборСхемXML = СинхронизацияПовтИсп.ПолучитьНаборСхемXML(ВерсииФорматаСообщения);
		ЧтениеXML.ОткрытьФайл(ИмяФайла, ,НаборСхемXML);
	КонецЕсли;
	
	Фабрика = СинхронизацияПовтИсп.ПолучитьФабрикуXDTO(ВерсииФорматаСообщения);
	
	ТипОбъектаXDTO = Фабрика.Тип(СинхронизацияПовтИсп.ПолучитьURIПространстваИмен(ВерсииФорматаСообщения), ИмяТипаОбъектаXDTO);
	
	Данные = Фабрика.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	ЧтениеXML.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция СоздатьФайлПроверки(FILEКаталогОбменаИнформацией)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокумент.Записать(ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(FILEКаталогОбменаИнформацией, СинхронизацияПовтИсп.ИмяВременногоФайлаФлага()));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьФайлПроверки(FILEКаталогОбменаИнформацией)
	
	Попытка
		УдалитьФайлы(FILEКаталогОбменаИнформацией, СинхронизацияПовтИсп.ИмяВременногоФайлаФлага());
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьWSПрокси(Отказ, СтруктураНастроек, СтрокаСообщенияОбОшибке = "", СообщениеПользователю = "", Таймаут = 180)
	
	УдалитьНезначащиеСимволыВНастройкахПодключения(СтруктураНастроек);
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/EquipmentService");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "EquipmentService");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ПолучитьWSПроксиПоПараметрамПодключения(Отказ, СтруктураНастроек, СтрокаСообщенияОбОшибке, СообщениеПользователю);
	
КонецФункции

Функция ПолучитьWSПроксиПоПараметрамПодключения(
					Отказ,
					СтруктураНастроек,
					СтрокаСообщенияОбОшибке = "",
					СообщениеПользователю = ""
	)
	
	Попытка
		ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(СтруктураНастроек.WSИмяПользователя);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	МестоположениеWSDL = "[URLВебСервиса]/ws/[ИмяСервиса]?wsdl";
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[URLВебСервиса]", СтруктураНастроек.WSURLВебСервиса);
	МестоположениеWSDL = СтрЗаменить(МестоположениеWSDL, "[ИмяСервиса]",    СтруктураНастроек.WSИмяСервиса);
	
	Попытка
		WSПрокси = WSПрокси(
			МестоположениеWSDL,
			СтруктураНастроек.WSURLПространстваИменСервиса,
			СтруктураНастроек.WSИмяСервиса,
			,
			СтруктураНастроек.WSИмяПользователя,
			СтруктураНастроек.WSПароль,
			СтруктураНастроек.WSТаймаут);
	Исключение
		СообщениеПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат WSПрокси;
КонецФункции

Процедура УдалитьНезначащиеСимволыВНастройкахПодключения(Настройки)
	
	Для Каждого Настройка Из Настройки Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Строка") Тогда
			
			Настройки.Вставить(Настройка.Ключ, СокрЛП(Настройка.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(Знач ИмяПользователя)
	
	Если ОбщегоНазначенияКлиентСервер.СтрокаСодержитСимвол(ИмяПользователя, СинхронизацияПовтИсп.НедопустимыеСимволыВИмениПользователяWSПрокси()) Тогда
		
		СтрокаСообщения = НСтр("ru = 'В имени пользователя %1 содержатся недопустимые символы.
			|Имя пользователя не должно содержать символы %2.'");
		СтрокаСообщения = ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
			ИмяПользователя, СинхронизацияПовтИсп.НедопустимыеСимволыВИмениПользователяWSПрокси());
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция WSПрокси(Знач АдресWSDL, Знач URIПространстваИмен, Знач ИмяСервиса,
	Знач ИмяТочкиПодключения = "", Знач ИмяПользователя, Знач Пароль,
	Знач Таймаут = Неопределено)
	
	WSОпределения = WSОпределения(АдресWSDL, ИмяПользователя, Пароль);
	ИнтернетПрокси = Неопределено;
	Если ПустаяСтрока(ИмяТочкиПодключения) Тогда
		ИмяТочкиПодключения = ИмяСервиса + "Soap";
	КонецЕсли;
	
	Прокси = Новый WSПрокси(WSОпределения, URIПространстваИмен, ИмяСервиса, ИмяТочкиПодключения, ИнтернетПрокси, Таймаут);
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль       = Пароль;
	
	Возврат Прокси;
КонецФункции

Функция WSОпределения(Знач АдресWSDL, Знач ИмяПользователя, Знач Пароль, Знач Таймаут = 10)
	
	Возврат Новый WSОпределения(АдресWSDL, ИмяПользователя, Пароль, ,Таймаут);
	
КонецФункции

Функция ПолучитьНоменклатуруПоКодуПоиска(КодПоиска, ЭтоГруппа = Ложь)
	
	Если Не ЗначениеЗаполнено(КодПоиска) Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = &ЭтоГруппа
	|	И Номенклатура.КодПоиска = &КодПоиска";
	
	Запрос.УстановитьПараметр("КодПоиска", КодПоиска);
	Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеАгентаПоКодуПоиска(КодПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеАгента.Ссылка
	|ИЗ
	|	Справочник.ДанныеАгентов КАК ДанныеАгента
	|ГДЕ
	|	ДанныеАгента.КодПоиска = &КодПоиска";
	
	Запрос.УстановитьПараметр("КодПоиска", КодПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДанныеАгентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеПоставщикаПоКодуПоиска(КодПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПоставщиков.Ссылка
	|ИЗ
	|	Справочник.ДанныеПоставщиков КАК ДанныеПоставщиков
	|ГДЕ
	|	ДанныеПоставщиков.КодПоиска = &КодПоиска";
	
	Запрос.УстановитьПараметр("КодПоиска", КодПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ДанныеПоставщиков.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЗначениеXDTO(ВерсияФорматаОбмена, Фабрика, ИмяТипа)
	
	ТипXDTO = Фабрика.Тип(СинхронизацияПовтИсп.ПолучитьURIПространстваИмен(ВерсияФорматаОбмена), ИмяТипа);
	ЗначениеXDTO = Фабрика.Создать(ТипXDTO);
	
	Возврат ЗначениеXDTO;
	
КонецФункции

Функция ПолучитьТекстXMLОбъектаXDTO(Фабрика, ОбъектXDTO, Отказ, Лог)
	
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ТекстСообщения = ЗаписьXML.Закрыть();
		
	Исключение
		
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.ДополнитьТекст(Лог, ТекстСообщения);
		
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ОпределитьВерсиюФорматаФайла(ИмяФайла)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если Данные.Свойства().Получить("FormatVersion") = Неопределено Тогда
		
		МинимальнаяВерсияФорматаОбмена = 1005;
		Возврат МинимальнаяВерсияФорматаОбмена;
		
	Иначе
		
		Возврат Число(Данные.FormatVersion);
	КонецЕсли;
	
КонецФункции

Функция ВерсияФорматаОбменаПоследнейЗагрузки()
	
	ВерсияФорматаОбмена = Константы.ВерсияФорматаОбмена.Получить();
	
	Если ЗначениеЗаполнено(ВерсияФорматаОбмена) Тогда
		МинимальнаяВерсияФорматаОбмена = 1005;
	КонецЕсли;
	
	Возврат ВерсияФорматаОбмена;
	
КонецФункции

Процедура УстановитьВерсиюФорматаПоследнейЗагрузки(ВерсияФорматаОбмена)
	
	Константы.ВерсияФорматаОбмена.Установить(ВерсияФорматаОбмена);
	ПараметрыСеанса.ВерсияФорматаОбмена = ВерсияФорматаОбмена;
	
КонецПроцедуры

Функция ПолучитьТипМаркировкиПоКоду(КодМаркировки)
	
	Если КодМаркировки = 1 ИЛИ КодМаркировки = "1"  Тогда
		
		Возврат Перечисления.ТипыМаркировкиККТ.ИзделияИзМеха;
		
	ИначеЕсли КодМаркировки = 2 ИЛИ КодМаркировки = "2" Тогда
		
		Возврат Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
		
	ИначеЕсли КодМаркировки = 3 ИЛИ КодМаркировки = "3" Тогда
		
		Возврат Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;

	КонецЕсли;
	
КонецФункции

#КонецОбласти