
#Область ПрограммныйИнтерфейс

Функция ПолучитьЗаголовокВиджета1СКасса() Экспорт
		
	Статус = ПолучитьСтатусРегистрации();
	
	Если Статус = Перечисления.СтатусыРегистрацииВОблаке.ЗарегистрированВСервисе Тогда
		
		ЗаголовокНадписи = НСтр("ru = 'Продолжить регистрацию 1С:Касса'");
		
	Иначе
		
		ЗаголовокНадписи = НСтр("ru = '1С:Касса – товароучет, работа с онлайн-кассами и аналитика в облаке.
		|Попробуйте бесплатно!'"
		);
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция ОтображатьВиджет1СКассаНаРабочемСтоле() Экспорт
	
	Если НЕ ДоступноРегистрация1СКасса() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Статус = ПолучитьСтатусРегистрации();
	
	Если Статус = Перечисления.СтатусыРегистрацииВОблаке.ОткрытМастер
		ИЛИ Статус = Перечисления.СтатусыРегистрацииВОблаке.РегистрацияЗавершена Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтображатьВиджет1СКассаНаРабочемСтолеПодвал() Экспорт
	
	Если НЕ ДоступноРегистрация1СКасса() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Статус = ПолучитьСтатусРегистрации();
	
	Если Статус = Перечисления.СтатусыРегистрацииВОблаке.ОткрытМастер Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


Функция ОтображатьВиджет1СКасса() Экспорт
	
	Если НЕ ДоступноРегистрация1СКасса() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Статус = ПолучитьСтатусРегистрации();
	
	Если Статус = Перечисления.СтатусыРегистрацииВОблаке.РегистрацияЗавершена Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДоступноРегистрация1СКасса()
	
	
	Возврат Ложь;
	
КонецФункции


Процедура ВыгрузитьДанныеПриложенияДляИнтеграции(ПолныйПутьФайла) Экспорт
	
	ДанныеНастроек = ПолучитьДанныеНастроек();
	
	ДанныеПрайсЛиста = ПолучитьДанныеПрайсЛиста();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	
	ЗаписьJSON.ОткрытьФайл(ПолныйПутьФайла,,, ПараметрыJSON);
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("Настройки", ДанныеНастроек);
	ДанныеДляЗаписи.Вставить("ПрайсЛист", ДанныеПрайсЛиста);
	
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляЗаписи);
	
	ЗаписьJSON.Закрыть();
	
КонецПроцедуры

Процедура УстановитьПараметрыСинхронизации() Экспорт
	
	НаборКонстант = Константы.СоздатьНабор(СписокКонстантПараметрыСинхронизации());
	НаборКонстант.Прочитать();
	
	НаборКонстант.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	НаборКонстант.ИдентификаторУстройства = ПолучитьЗаводскойНомерККТ();
	
	НаборКонстант.ПользовательWS = ПолучитьEmailПользователя();
	НаборКонстант.ПарольWS = ПолучитьПарольПользователя();
	НаборКонстант.ЗагружатьНастройки = Истина;
	
	Вариант = "СтрокаФреш";
	АдресСервера = СинхронизацияКлиентСервер.АдресСервераФреш();
	ПортWS = 80;
	ЗащищенныйПротокол = Истина;
	
	ИмяБД = "a/%ИмяБазы%/%НомерОбласти%";
	ИмяБД = СтрЗаменить(ИмяБД, "%ИмяБазы%", РегистрацияВОблакеКлиентСерверПовтИсп.ПолучитьИмяБазы());
	ИмяБД = СтрЗаменить(ИмяБД, "%НомерОбласти%", ПолучитьНомерОбластиПользователя());
	
	ПолныйАдрес = СинхронизацияКлиентСервер.ПолучитьПолныйАдресПодключения(Вариант, ИмяБД, ПортWS, ЗащищенныйПротокол, АдресСервера);
	
	НаборКонстант.АдресWS = ПолныйАдрес;
	
	НаборКонстант.РежимСинхронизацииДанных = Перечисления.РежимСинхронизацииДанных.ККМOffline;
	
	НаборКонстант.Записать();
	
КонецПроцедуры

Процедура СохранитьИмяПользователя(ИмяПользователя) Экспорт
	
	Константы.РегистрацияВОблакеИмяПользователя.Установить(ИмяПользователя);
	
КонецПроцедуры

Функция ПолучитьИмяПользователя() Экспорт
	
	Возврат Константы.РегистрацияВОблакеИмяПользователя.Получить();
	
КонецФункции

Процедура СохранитьEmailПользователя(Email) Экспорт
	
	Константы.РегистрацияВОблакеEmail.Установить(Email);
	
КонецПроцедуры

Функция ПолучитьEmailПользователя() Экспорт
	
	Возврат Константы.РегистрацияВОблакеEmail.Получить();
	
КонецФункции

Процедура СохранитьНомерТелефонаПользователя(НомерТелефона) Экспорт
	
	Константы.РегистрацияВОблакеНомерТелефона.Установить(НомерТелефона);
	
КонецПроцедуры

Функция ПолучитьНомерТелефонаПользователя() Экспорт
	
	Возврат Константы.РегистрацияВОблакеНомерТелефона.Получить();
	
КонецФункции

Процедура СохранитьПарольПользователя(Пароль) Экспорт
	
	Константы.РегистрацияВОблакеПароль.Установить(Пароль);
	
КонецПроцедуры

Функция ПолучитьПарольПользователя() Экспорт
	
	Возврат Константы.РегистрацияВОблакеПароль.Получить();
	
КонецФункции

Процедура СохранитьНомерОбластиПользователя(НомерОбласти) Экспорт
	
	Константы.РегистрацияВОблакеНомерОбласти.Установить(Формат(НомерОбласти, "ЧГ=0"));
	
КонецПроцедуры

Функция ПолучитьНомерОбластиПользователя() Экспорт
	
	Возврат Формат(Константы.РегистрацияВОблакеНомерОбласти.Получить(), "ЧГ=0");
	
КонецФункции

Процедура СохранитьСтатусРегистрации(Статус) Экспорт
	
	Константы.РегистрацияВОблакеСтатус.Установить(Статус);
	
КонецПроцедуры

Функция ПолучитьСтатусРегистрации() Экспорт
	
	Возврат Константы.РегистрацияВОблакеСтатус.Получить();
	
КонецФункции

Процедура СохранитьЗаводскойНомерККТ(ЗаводскойНомерККТ) Экспорт
	
	Константы.ЗаводскойНомерККМ.Установить(ЗаводскойНомерККТ);
	
КонецПроцедуры

Функция ПолучитьЗаводскойНомерККТ() Экспорт
	
	Возврат Константы.ЗаводскойНомерККМ.Получить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеНастроек()
	
	СписокКонстант = "НаименованиеОрганизации,
	|ИНН,
	|СистемаНалогообложения,
	|ИспользоватьСкидкиНаценки,
	|ИспользоватьОплатуПлатежнымиКартами,
	|ИспользоватьУчетПоКассирам,
	|ИспользоватьАлкогольнуюПродукцию,
	|ТипВыемки,
	|СуммаОстаткаВКассе,
	|КПП,
	|НаименованиеМагазина,
	|АдресМагазина,
	|ЗагружатьТТНЕГАИС,
	|ВыгружатьЧекиЕГАИС,
	|ИспользоватьЗаказыКлиентов,
	|ИспользоватьРасчетыСКлиентами";
	
	НаборКонстант = Константы.СоздатьНабор(СписокКонстант);
	НаборКонстант.Прочитать();
	
	
	ДанныеНастройки = Новый Структура();
	
	ДанныеНастройки.Вставить("НаименованиеОрганизации", НаборКонстант.НаименованиеОрганизации);
	ДанныеНастройки.Вставить("ИННОрганизации", НаборКонстант.ИНН);
	ДанныеНастройки.Вставить("КППОрганизации", НаборКонстант.КПП);
	
	ДанныеНастройки.Вставить("ИспользуютсяСкидки", НаборКонстант.ИспользоватьСкидкиНаценки);
	ДанныеНастройки.Вставить("ИспользуютсяПлатежныеКарты", НаборКонстант.ИспользоватьОплатуПлатежнымиКартами);
	ДанныеНастройки.Вставить("ИспользуютсяЗаказы", НаборКонстант.ИспользоватьЗаказыКлиентов);
	
	Если ЗначениеЗаполнено(НаборКонстант.СистемаНалогообложения) Тогда
		ИндексЗначенияПеречисления = Перечисления.СистемыНалогообложения.Индекс(НаборКонстант.СистемаНалогообложения);
		ИмяЗначенияПеречисления = Метаданные.Перечисления.СистемыНалогообложения.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		ДанныеНастройки.Вставить("СистемаНалогообложения", ИмяЗначенияПеречисления);
	Иначе
		
		ДанныеНастройки.Вставить("СистемаНалогообложения", "Общая");
	КонецЕсли;
	
	ДанныеНастройки.Вставить("НаименованиеМагазина", НаборКонстант.НаименованиеМагазина);
	ДанныеНастройки.Вставить("АдресМагазина", НаборКонстант.АдресМагазина);
	
	ЗаводскойНомерККМ = ЗначениеНастроекВызовСервераПовтИсп.ЗаводскойНомерККМ();
	
	РегистрационныйНомер = "";
	Если ЗначениеЗаполнено(ЗаводскойНомерККМ) Тогда
		РегистрационныйНомер = ЗаводскойНомерККМ;
	КонецЕсли;
	
	ДанныеНастройки.Вставить("РегистрационныйНомер", РегистрационныйНомер);
	
	Возврат ДанныеНастройки;
	
КонецФункции

Функция ПолучитьДанныеПрайсЛиста()
	
	ГруппыТоваров = Новый Массив;
	Товары = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.КодПоиска КАК КодПоиска,
	|	Номенклатура.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.КодПоиска КАК КодПоиска,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	Номенклатура.Крепость КАК Крепость,
	|	Номенклатура.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Цена КАК Цена,
	|	Номенклатура.ВидАлкогольнойПродукции.Код КАК ВидАлкогольнойПродукцииКод,
	|	Номенклатура.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	Номенклатура.МаркируемаяАлкогольнаяПродукция КАК МаркируемаяАлкогольнаяПродукция,
	|	Номенклатура.ОбъемАлкогольнойПродукции КАК ОбъемАлкогольнойПродукцииЛитр
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаШтрихкодов = РезультатЗапроса[2].Выгрузить();
	
	// группы товаров
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьГруппы = ПолучитьЗаписьГруппыПрайсЛиста();
		
		ЗаполнитьЗначенияСвойств(ЗаписьГруппы, Выборка,
			"Наименование, КодПоиска"
		);
		
		ЗаписьГруппы.UUID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			
			ЗаписьГруппы.UUIDРодитель = Строка(Выборка.Родитель.УникальныйИдентификатор());
		КонецЕсли;
		
		ГруппыТоваров.Добавить(ЗаписьГруппы);
	КонецЦикла;
	
	
	// товары
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьТовара = ПолучитьЗаписьТовараПрайсЛиста();
		
		ЗаписьТовара.UUID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		ЗаполнитьЗначенияСвойств(ЗаписьТовара, Выборка,
			"Наименование, КодПоиска, Артикул, Цена, АлкогольнаяПродукция, Крепость,
			|КодВидаАлкогольнойПродукции, МаркируемаяАлкогольнаяПродукция, ОбъемАлкогольнойПродукцииЛитр"
		);
		
		ЗаписьТовара.СтавкаНДС = ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСККТ(Выборка.СтавкаНДС);
		
		ЗаписьТовара.ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.КодПризнакаПредметаРасчета(
			Выборка.ПризнакПредметаРасчета
		);
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ЗаписьТовара.UUIDРодитель = Строка(Выборка.Родитель.УникальныйИдентификатор());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			ЗаписьТовара.UUIDЕдиницаИзмерения = Строка(Выборка.ЕдиницаИзмерения.УникальныйИдентификатор());
			ЗаписьТовара.ЕдиницаИзмерения = Выборка.ЕдиницаИзмеренияНаименование;
		КонецЕсли;
		
		Штрихкоды = ТаблицаШтрихкодов.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Ссылка));
		
		Для Каждого НайденнаяСтрока Из Штрихкоды Цикл
			ЗаписьТовара.Штрихкоды.Добавить(НайденнаяСтрока.Штрихкод);
		КонецЦикла;
		
		Товары.Добавить(ЗаписьТовара);
		
	КонецЦикла;
	
	
	ДанныеПрайсЛиста = Новый Структура;
	ДанныеПрайсЛиста.Вставить("ГруппыТоваров", ГруппыТоваров);
	ДанныеПрайсЛиста.Вставить("Товары", Товары);
	
	Возврат ДанныеПрайсЛиста;
	
КонецФункции

Функция ПолучитьЗаписьГруппыПрайсЛиста()
	
	Запись = Новый Структура;
	
	Запись.Вставить("UUID", "");
	Запись.Вставить("Наименование", "");
	Запись.Вставить("КодПоиска", "");
	Запись.Вставить("UUIDРодитель", "");

	Возврат Запись;
	
КонецФункции

Функция ПолучитьЗаписьТовараПрайсЛиста()
	
	Запись = Новый Структура;
	
	Запись.Вставить("UUID", "");
	Запись.Вставить("Наименование", "");
	Запись.Вставить("КодПоиска", "");
	Запись.Вставить("UUIDРодитель", "");
	
	Запись.Вставить("ЕдиницаИзмерения", "");
	Запись.Вставить("UUIDЕдиницаИзмерения", "");

	Запись.Вставить("Цена", "");
	Запись.Вставить("Артикул", "");
	Запись.Вставить("АлкогольнаяПродукция", "");
	Запись.Вставить("ПризнакПредметаРасчета", "");
	Запись.Вставить("Крепость", "");
	Запись.Вставить("СтавкаНДС", "");
	Запись.Вставить("Штрихкоды", Новый Массив);
	
	Запись.Вставить("КодВидаАлкогольнойПродукции", "");
	Запись.Вставить("МаркируемаяАлкогольнаяПродукция", Ложь);
	Запись.Вставить("ОбъемАлкогольнойПродукцииЛитр", 0);
	
	Возврат Запись;
	
КонецФункции

Функция СписокКонстантПараметрыСинхронизации()
	
	Возврат "ВидТранспортаСообщенийОбмена,
	|РежимСинхронизацииДанных,
	|КаталогФайловогоОбмена,
	|МаскаФайловПрайсЛиста,
	|ИмяФайлаОтчетаОПродажах,
	|ИмяФайлаНастроек,
	|ИдентификаторУстройства,
	|АдресWS,
	|ПользовательWS,
	|ПарольWS,
	|ЗагружатьНастройки";
	
КонецФункции

#КонецОбласти

