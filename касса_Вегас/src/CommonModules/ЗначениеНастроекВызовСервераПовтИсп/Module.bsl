
#Область ПрограммныйИнтерфейс

// Истина, если нет ни одного элемента в прайс-листе (группы не учитываются)
// 
// Возвращаемое значение:
//   Булево   - Ложь, если есть хоть один товар.
//
Функция ПрайсЛистПуст() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПрайсЛистПуст = РезультатЗапроса.Пустой();
	
	Возврат ПрайсЛистПуст;
	
КонецФункции

// Истина, если сканирование производится внешним сканером
// 
// Возвращаемое значение:
//   Булево   - Ложь, если внутренняя камера устройства или не используется.
//
Функция СканированиеВнешнимСканером() Экспорт
	
	СканированиеВнешнимСканером = ТипУстройстваСканирования() = Перечисления.ТипыУстройствСканирования.ВнешнийСканерШтрихкодов;
	Возврат СканированиеВнешнимСканером;
	
КонецФункции

// Истина, если сканирование производится внешним сканером
// 
// Возвращаемое значение:
//   Булево   - Ложь, если внутренняя камера устройства или не используется.
//
Функция СканированиеВстроеннойКамерой() Экспорт
	
	СканированиеВнешнимСканером = ТипУстройстваСканирования() = Перечисления.ТипыУстройствСканирования.ВстроеннаяКамера;
	Возврат СканированиеВнешнимСканером;
	
КонецФункции

// Экземпляр оборудования при сканировании внешним сканером штрихкодов
//
// Возвращаемое значение:
//   СправочникСсылка.ПодключаемоеОборудование - пустая ссылка, если не используется.
//
Функция ОборудованиеСканированияШтрихкодов() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОборудованиеСканирования");
	
КонецФункции

Функция ИспользуетсяАсинхронныйСканерШтрихкодов() Экспорт
	
	ОборудованиеСканирования = ОборудованиеСканированияШтрихкодов();
	
	Возврат ПодключаемоеОборудованиеВызовСервера.ЭтоАсинхронныйСканерШтрихкодов(ОборудованиеСканирования);
	
КонецФункции

Функция ИспользуетсяККТ() Экспорт
	
	ОборудованиеПечати = ОборудованиеПечати();
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) Тогда
		
		Если ОборудованиеПечати.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Экземпляр оборудования печати
//
// Возвращаемое значение:
//   СправочникСсылка.ПодключаемоеОборудование - пустая ссылка, если не используется.
//
Функция ОборудованиеПечати() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОборудованиеПечати");
	
КонецФункции

// Экземпляр оборудования платежной системы
//
// Возвращаемое значение:
//   СправочникСсылка.ПодключаемоеОборудование - пустая ссылка, если не используется.
//
Функция ОборудованиеПлатежнойСистемы() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОборудованиеПлатежнойСистемы");
	
КонецФункции

// Тип устройства сканирования штрихкодов (встроенная камера или внешний сканер)
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыУстройствСканирования - пустая ссылка, если не используется.
//
Функция ТипУстройстваСканирования() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ТипУстройстваСканирования");
	
КонецФункции

// Истина, если установлен режим синхронизации данных (константа)
//
// Возвращаемое значение:
//   Булево   - Ложь, если режим не установлен.
//
Функция УстановленРежимСинхронизации() Экспорт
	
	Установлен = ЗначениеЗаполнено(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РежимСинхронизацииДанных"));
	
	Возврат Установлен;
	
КонецФункции

// Истина, если заполнены обязательные параметры учета:
// наименование организации, ИНН и система налогообложения.
//
// Возвращаемое значение:
//   Булево   - Ложь, если хотя бы один из параметров не заполнен.
//
Функция ЗаполненыПараметрыУчета() Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НаименованиеОрганизации"))
		И ЗначениеЗаполнено(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИНН"))
		И ЗначениеЗаполнено(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("СистемаНалогообложения")) Тогда
		
		Возврат Истина;
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Истина, если используется автономный режим работы
//
// Возвращаемое значение:
//   Булево   - Ложь, если хотя бы один из параметров не заполнен.
//
Функция ЭтоАвтономныйРежим() Экспорт
	
	РежимСинхронизацииДанных = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("РежимСинхронизацииДанных");
	
	Возврат РежимСинхронизацииДанных = Перечисления.РежимСинхронизацииДанных.Автономный;
	
КонецФункции

// Истина, если заполнены параметры синхронизации
//
// Возвращаемое значение:
//   Булево   - Ложь, если параметры не заполнены.
//
Функция ЗаполненыПараметрыСинхронизации() Экспорт
	
	ВидТранспортаСообщенийОбмена = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВидТранспортаСообщенийОбмена");
	
	Возврат ЗначениеЗаполнено(ВидТранспортаСообщенийОбмена);
	
КонецФункции

// Истина, если необходимо отображать команду сканирования штрихкодов товаров.
// Должны использоваться штрихкоды и настроено оборудование сканирования.
//
// Возвращаемое значение:
//   Булево   - Ложь, если штрихкодов у товаров нет или не настроено оборудование.
//
Функция ОтображатьКомандуСканированияШтрихкодаТоваров() Экспорт
	
	ИспользуютсяШтрихкоды = ЗначениеНастроекПовтИсп.ИспользуютсяШтрихкоды();
	
	Возврат ЗначениеЗаполнено(ЗначениеНастроекВызовСервераПовтИсп.ТипУстройстваСканирования()) И ИспользуютсяШтрихкоды
	
КонецФункции

// Значение константы ПечататьШтрихкодНаЧеке
//
// Возвращаемое значение:
//   Булево
//
Функция ПечататьШтрихкодНаЧеке() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПечататьШтрихкодНаЧеке");
	
КонецФункции

// Значение константы ПечататьШтрихкодНаПречеке
//
// Возвращаемое значение:
//   Булево
//
Функция ПечататьШтрихкодНаПречеке() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПечататьШтрихкодНаПречеке");
	
КонецФункции

// Значение константы СпособФорматноЛогическогоКонтроля
//
// Возвращаемое значение:
//   Булево
//
Функция СпособФорматноЛогическогоКонтроля() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("СпособФорматноЛогическогоКонтроля");
	
КонецФункции

// Значение константы ПечататьШтрихкодНаПречеке
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьПречек() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьПречек");
	
КонецФункции

// Значение константы НаименованиеОрганизации
//
// Возвращаемое значение:
//   Булево
//
Функция НаименованиеОрганизации() Экспорт
	
	НаименованиеОрганизации = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НаименованиеОрганизации");
	Возврат НаименованиеОрганизации;
	
КонецФункции

// Значение константы ПечататьЭтикеткиЦенники
//
// Возвращаемое значение:
//   Булево
//
Функция ПечататьЭтикеткиЦенники() Экспорт
	
	ПечататьЭтикеткиЦенники = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПечататьЭтикеткиЦенники");
	Возврат ПечататьЭтикеткиЦенники;
	
КонецФункции

// Настроенный шаблон этикетки или шаблон по умолчанию
// Если шаблон не настроен, то возвращается шаблон по умолчанию.
//
// Возвращаемое значение:
//   СписокЗначений - шаблон
//
Функция ШаблонЭтикетки() Экспорт
	
	ШаблонЭтикетки = Константы.ШаблонЭтикетки.Получить().Получить();
	
	Если ТипЗнч(ШаблонЭтикетки) = Тип("СписокЗначений") И НЕ ШаблонЭтикетки.Количество() = 0 Тогда
		
		Возврат ШаблонЭтикетки;
		
	КонецЕсли;
	
	Возврат ШаблонЭтикеткиПоУмолчанию();
	
КонецФункции

// Настроенный шаблон ценника или шаблон по умолчанию
// Если шаблон не настроен, то возвращается шаблон по умолчанию.
//
// Возвращаемое значение:
//   СписокЗначений - шаблон
//
Функция ШаблонЦенника() Экспорт
	
	ШаблонЦенника = Константы.ШаблонЦенника.Получить().Получить();
	
	Если ТипЗнч(ШаблонЦенника) = Тип("СписокЗначений") И НЕ ШаблонЦенника.Количество() = 0 Тогда
		
		Возврат ШаблонЦенника;
		
	КонецЕсли;
	
	Возврат ШаблонЦенникаПоУмолчанию();
	
КонецФункции

// Шаблон ценника по умолчанию
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ШаблонЦенникаПоУмолчанию() Экспорт
	
	СписокШаблонЦенника = Новый СписокЗначений;
	СписокШаблонЦенника.Добавить("НаименованиеОрганизации", НСтр("ru = 'Наименование организации'"), Истина);
	СписокШаблонЦенника.Добавить("НаименованиеТовара",      НСтр("ru = 'Наименование товара *'"),      Истина);
	СписокШаблонЦенника.Добавить("Артикул",                 НСтр("ru = 'Артикул'"),                  Ложь);
	СписокШаблонЦенника.Добавить("Штрихкод",                НСтр("ru = 'Штрихкод'"),                 Истина);
	СписокШаблонЦенника.Добавить("Цена",                    НСтр("ru = 'Цена *'"),                     Истина);
	СписокШаблонЦенника.Добавить("ДатаПечати",              НСтр("ru = 'Дата печати *'"),              Истина);
	
	Возврат СписокШаблонЦенника;
	
КонецФункции

// Шаблон этикетки по умолчанию
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ШаблонЭтикеткиПоУмолчанию() Экспорт
	
	СписокШаблонЭтикетки = Новый СписокЗначений;
	СписокШаблонЭтикетки.Добавить("НаименованиеОрганизации", НСтр("ru = 'Наименование организации'"), Истина);
	СписокШаблонЭтикетки.Добавить("НаименованиеТовара",      НСтр("ru = 'Наименование товара'"),      Истина);
	СписокШаблонЭтикетки.Добавить("Артикул",                 НСтр("ru = 'Артикул'"),                  Ложь);
	СписокШаблонЭтикетки.Добавить("Штрихкод",                НСтр("ru = 'Штрихкод'"),                 Истина);
	СписокШаблонЭтикетки.Добавить("ДатаПечати",              НСтр("ru = 'Дата печати'"),              Ложь);
	
	Возврат СписокШаблонЭтикетки;
	
КонецФункции

// Истина, если необходимо печатать отчет при кассовых операциях X-отчет и Z-отчет
// Печать производится только на оборудовании типа Принтер чеков.
//
// Булево - Ложь, если настроен не принтер чеков.
//
Функция ПечататьИнформациюПоСменеПриСнятииКассовыхОтчетов() Экспорт
	
	ОборудованиеПечати = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОборудованиеПечати");
	
	Если ЗначениеЗаполнено(ОборудованиеПечати) 
		И ОборудованиеПечати.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТекущаяВерсияПриложения() Экспорт
	
	ТекущаяВерсияПриложения = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ТекущаяВерсияПриложения");
	
	// версия для разработчиков
	Если СтрЧислоВхождений(ТекущаяВерсияПриложения, ".") = 3 И Прав(ТекущаяВерсияПриложения, 2) = ".0" Тогда
		ТекущаяВерсияПриложения = Сред(ТекущаяВерсияПриложения, 1, СтрДлина(ТекущаяВерсияПриложения) - 2);
	КонецЕсли;
	
	Возврат ТекущаяВерсияПриложения;
	
КонецФункции

Функция ИспользуетсяУчетПоКассирам() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьУчетПоКассирам");
	
КонецФункции

Функция ИспользуетсяОплатаПлатежнымиКартами() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьОплатуПлатежнымиКартами");
	
КонецФункции

Функция ИспользуетсяОплатаНаличными() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьОплатуНаличными");
	
КонецФункции

Функция ИспользуетсяПлатежнаяСистема() Экспорт
	
	Возврат ЗначениеЗаполнено(ОборудованиеПлатежнойСистемы()) И ИспользуетсяОплатаПлатежнымиКартами();
	
КонецФункции

// ЛОГ

Функция ПутьКФайлуЛога() Экспорт
	
	Возврат ОбщегоНазначенияВызовСервера.ПолучитьПараметрСеанса("ПутьКФайлуЛога");
	
КонецФункции

Функция ИспользуетсяЛог() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьЛог");
	
КонецФункции

// ФЗ-54

Функция СистемаНалогообложенияККТ() Экспорт
	
	СистемаНалогообложения = Константы.СистемаНалогообложения.Получить();
	
	Возврат ОбщегоНазначенияПовтИсп.ПолучитьСистемуНалогообложенияККТ(СистемаНалогообложения);
	
КонецФункции

Функция ОтправкаЭлектронногоЧекаМобильнымУстройством() Экспорт
	
	Возврат Ложь;
	
КонецФункции


//ЕГАИС

Функция НезаполненныеПараметрыЕГАИС() Экспорт
	
	СписокПараметров = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(КПП()) Тогда
		
		СписокПараметров.Добавить("КПП", НСтр("ru = 'КПП'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеМагазина()) Тогда
		
		СписокПараметров.Добавить("НаименованиеМагазина", НСтр("ru = 'Наименование магазина'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресМагазина()) Тогда
		
		СписокПараметров.Добавить("АдресМагазина", НСтр("ru = 'Адрес магазина'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаводскойНомерККМ()) Тогда
		
		СписокПараметров.Добавить("ЗаводскойНомерККМ", НСтр("ru = 'Заводской номер ККМ'"));
	КонецЕсли;
	
	Возврат СписокПараметров;
	
КонецФункции

Функция ИНН() Экспорт
	
	ИНН = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИНН");
	
	Возврат ИНН;
	
КонецФункции

Функция КПП() Экспорт
	
	КПП = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("КПП");
	
	Возврат КПП;
	
КонецФункции

Функция АдресМагазина() Экспорт
	
	АдресМагазина = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("АдресМагазина");
	
	Возврат АдресМагазина;
	
КонецФункции

Функция НаименованиеМагазина() Экспорт
	
	НаименованиеМагазина = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("НаименованиеМагазина");
	
	Возврат НаименованиеМагазина;
	
КонецФункции

Функция ЗаводскойНомерККМ() Экспорт
	
	ЗаводскойНомерККМ = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЗаводскойНомерККМ");
	
	Возврат ЗаводскойНомерККМ;
	
КонецФункции

// Проверяет необходимость выгрузки в ЕГАИС немаркируемой алкогольной продукции.
//
Функция ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС() Экспорт
	
	Возврат ИнтеграцияЕГАИСВызовСервера.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС();
	
КонецФункции

Функция ИспользуетсяЕГАИСПриПродаже(ДатаПродажи = Неопределено) Экспорт
	
	Возврат ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ДатаПродажи);
	
КонецФункции

Функция ОткрыватьПодборПослеПробитияЧека() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ОткрыватьПодборПослеПробитияЧека");
	
КонецФункции

Функция ИдентификаторФСРАР() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторФСРАР");
	
КонецФункции

Функция АдресУТМ() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("АдресУТМ");
	
КонецФункции

Функция ПортУТМ() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПортУТМ");
	
КонецФункции

// ГЕО

Функция ИспользуетсяГеолокация() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ФиксироватьКоординатыПробитияЧека");
	
КонецФункции

Функция ЧастотаОбновленияКоординат() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЧастотаОбновленияКоординат");
	
КонецФункции

Функция ИспользуютсяЗаказыКлиентов() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьЗаказыКлиентов");
	
КонецФункции

// ФЗ-54

Функция КодСистемыНалогообложения() Экспорт
	
	СистемаНалогообложения = Константы.СистемаНалогообложения.Получить();
	
	Если СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
		Возврат 0;
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.УпрощеннаяДоход Тогда
		Возврат 1;
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.УпрощеннаяДоходМинусРасход Тогда
		Возврат 2;
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.ЕдиныйНалогНаВмененныйДоход Тогда
		Возврат 3;
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.ЕдиныйСельскохозяйственныйНалог Тогда
		Возврат 4;
		
	ИначеЕсли СистемаНалогообложения = Перечисления.СистемыНалогообложения.Патентная Тогда
		Возврат 5;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

//

Функция ЗагружатьНастройки() Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.ЗагружатьНастройки();
	
КонецФункции

#КонецОбласти
